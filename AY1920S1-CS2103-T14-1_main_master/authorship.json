[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d Teacher\u0027s Notebook"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-T14-1/main[image:https://travis-ci.org/se-edu/addressbook-level3.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "https://ci.appveyor.com/project/weikiat97/main/branch/master[image:https://ci.appveyor.com/api/projects/status/tcv8k40yyxxr15vm/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-T14-1/main[image:https://coveralls.io/repos/github/AY1920S1-CS2103-T14-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* This is a desktop Teacher\u0027s Notebook application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* It is a desktop application intended for teachers to manage their classes, students and their tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* It is *written in OOP fashion*. It provides teachers with a useful platform to manage all their matters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* The original source of the code, AddressBook-Level3 was created by SE-EDU initiative at https://se-education.org[AddressBook-Level3]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 6,
      "weikiat97": 2,
      "-": 28
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    archiveName \u003d \u0027teachersnotebook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        \u0027site-name\u0027: \u0027Teacher Notebook\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://ay1920s1-cs2103-t14-1.github.io/main/\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 3,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Teacher\u0027s Notebook was developed by Team https://github.com/orgs/AY1920S1-CS2103-T14-1/people. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d Prof.Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d Loh Wei Kiat"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "image::weikiat97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "{empty}[https://github.com/weikiat97[github]] [\u003c\u003cweikiat97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Responsibilities: Logic + Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d Sebastian Lie Hsien Yong"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "image::sebastianlie.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "{empty}[https://github.com/SebastianLie[github]] [\u003c\u003cSebastianLie#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Responsibilities: Data + UI"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d Tay Sheryl"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "image::sheryltay28.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "{empty}[https://github.com/sheryltay28[github]] [\u003c\u003csheryltay28#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Responsibilities: Logic + Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d Yoon Jia Jun, Ken"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "image::xelyion.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "{empty}[https://github.com/Xelyion[github]] [\u003c\u003cXelyion#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Responsibilities: Model + UI"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 2,
      "sheryltay28": 12,
      "weikiat97": 6,
      "-": 35
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T14-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* *Email us* : You can also reach us at loh.weikiat@u.nus.edu"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 1,
      "weikiat97": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "A project often depends on third-party libraries. For example, Teacher\u0027s Notebook depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 1,
      "-": 47
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d Teacher\u0027s Notebook - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "By: `CS2103-T14-1`      Since: `October 19`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".Component interactions for `deletestudent 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `StudentListPanel`, `AssignmentListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* Handles the History feature"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".  `Logic` uses the `NotebookParser` class to parse the user command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a student)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"deletestudent 1\")` API call."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".Interactions Inside the Logic Component for the `deletestudent 1` Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "NOTE: The lifeline for `DeleteStudentCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// tag::model[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* stores the Notebook data."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* saves the state of the Notebook after each change in state for undo redo function."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cClassroom\u003e`, `ObservableList\u003cStudent\u003e`, `ObservableList\u003cAssignment\u003e`, and `ObservableList\u003cLesson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Classroom`, which `Student` can reference. This would allow `Classroom` to only require one `Tag` object per unique `Tag`, instead of each `Student` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// end::model[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// tag::storage[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* can save the Notebook data in json format and read it back."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// end::storage[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "// tag::autocomplete[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d Autocomplete feature"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The AutoComplete feature is facilitated by 2 classes: the `AutoCompleteTextField`, and the class `Styles`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Both are represented in the class diagram below."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "image::SebastianDG/AutoCompleteClassDiagram.png[auto_,300,300,pdfwidth\u003d50%,scaledwidth\u003d50%]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The `AutoCompleteTextField` adds a `ChangeListener` to textProperty() that notifies `AutoCompleteTextField`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "whenever the user inputs new text, i.e when the text entered changes."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 1.  User triggers the listener when user enters text."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 2. From the text entered, `AutoCompleteTextField` attempts suggesting existing commands."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "If input matches any existing commands, it proceeds to step 3. Otherwise, it does nothing and waits user input."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 3. `AutoCompleteTextField` calls `Styles#buildTextFlow`to highlight the portion of each"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "command suggestion where the user\u0027s input matches the suggestion."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 4. `AutoCompleteTextField` then displays a popup menu using the javafx class `ContextMenu`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 5. If the user selects a suggestion, the textfield is set to that suggestion, and the popup menu is"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "closed. If the user enters more text, `AutoCompleteTextField` returns to step 1."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 6. Otherwise, the popup menu is closed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "This sequence of steps is illustrated below with an activity diagram."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "image::SebastianDG/auto_activity.JPG[auto_,500,500,pdfwidth\u003d50%,scaledwidth\u003d50%]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "// end::autocomplete[]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "// tag::upload[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d Upload feature"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The uploading of a student\u0027s picture is facilitated by UploadPictureCommandParser, UploadPictureCommand, ModelManager, FileChooser and DisplayPicture,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "while the displaying of the student\u0027s picture is facilitated by MainWindow and StudentCard. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "`UploadPictureCommandParser` implements `Parser`. `UploadPictureCommand` extends `Command`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "and represents the logic that will be executed once the user activates the upload command and chooses a file. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The `UploadPictureCommand` command communicates with `ModelManager` to replace the old `Student` object with"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "a new `Student` object that has its display picture field changed. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "This change is then reflected in the UI when `MainWindow` loads the `StudentCard` for the new student,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "which will load the image and display it in the UI."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The main operation implemented is `UploadPictureCommand#execute`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 1. The user wants to upload a display picture for their student. User identifies the student\u0027s index"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "number and enters the command `upload INDEX`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 2. `MainWindow` detects the `upload` command word and uses `FileChooser` to open a window for the user to select a picture from their computer."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "`MainWindow` then saves the path of the selected file as a string and adds a prefix \"f/\" to the input arguments."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The path of the file is also appended to the end of the input string before the input arguments are passed to `NotebookParser`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 3. `NotebookParser` parses the input and detects the `upload` command word, and calls `UploadPictureCommandParser`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "This in turn checks user\u0027s input for errors before calling `UploadPictureCommand`, which checks whether the file"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "is a PNG or JPG file."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 4. `LogicManager` executes the `UploadPictureCommand`, which checks the validity of the index provided,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "as well as whether the picture selected is different from the picture already displayed."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "A visual representation of the order of checks for the input arguments are displayed in the diagram below."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "image::upload/upload_dg_1.JPG[checksdiagram,400,480,pdfwidth\u003d50%,scaledwidth\u003d50%]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 5. After these checks, the `createEditedStudent` method in `UploadPictureCommand` is called to create a new `Student` object, editedStudent,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "which has its display filepath changed to the file the user chose."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 6. `UploadPictureCommand` calls Model to replace the current student with the editedStudent."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The command result is then passed back all the way to `MainWindow` which refreshes the GUI,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "and displays the new picture for the chosen student."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The following diagram illustrates the process above."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "image::SebastianDG/UploadSequenceDiagram.png[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "// end::upload[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d Undo and Redo feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The undo/redo mechanism is facilitated by `Caretaker`, with each notebook state saved as a `Memento`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "It extends `Notebook` with an undo/redo history, stored internally as an `mementos` and `statePointer`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `Caretaker#saveState()` -- Saves the current notebook state in its history."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `Caretaker#undo()` -- Restores the previous notebook state from its history by undoing the previous command."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `Caretaker#redo()` -- Restores a previously undone notebook state from its history by redoing the previously undone command."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#saveState()`, `Model#undo()` and `Model#redo()` respectively."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Step 1. The user launches the application for the first time. The `Caretaker` will be initialized with the initial notebook state, and the `statePointer` pointing to that single notebook state."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Step 2. The user executes `deletestudent 5` command to delete the 5th student in the current classroom. The `deletestudent` command calls `Model#saveState()`, causing the modified state of the notebook after the `deletestudent 5` command executes to be saved in the `mementos`, and the `statePointer` is shifted to the newly inserted notebook state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Step 3. The user executes `addstudent n/David ...` to add a new student. The `addstudent` command also calls `Model#saveState()`, causing another modified notebook state to be saved into the `mementos`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "If a command fails its execution, it will not call `Model#saveState()`, so the notebook state will not be saved into the `mementos`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Step 4. The user now decides that adding the student was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undo()`, which will shift the `statePointer` once to the left, pointing it to the previous notebook state, and restores the notebook to that state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "If the `statePointer` is at index 0, pointing to the initial notebook state, then there are no previous notebook states to restore. The `undo` command uses `Model#canUndo()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redo()`, which shifts the `statePointer` once to the right, pointing to the previously undone state, and restores the notebook to that state."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "If the `statePointer` is at index `mementos.size() - 1`, pointing to the latest notebook state, then there are no undone notebook states to restore. The `redo` command uses `Model#canRedo()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Step 5. The user then decides to execute the command `liststudents`. Commands that do not modify the classroom, such as `liststudents`, will usually not call `Model#saveState()`, `Model#undo()` or `Model#redo()`. Thus, the `mementos` remains unchanged."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#saveState()`. Since the `statePointer` is not pointing at the end of the `mementos`, all notebook states after the `statePointer` will be purged. We designed it this way because it no longer makes sense to redo the `addstudent n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire notebook."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Pros: Will use less memory (e.g. for `deletestudent`, just save the student being deleted)."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Cons: Need to ensure that the commands are able to be executed at the correct index."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of notebook states."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `Caretaker`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "// tag::Assignment[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d Assignment feature"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The Assignment class works with high similarity to the Student Class implemented."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "A UniqueList of Assignments exist in the Classroom Class alongside the UniqueList of Students, and serve to keep track of assignments for a particular Classroom."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The commands that work in similar fashion to Student Class are: +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "`AddAssignment`, `DeleteAssignment`, `EditAssignment`, `ListAssignment`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* `UniqueAssignmentList#addAssignment()` -- Adds a new Assignment object to the UniqueAssignmentList."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* `UniqueAssigmentList#remove()` -- Removes a Lesson object from the UniqueAssignmentList."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* `UniqueAssignmentList#setAssignment()` -- Updates the Assignment with user input."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The Assignment class keeps track of the grades of all students in the class for a particular assignment. This feature is"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "necessary to users to monitor the progress of every student, and to provide assistance to students who might be"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "failing their tests."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Each Assignment contains the following classes: AssignmentName, AssignmentGrade, and AssignmentDeadline."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* The AssignmentName stores the name of the assignment."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* The AssignmentGrade class contains the grades of every student in the class through a LinkedHashMap\u003cString studentName, String marks\u003e."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* The AssignmentDeadline class contains the time when the assignment is due."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Upon creation of a new Assignment, `Assignment#initialiseGrades()` is called, which populates the LinkedHashMap"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "with keys (students\u0027 names) and the value \"Not Submitted\". The user can then update the grades of a student individually or"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "all of the students simultaneously through the `UpdateGrades` command, which calls the method `Assignment#setGrades()`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "After every command, `Assignment#checkCompletion()` is called to determine the completion status of the assignment,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "which will be \"Completed\" if none of the grades are \"Not Submitted\". Upon addition of a new student into the classroom,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "each Assignment present in the classroom will add another entry into the AssignmentGrade. If the Assignment was Not Completed,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "the value \"Not Submitted\" will be paired with the key through the method `Assignment#addNewStudentGrade`. Should the Assignment have been Completed, the value \"Late to the party\" will be paired instead through the method `Assignment#addOneStudentGrade`, indicating that the student does not need to submit said assignment any longer, since it has already been graded before he/she joined the classroom."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "// end::Assignment[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// tag::getgrades[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Get grades feature"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The current GetStudentGradesCommand will retrieve all the grades of a particular student."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "This is done through iterating through the FilteredAssignmentList, and pulling all the grades of a specified student."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Additionally, it implements the following operations through Commands:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `Assignment#getGrades()` -- Retrieves the Map that contains students\u0027 names as the key and students\u0027 grades as the value."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The following sequence diagram shows how the get grades operation works:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "image::GetGradesSequenceDiagram.png[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "After getting the Map from the `getGrades()` method, if the key of the current key-value pair is equals to the name of the student,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "the value, which is the grades of the student, will be added to the output that will be shown in the CommandResult."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// end::getgrades[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// tag::getunsubmitted[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Get unsubmitted assignments feature"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The implementation for getting unsubmitted assignments is similar to the get submitted feature, except that it will search for values of \"Not submitted.\" instead."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The following activity diagram shows how the get unsubmitted operation works:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "image::GetUnsubmittedActivityDiagram.png[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// end::getunsubmitted[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "// tag::Lesson[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d Lesson Feature"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "The Lesson class works with high similarity to the Student Class implemented."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "A UniqueList of Lessons exist in the Notebook alongside the UniqueList of Classrooms, and serve to keep track of lessons for the user."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Additionally, it implements the following operations through Commands:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* `UniqueLessonList#addLesson()` -- Adds a new Lesson object to the UniqueLessonList."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* `UniqueLessonList#remove()` -- Removes a Lesson object from the UniqueLessonList."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* `Lesson#set()` -- Updates the Lesson with user input."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "// end::Lesson[]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "// tag::Schedule[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d Scheduling Feature"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "When a new Lesson is added to the UniqueLessonList, a listener attached to the list will be triggered and it will create a scheduler to schedule the lesson."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Once the timing of lesson is reached, an alert box will be created in the GUI to serve as a reminder."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "The following activity and sequence diagram shows how the scheduling operation works:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "image::SchedulingActivityDiagram.png[]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "image::SchedulingSequenceDiagram.png[]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "// end::Schedule[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* needs to keep track of vast amount of information on students and homework"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* has many deadlines to keep track of"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* prefer desktop apps over mobile or written"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* likes being organised"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "*Value proposition*: manage students, deadlines, homework in one place."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* * *` |teacher  |keep track of my students’ progress |understand which student to help more"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* * *` |teacher  |keep track of all my administrative duties |focus on providing the best education I can for my students"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* * *` |slave-driving teacher |keep track of my students’ submissions |follow up if they have undone assignments"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* * *` |thoughtful teacher  |keep track of important details of students| establish rapport with them"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* * *` |responsible teacher |keep track of all the deadlines that I have | set a good example for my students"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* * *` |concerned teacher  |want to be able to access parents’ contact details |communicate often and openly with them about their child"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* * *` |caring teacher  |know any health issues students may have | look out for which students I have to take more care of"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* *` |teacher |what my next lessons are | avoid being late for lessons."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* *` |teacher |keep track of students’ behaviour in class | so I can chart my students\u0027 growth or misbehaviour"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* *` |teacher |record feedback from students | help them with issues that they may have"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* *` |teacher |know what homework the students already have | understand how much homework I can assign to them next"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`* *` |teacher |know students\u0027 MBTI | cater lessons to their respective learning styles"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`*` |teacher |know their astrological signs|know which students are compatible with each other"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`*` |teacher |monitor my students’ social media |know how they are faring in their personal life"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`*` |teacher |be bilingual and know the pronunciation of their Mother Tongue names | can respect their culture"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|`*` |teacher |know their number of demerit points |put them in the first row in class"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "(For all use cases below, the *System* is the `Teacher\u0027s Notebook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Use case: Delete student"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "2.  Notebook shows a list of students"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "3.  User requests to delete a specific student in the list"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "4.  Notebook deletes the student"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** 3a1. Notebook shows an error message."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Use case: Edit assignment"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "1.  User requests to list assignments"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "2.  Notebook shows a list of assignments"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "3.  User requests to edit a specified assignment in the list"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "4.  Notebook edits the student"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** 3a1. Notebook shows an error message."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "+"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* 3b. There is a similar assignment in the list as the one that user wants to edit to."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "+"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** 3b1. Notebook shows an error message."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// tag::undoUseCase[]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Use case: Undo"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "1.  User requests to do a command."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "2.  Notebook does the action."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "3.  User requests to undo."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "4.  Notebook undoes action 2, action from step 2 is undone."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "+"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* 1a. The given command is invalid."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "+"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** 1a1. Notebook shows an error message."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "+"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "+"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* 3a. The action cannot be undone as it does not change the state of the notebook."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "+"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** 3a1. Notebook shows an error message."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "+"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// end::undoUseCase[]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ".  Should be able to store and retrieve 5 classes of 30+ students without sluggishness."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".  Should be able to display student\u0027s photos in 4k resolution."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".  Application should respond within 3 seconds."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".  User should enjoy looking at the application."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".  User should be able to view and undo changes."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".  Application should run without needing an Internet connection."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".  Application should be easy to use and understand for first time users."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "A contact detail that is not meant to be shared with others."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Assignment::"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Any task that is assigned to students that will eventually be submitted and graded by the user."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Lesson::"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Any activity in which the user has to physically attend."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Teacher\u0027s Notebook"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Author:"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Loh Wei Kiat weikiat97@github.com"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Sebastian Lie Hsien Yong SebastianLie@github.com"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Tay Sheryl sheryltay28@github.com"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Yoon Jia Jun, Ken Xelyion@github.com"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Useful for teachers to consolidate all the information related to their class."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Easy to navigate and understand how the application works."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Unable to pop out reminder when the application is not opened."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. Run the jar file on the command line by typing `java -jar teachersnotebook.jar`. +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. Re-launch the app by typing `java -jar teachersnotebook.jar` in the command line. +"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Deleting a student"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ". Deleting a student while all students are listed"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. Prerequisites: List all students using the `liststudents` command. Multiple students in the list."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. Test case: `deletestudent 1` +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. Test case: `deletestudent 0` +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "   Expected: No student is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. Other incorrect delete commands to try: `deletestudent`, `deletestudent x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Undo / Redo"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ". Undoing a command that was previously done, and redoing it after."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. Prerequisites: A command that changes the state of the notebook should be executed (e.g. add / edit / delete)."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. Test case (assume a student was added in the previous command execution): `undo` +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "   Expected: The previously added student will now be removed. Command result will show the message \u0027Undo success!\". Student panel will show that the student is no longer in the list."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. Test case (assume the only previous command was `listassignments`): `undo` +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "   Expected: There will be undo command executed. Reason is because there is no change in the state of the notebook. Command result will show the message \u0027There is no action to undo!\u0027."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. Test case (assume a student was added in the previous command execution): `undo`, followed by `redo` +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "   Expected: When undo is executed, student will be removed from the list just like in test case 1."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "   When redo is executed, the student that was previously removed will now be added back again. Command result will show the message \u0027Redo success!\u0027. Student panel will show that the student is now back in the list."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. Other incorrect undo / redo commands to try: `undo x`, `redo x`, `undoes`, `redoes`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. If the data file is missing, the application will simply start from a new notebook that is populated with several data size. User can use the command `clear` to get an empty notebook. +"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "   Expected: New notebook with populated data."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".. If the data file is corrupted, users should delete the notebook.json file and restart from a new notebook. It may be tough to rectify the json file without knowing the internal structure of the application. +"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "   Expected: New notebook with populated data."
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 117,
      "Xelyion": 35,
      "sheryltay28": 27,
      "weikiat97": 167,
      "-": 368
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 1,
      "-": 122
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all students who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "command types that mutate the data. e.g. `AddStudentCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The above method can be used to get a printable string representing a bunch of students details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "// p is a Student object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Add a `throws Exception` clause to the `AddStudentCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "weikiat97": 4,
      "-": 211
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, Teacher\u0027s Notebook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "weikiat97": 2,
      "-": 82
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 1,
      "-": 51
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d Teacher’s Notebook - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T14-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "By: `CS2103-T14-1`      Since: `October 19`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Teacher’s Notebook is for teachers who prefer to make use of an application to keep track of the deliverables,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "tasks and students’ information. It is optimized for teachers who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you are a teacher who wants to manage your students and your tasks efficiently, and can type fast, Teacher’s Notebook can get your work done much faster than traditional applications! Jump to Section 2, “Quick Start” to get started! Enjoy!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ".  Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".  Download the latest teachersnotebook.jar {repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Teacher’s Notebook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ".  Type in the commands and press enter to execute them. Refer to Section 3: Features for more details on the commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*Command Format* +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Words in UPPER_CASE are the parameters supplied by the user e.g. in `addclass c/CLASS`, CLASS is a parameter which can be used as `addclass c/4C`. +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Items in square brackets are optional e.g. `n/NAME [m/MEDICAL_CONDITIONS]` can be used as `n/John Doe m/Sinus` or `n/John Doe`. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Items with … after them can be used multiple times including zero times e.g. `[t/TAGS]...` can be used as (i.e. 0 times), `t/Math REP`, `t/MATH REP t/Bully` etc. +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME a/ADDRESS`, `a/ADDRESS, n/NAME` is also acceptable"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// tag::classes[]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d Classrooms"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The user can view his or her classrooms in the middle panel of the GUI of Teacher\u0027s Notebook as shown below. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "image::class/class2.JPG[class,600,480,pdfwidth\u003d50%,scaledwidth\u003d50%]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The first classroom in the panel is selected by default."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Classroom names are case sensitive."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Adding Classroom: addclass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Adds a new classroom to the list of existing classroom."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Format: `addclass c/CLASS_NAME`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* `addclass c/4E7`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* `addclass c/3E8`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The name of the new classroom must not be empty,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "and it must be different from all current classroom names."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting Classroom: deleteclass"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Allows a user to delete the selected classroom. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `deleteclass c/CLASS_NAME`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `deleteclass c/4E7`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `deleteclass c/3E8`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Classroom must be in the current list of classrooms, and CLASS_NAME cannot be empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Setting Classroom: setclass"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Allows a user to select a classroom as the selected classroom."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student and Assignment functions will act on the selected classroom."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The image below illustrates the change in"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "the middle GUI panel when setclass is called."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "image::class/setclass.JPG[class,600,480,pdfwidth\u003d50%,scaledwidth\u003d50%]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Format: `setclass c/CLASS_NAME` +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* `setclass c/4E7`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* `setclass c/3E8`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Classroom must be in the current list of classrooms, and classroom name cannot be empty."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// end::classes[]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// tag::lessons[]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Lessons"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "The user can view his or her lessons on the left panel of the GUI of the Teacher\u0027s Notebook. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "There are several fields in each lesson as shown below:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* LessonName - Prefix: l/"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** LessonNames should be alphanumerical, and cannot be empty."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* StartTime - Prefix: st/"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** StartTime should be in the format dd/mm/yyyy hhmm e.g. 12/01/2020 1200"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* EndTime - Prefix: et/"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** EndTime should be in the format dd/mm/yyyy hhmm e.g. 12/01/2020 1300"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* repeat - Prefix: r/"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* Day - Prefix: day/"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Day should be an integer between 1-7."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d\u003d Adding: addlesson"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Adds a lesson to the lesson list of the notebook. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Feature to repeat lessons will be implemented in v2.0 +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `addlesson l/LESSON st/START_TIME et/ET_TIME:dd/MM/yy HHmm`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `addlesson l/Math 4E7 st/12/01/2020 1200 et/12/01/2020 1300`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `addlesson l/English 3E8 st/06/01/2020 1200 et/06/01/2020 1300`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Once a lesson is added, a reminder will be automatically scheduled and an alert box will pop up when current time matches the time of the lesson."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d\u003d Editing: editlesson"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Edits a lesson at the specific index in the day list of reminder panel. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Day index represents day in week, e.g. Monday: 1, Tuesday: 2 +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `editlesson LESSON_INDEX day/DAY_INDEX [l/LESSON_NAME] [st/START_TIME] [et/END_TIME]`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `editlesson 1 day/3 l/English 4E2`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `editlesson 2 day/4 st/05/01/2020 1200 et/05/01/2020 1300`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "The index and day index provided must be valid and at least one field must be edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting: deletelesson"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Deletes a lesson at the specified index in the day list of reminder panel. +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Day index represents day in week, e.g. Monday: 1, Tuesday: 2 +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `deletelesson LESSON_INDEX day/DAY_INDEX`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `deletelesson 1 day/2`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `deletelesson 3 day/4`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "The index and day index provided must be valid and at least one field must be edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d\u003d\u003d Finding: findlesson"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Finds lessons which match the given keyword. +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `findlesson KEYWORD`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `findlesson Math`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `findlesson 12:00`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// end::lessons[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// tag::students[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Students"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Students are contained within each classroom. There are several fields in each student as shown below:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Name - Prefix: n/"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Names must be alphanumerical, and cannot be empty."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Email - Prefix: e/"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Emails must be in the format alphanumeric@example.com e.g. amanda@example.com, ilovebubbletea@gmail.com"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Phone - Prefix: p/"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Phone numbers must be at least 3 digits, and must only contain digits."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Address - Prefix: a/"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Address must be alphanumerical, and cannot be empty."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Parent Phone - Prefix: pp/"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Parent phone numbers must be at least 3 digits, and must only contain digits."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Medical Conditions - Prefix: m/"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Medical conditions must be alphanumerical. This is an optional field."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Tags - Prefix: t/"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Tags must be alphanumerical. This is an optional field that can be used multiple times."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* DisplayPicture - Prefix: none"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Display pictures must be in PNG file format. A default display picture is set for each student."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Adding Student: addstudent"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Adds a student to the student list of the current class. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `addstudent n/NAME e/EMAIL p/PHONE a/ADDRESS pp/PARENT_PHONE [m/MEDICAL_CONDITIONS]... [t/TAG]...`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `addstudent n/John Doe e/johndoe@gmail.com p/81930042 a/Jurong East Avenue 3 Blk 639 #12-02 pp/84295512 m/Sinus`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `addstudent n/Jane Doe e/janedoe@hotmail.com p/91823051 a/Tampinese Avenue 5 Blk 772 #02-84 pp/99811241 t/PE Rep t/Naughty`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Editing Student: editstudent"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Edits a student at the specified index in the student list of the current class. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `editstudent STUDENT_INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [pp/PARENT_PHONE] [m/MEDICAL_CONDITIONS], [t/TAG]...`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `editstudent 2 p/98510293 e/jonathan@example.com`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `editstudent 4 n/Xavier Lim`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The index provided must be valid (is an integer and exists in the student list) and at least one field must be edited. If the list has been filtered through the Finding Student command, the index provided corresponds to the index on the filtered list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting Student: deletestudent"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Deletes a student at the specified index in the student list of the current class. +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `deletestudent STUDENT_INDEX`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `deletestudent 5`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The index provided must be valid (is an integer and exists in the student list) If the list has been filtered through the Finding Student command, the index provided corresponds to the index on the filtered list."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Listing Students: liststudents"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Lists all the students in the current classroom."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `liststudents`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Finding Student: findstudent"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Find students whose name matches a given keyword in the current classroom. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Format: `findstudent STUDENT_NAME`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* `findstudent John Doe`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* `findstudent Jane Doe`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "//tag::upload[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d\u003d Uploading: upload"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Allows a user to upload a PNG/JPG file to set the display picture of the student at the specified index in the student list of the current class. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Upon entering the command, a window will popup as shown below:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "image::upload/upload_1.JPG[500,480,pdfwidth\u003d50%,scaledwidth\u003d50%]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "And the user will be prompted to select a PNG/JPG file from their computer to set as the new display picture of the student. +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The user may cancel the upload operation by clicking on cancel in the window that pops up. +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `upload STUDENT_INDEX`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `upload 3`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The index provided must be valid (is an integer and exists in the student list). If the list has been filtered through the Finding Student command, the index provided corresponds to the index on the filtered list."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The directory of the image uploaded is assumed to not change. If the image is moved or deleted after it is set as the display picture, the display picture will be empty when the user starts up Teacher\u0027s Notebook."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d\u003d Resetting display picture"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Resets the display picture of the student to the default."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Format: resetdisplaypic"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* `resetdisplaypic`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "// end::upload[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "// end::students[]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// tag::assignments[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Assignments"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Assignments are contained within each class. There are two fields in each assignment as shown below:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* Name - Prefix: as/"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "** Names must be alphanumerical, and cannot be empty."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* Deadline - Prefix: d/"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "** Deadlines must be in the format dd/MM/yyyy HHmm, and later than the current date and time e.g. 01/12/19 0000, 25/12/19 2359"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Adding Assignment: addassignment"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Adds an assignment to the assignment list of the current class. +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Format: `addassignment as/ASSIGNMENT d/DEADLINE:dd/MM/yyyy HHmm`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* `addassignment as/Math Test d/29/11/2020 1400`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* `addassignment as/English Test 2 d/30/11/2020 1400`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Editing Assignment: editassignment"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Edits an assignment at the specified index in the student list of the current class. +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Format: `editassignment ASSIGNMENT_INDEX [as/ASSIGNMENT_NAME] [d/ASSIGNMENT_DEADLINE]`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* `editassignment 1 as/English Test d/29/11/2020 1400`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* `editassignment 1 as/Math Test d/29/11/2020 1600`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The index provided must be valid (is an integer and exists in the assignment list) and at least one field must be edited. If the list has been filtered through the Finding Assignment command, the index provided corresponds to the index on the filtered list."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting: deleteassignment"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Deletes an assignment at the specified index in the assignment list of the current class. +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Format: `deleteassignment ASSIGNMENT_INDEX`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* `deleteassignment 1`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The index provided must be valid (is an integer and exists in the assignment list). If the list has been filtered through the Finding Assignment command, the index provided corresponds to the index on the filtered list."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Listing Assignments: listassignments"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Lists all the assignments in the assignment list"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    Format: `listassignments`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Finding Assignment: findstudent"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Find assignments whose name matches a given keyword in the current classroom. +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Format: `findassignment ASSIGNMENT_NAME`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* `findassignment Math`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* `findassignment Test`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The keyword is not case-sensitive, so as to provide ease of use for the user."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d\u003d\u003d Updating Grades: grades"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Updates the grades of the assignment identified by the index number of the assignment list of the current classroom +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "This can be done for all students simultaneously or for a particular student. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Format (All Students): `as/ASSIGNMENT_INDEX g/GRADE GRADE ... GRADE` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Format (One Student): `as/ASSIGNMENT_INDEX s/STUDENT_INDEX g/GRADE` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `grades as/1 g/10 20 30 40`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `grades as/1 s/1 g/10`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Grades must be an integer from 0 to 100, and ASSIGNMENT_INDEX must be valid (check above for definition of valid ASSIGNMENT_INDEX). For the All Students variant, the number of grades input must be equal to the total number of students in the classroom. For the One Student variant, the STUDENT_INDEX must be valid. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "The default grades of all students is \"Not Submitted\". Once there are no longer any \"Not Submitted\" grades belonging to the assignment, the assignment is marked as completed +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "When a student is added, each uncompleted assignment will include the new student with the grade \"Not Submitted\" +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "When a student is added, each completed assignment will include the new student with the grade \"Late to the party\". This distinguishes the whether the student was added before or after the assignment was marked (completed) by the user, and it would be unfair to expect a new student to submit work that was assigned before he/she joined the classroom."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// tag::get[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d\u003d Get Grades: getgrades"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Gets all the grades of the chosen student index in the current classroom. +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The command result will show all the grades of the specified student. +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `getgrades STUDENT_INDEX`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* `getgrades 1`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d\u003d Get Unsubmitted Assignments: getunsubmitted"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Gets all the unsubmitted assignments in the current classroom. +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The command result will unsubmitted assignments with the corresponding student names. +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `getunsubmitted`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// end::get[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// end::assignments[]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "// tag::userfriendly[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d User-Friendly Features"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The features here do not necessarily contribute directly to a teacher\u0027s everyday job, but improve the usability"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "of Teacher\u0027s Notebook and make using the application a more forgiving, painless and seamless experience. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d\u003d Autocomplete"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Allows a user to toggle through suggestions that guess at what command the user wants to type in. +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Upon typing any letters that resemble commands, a popup menu will appear as shown below:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "image::autocorrect/autocomplete2.jpg[auto,500,480,pdfwidth\u003d50%,scaledwidth\u003d50%]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "`SHIFT + Arrow DOWN` and `SHIFT + Arrow UP` Keys to toggle between autocomplete suggestions +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "`CTRL` Key to choose the first autocomplete suggestion, or turn AutoComplete on if it is turned off. +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "`ESC` Key to close the autocomplete suggestions and turn off AutoComplete. +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "To facilitate the user learning the long and possibly tedious commands,"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "the AutoComplete popup menu does not hide when a user\u0027s input greater than 6 characters does not match any command."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "This is why even if the input matches the suggestion, the matching part of the"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "suggestion is not highlighted past 6 characters."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "6 characters is an arbitrary value and will be improved upon in future releases, and"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "with user feedback."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d\u003d History"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Allows a user to toggle through their previously entered commands,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "regardless of whether the command was successful."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "It is likely that autocomplete and history will clash, as both use the arrow keys."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "We recommend that you turn the autocomplete feature off (`ESC` key) before using the"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "history feature."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "`Arrow UP and DOWN` Key to toggle through previous commands +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d\u003d Undo/Redo: Undo/Redo"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Restores the database to the state before the previous undoable command was executed."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "[NOTE] Undoable commands are commands that modify the database\u0027s content: `add`, `delete`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "`edit`, `clear`, `upload`."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Undo/redo cannot, however, undo actions made during previous activation of Teacher\u0027s Notebook. +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "This is to say, once the application is closed, all actions done cannot be undone. +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Enter `undo` or `redo` +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* `deletestudent 1` + `undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "`redo` (applies the delete command again) +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* `liststudents` + `undo` (Error message pops up, no )"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d\u003d Help"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Triggers a popup window with a link to the user guide."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Enter `help` +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d\u003d Clear"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Clears all data from the notebook. If triggered erroneously, the undo command can be used to reclaim all data."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Enter `clear` to clear all data +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d\u003d Exit"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Exits the application and stops all teacher\u0027s notebook processes. +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Enter `exit` +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "// end::userfriendly[]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d Additional Features Coming in V2.0"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//tag::reminders_for_assignments[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Reminders for Assignments [coming in v2.0]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Assignments can be added to the reminders for the notebook, where users will be alerted when the deadline is up for assignments. +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Once the deadline is over, the assignments will be removed from the reminder panel, but will remain in the assignment list for future reference. +"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "This will give teachers a clearer idea of what they need to do in the reminder panel beyond just lessons."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//end::reminders_for_assignments[]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//tag::statistics[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d\u003d Statistics for Assignments [coming in v2.0]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Calculates the statistics for the chosen assignment for each classroom - Average, Median, 25th / 75th percentile etc. +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "This will give teachers a clearer idea of how each classroom as a whole is doing. +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format: `getstats ASSIGNMENT_INDEX`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//end::statistics[]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[qanda]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "How do I transfer my data from the current notebook to another computer?::"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    Copy the teachernotebook.json file from your current computer, and paste it in a /data folder in your other computer\u0027s directory where teachernotebook.jar is at."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Add Class: `addclass c/CLASS_NAME` +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `addclass c/4E3`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Delete Class: `deleteclass c/CLASS_NAME` +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `deleteclass c/4E3`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Set Class: `setclass c/CLASS_NAME` +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `setclass c/4C3`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Add Lesson: `l/LESSON st/START_TIME et/ET_TIME:dd/MM/yy HHmm` +"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `addlesson l/Math 4E7 st/12/01/2020 1200 et/12/01/2020 1300`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Edit Lesson: `editlesson LESSON_INDEX day/DAY_INDEX [l/LESSON_NAME] [st/START_TIME] [et/END_TIME]` +"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g `editlesson 2 day/4 st/05/01/2020 1200 et/05/01/2020 1300`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Delete Lesson: `deletelesson LESSON_INDEX day/DAY_INDEX` +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `deletelesson 1 day/2`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Find Lesson: `findlesson KEYWORD` +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `findlesson Math`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Add Student: `addstudent n/NAME e/EMAIL p/PHONE a/ADDRESS pp/PARENT_PHONE [m/MEDICAL_CONDITIONS]... [t/TAG]...` +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `addstudent n/John Doe e/johndoe@gmail.com p/81930042 a/Jurong East Avenue 3 Blk 639 #12-02 pp/84295512 m/Sinus`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Edit Student: `editstudent STUDENT_INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [pp/PARENT_PHONE] [m/MEDICAL_CONDITIONS], [t/TAG]...` +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `editstudent 2 p/98510293`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Delete Student: `deletestudent STUDENT_INDEX` +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `deletestudent 3`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Upload: `upload STUDENT_INDEX` +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `upload 2`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* List Students: `liststudents`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Find Student: `findstudent STUDENT_NAME` +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `findstudent John Doe`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Reset Display Picture: `resetdisplaypic`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Add Assignment: `addassignment as/ASSIGNMENT d/DEADLINE:dd/MM/yyyy HHmm` +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `addassignment as/Math Test d/29/11/2020 1400`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Edit Assignment: `editassignment ASSIGNMENT_INDEX [as/ASSIGNMENT_NAME] [d/ASSIGNMENT_DEADLINE]` +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `editassignment 1 as/English Test d/29/11/2020 1400`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Delete Assignment: `deleteassignment ASSIGNMENT_INDEX` +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `deleteassignment 1`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* List Assignments: `listassignments`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Find Assignment: `findassignment ASSIGNMENT_NAME` +"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `findassignment Math`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Update Grades: +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format (All Students): `as/ASSIGNMENT_INDEX g/GRADE GRADE ... GRADE` +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Format (One Student): `as/ASSIGNMENT_INDEX s/STUDENT_INDEX g/GRADE` +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `grades as/1 g/10 20 30 40` +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `grades as/1 s/1 g/10`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Get Grades: `getgrades STUDENT_INDEX` +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "e.g. `getgrades 1`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Get Unsubmitted Assignments: `getunsubmitted`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Undo Action: `undo`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Redo Action: `redo`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Clear Data: `clear`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Bring up help window: `help`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* Exit the application: `exit`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 121,
      "Xelyion": 86,
      "sheryltay28": 58,
      "weikiat97": 203,
      "-": 90
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "This document was originally written for _Classroom Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "For use with _Classroom Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter an arbitrary description e.g. addressbook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "Xelyion": 2,
      "-": 46
    }
  },
  {
    "path": "docs/UsingPlantUml.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using PlantUML"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images/plantuml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction to PlantUML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "PlantUML is a tool used in this project to create UML diagrams."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For more information about the basics of PlantUML, head over to http://plantuml.com/[its official website]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Set up PlantUML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing Graphviz"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Graphviz is a dependency that PlantUML requires to generate more advanced diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Head over to the https://www.graphviz.org/download/[downloads page] on the official Graphviz website and follow instructions to install Graphviz."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing the `PlantUML integration` plugin for IntelliJ IDEA"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Go to `Settings` \u003e `Plugins` \u003e `Marketplace` and install the plugin `PlantUML integration`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Then go to `Settings` \u003e `Other Settings` \u003e `PlantUML` or search for PlantUML."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Configure the path to the `dot` executable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This executable can be found in the `/bin` directory where you installed GraphViz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".Settings - Other Settings - PlantUML: input the path to your dot executable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::ConfiguringGraphviz.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create/Edit PlantUML diagrams"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "After installing the `PlantUML integration` plugin, simply create or open any `.puml` file to start editing it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".Editing `DeleteSequenceDiagram.puml`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::EditingDeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Any changes you make in editor pane on the left will be reflected in the preview pane on the right."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "However, do take note that these changes _will not_ be reflected in the developers guide until you export the diagram."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "//TODO: Discussion about why we\u0027re not using asciidoctor-diagram"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Export PlantUML diagrams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The `PlantUML integration` plugin allows you to export individual diagrams to a location of your choosing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Click the `Save Current Diagram Only` button and choose the location to export the image file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: You will have to `git add` any new diagrams generated!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Common tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Applying consistent formatting to PlantUML diagrams"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "It is highly recommended to consistently color your UML diagrams as an visual aid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "You can achieve this by creating a dictionary of colors and import it like CSS."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you can create a `Style.puml` with the contents:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".Style.puml"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #7777DB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #5252CE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Then you can use it in another PlantUML file like this:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".UndoSequenceDiagram.puml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "!include Style.puml"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "participant \":ClassroomParser\" as ClassroomParser LOGIC_COLOR"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "You can fine-tune the formatting of PlantUML diagrams with the `skinparam` command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "For example, `skinparam backgroundColor transparent` turns the background of the diagram transparent."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "For a comprehensive list of ``skinparam``s head over to the https://plantuml-documentation.readthedocs.io/en/latest/[unofficial PlantUML skinparam documentation]."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "***"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Repositioning elements in PlantUML diagrams"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "While PlantUML\u0027s automatic layout engine usually produces satisfactory results, at times the result can be less than ideal, especially on larger diagrams."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example where the default layout generated by PlantUML has a lot of overlapping lines that are hard to decipher:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".The UI class diagram without additional formatting"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::RawUiDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: In most cases, you should consider decomposing the diagram into smaller ones or focusing on a more specific portion of the diagram."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some of the techniques we used in this project to obtain a more palatable diagram."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link lengths"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "By default, a short link (`\\-\u003e`) points to right and a long link (`-\\-\u003e`)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "points downwards. you can extend any link to make it longer (```--\\-\u003e```)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Length of arrows and its effects"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArrowLength.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link directions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Clever usage of arrow directions will resolve most layout issues."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the table below shows how the way in which you specify arrows can results in drastically different layouts for the same diagram."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".Link directions"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"40a,60a\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e Z"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e Z"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e Z"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "|image::AllDown.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027default is down"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027specify down"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "B -down-\u003e Z"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027shorthand for down"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "C -d-\u003e Z"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027arrow lengths take priority"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "D -down\u003e Z"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e 1"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e 2"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e 3"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e 4"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "|image::UpAndDown.png[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e Z"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e Z"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e Z"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e Z"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Force A B C D"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "A -right[hidden]- B"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "B -right[hidden]- C"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "C -right[hidden]- D"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "|image::HiddenArrows.png[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Reordering definitions"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "As a general rule of thumb, the layout engine will attempt to order objects in the order in which they are defined."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "If there is no formal definition, the objects is taken to be declared upon its first usage."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Definition ordering and outcomes"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"70a,30a\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "|image::ABeforeC.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Class C is defined before A"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Class C"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "|image::CBeforeA.png[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "package \"Rule Of Thumb\"{"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    Class C"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    A --\u003e B"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    C --\u003e D"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "|image::PackagesAndConsistency.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Explicitly define all symbols to avoid any potential layout mishaps."
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "-": 210
    }
  },
  {
    "path": "docs/diagrams/AddAssignmentActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ":User calls AddAssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "if () then ([Inputs are valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    :Grades are initialized;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    :Deadline is set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    :Exception thrown;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "endif"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "stop"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 13
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"deletestudent 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"deletestudent 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteStudent(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveNotebook(notebook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 4,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/AutoCompleteActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":User types input;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "repeat"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":Command suggestions created;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":Contextmenu displays suggestions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "repeat while () is ([User types new inputs])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "-\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 14
    }
  },
  {
    "path": "docs/diagrams/AutoCompleteClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package UI:AutoCompleteTextField \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Class AutoCompleteTextField"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Class TextField"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Class Styles"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "CommandBox \"1\"-left-\u003e AutoCompleteTextField"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "AutoCompleteTextField -up-|\u003e TextField"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "AutoCompleteTextField ..\u003e Styles"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 17
    }
  },
  {
    "path": "docs/diagrams/AutoCompleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "participant \":CommandBox\" as CommandBox UI_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "participant \":AutoCompleteTextField\" as AutoCompleteTextField UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "[-\u003e CommandBox : user types input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate AutoCompleteTextField"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate AutoCompleteTextField"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "[\u003c--CommandBox"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate CommandBox"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 17
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Classroom *-left-\u003e \"1\" UniqueStudentList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Classroom *-right-\u003e \"1\" UniqueAssignmentList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "UniqueStudentList *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "UniqueTagList -[hidden]down- UniqueStudentList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "UniqueTagList -[hidden]down- UniqueStudentList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "UniqueStudentList o-right-\u003e Student"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "UniqueAssignmentList o-right-\u003e Assignment"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Classroom o-left-\u003e \"*\" Student"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Classroom o-right-\u003e \"*\" Assignment"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student *--\u003e Name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student *--\u003e Phone"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student *--\u003e Email"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student *--\u003e Address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Student *--\u003e DisplayPicture"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Student *--\u003e ParentPhone"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Student *--\u003e MedicalCondition"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Assignment *--\u003e AssignmentName"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Assignment *--\u003e AssignmentGrades"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Assignment *--\u003e AssignmentDeadline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 5,
      "weikiat97": 16,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "if () then ([command commits Notebook])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    :Purge redundant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    :Save Notebook to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    mementos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 4,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \":NotebookParser\" as NotebookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \":DeleteStudentCommandParser\" as DeleteStudentCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \"d:DeleteStudentCommand\" as DeleteStudentCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[-\u003e LogicManager : execute(\"deletestudent 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "LogicManager -\u003e NotebookParser : parseCommand(\"deletestudent 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate NotebookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "create DeleteStudentCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "NotebookParser-\u003e DeleteStudentCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate DeleteStudentCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "DeleteStudentCommandParser --\u003e NotebookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate DeleteStudentCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "NotebookParser-\u003e DeleteStudentCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate DeleteStudentCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "create DeleteStudentCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "DeleteStudentCommandParser -\u003e DeleteStudentCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate DeleteStudentCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "DeleteStudentCommand --\u003e DeleteStudentCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate DeleteStudentCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "DeleteStudentCommandParser --\u003e NotebookParser: d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate DeleteStudentCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "DeleteStudentCommandParser -[hidden]-\u003e NotebookParse"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "destroy DeleteStudentCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "NotebookParser--\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate NotebookParse"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "LogicManager -\u003e DeleteStudentCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate DeleteStudentCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "DeleteStudentCommand -\u003e Model : deleteStudent(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "DeleteStudentCommand -\u003e Model : saveState()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Model --\u003e DeleteStudentCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "DeleteStudentCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "CommandResult --\u003e DeleteStudentCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "DeleteStudentCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate DeleteStudentCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 33,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/GetGradesSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \":NotebookParser\" as NotebookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \":GetStudentGradesCommandParser\" as GetStudentGradesCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \"d:GetStudentGradesCommand\" as GetStudentGradesCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \":Assignment\" as Assignment MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[-\u003e LogicManager : execute(\"getgrades 1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "LogicManager -\u003e NotebookParser : parseCommand(\"getgrades 1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate NotebookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "create GetStudentGradesCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "NotebookParser-\u003e GetStudentGradesCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate GetStudentGradesCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "GetStudentGradesCommandParser --\u003e NotebookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate GetStudentGradesCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "NotebookParser-\u003e GetStudentGradesCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate GetStudentGradesCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "create GetStudentGradesCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "GetStudentGradesCommandParser -\u003e GetStudentGradesCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate GetStudentGradesCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "GetStudentGradesCommand --\u003e GetStudentGradesCommandParser : d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate GetStudentGradesCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "GetStudentGradesCommandParser --\u003e NotebookParser: d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate GetStudentGradesCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "GetStudentGradesCommandParser -[hidden]-\u003e NotebookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "destroy GetStudentGradesCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "NotebookParser--\u003e LogicManager : d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate NotebookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "LogicManager -\u003e GetStudentGradesCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate GetStudentGradesCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "GetStudentGradesCommand -\u003e Model : getFilteredStudentList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "GetStudentGradesCommand -\u003e Model : getFilteredAssignmentList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Model -\u003e Assignment : getGrades"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate Assignment"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Assignment --\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate Assignment"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Model --\u003e GetStudentGradesCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "GetStudentGradesCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "CommandResult --\u003e GetStudentGradesCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "GetStudentGradesCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate GetStudentGradesCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 78
    }
  },
  {
    "path": "docs/diagrams/GetUnsubmittedActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":Gets FilteredAssignmentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "repeat"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":Gets next assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":Gets assignment grades for this assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "repeat"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":Gets next key-value mapping;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "if () then ([value is \"Not submitted.\"])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    :Adds the key (student name) to output;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "repeat while (More mapping?) is (yes)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "repeat while (More assignments?) is (yes)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":Return output;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 19
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class NotebookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "LogicManager --\u003e\"1\" NotebookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "NotebookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddStudentCommand, \\nFindStudentCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 4,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Interface ReadOnlyNotebook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class Notebook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class ReadOnlyNotebook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class Caretaker"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class Memento"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Package Student {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Class Student"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class ParentPhone"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class MedicalCondition"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class UniqueStudentList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Class DisplayPicture"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Package Classroom {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Interface ReadOnlyClassroom \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class ReadOnlyClassroom"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class Classroom"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class UniqueClassroomList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Package Assignment {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class Assignment"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class AssignmentGrades"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class AssignmentName"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class AssignmentDeadline"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class UniqueAssignmentList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Package Classroom {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class Classroom"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class ReadOnlyClassroom"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class UniqueClassroomList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Package Lesson {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Class Lesson"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Class ClassName"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Class Time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Class UniqueLessonList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class UniqueLessonWeekList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Classroom .up.|\u003e ReadOnlyClassroom"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Notebook .up.|\u003e ReadOnlyNotebook"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "ModelManager o--\u003e \"1\" Notebook"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "ModelManager o--\u003e \"1\" Caretaker"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Caretaker o--\u003e \"*\" Memento"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Memento o--\u003e \"1\" ReadOnlyNotebook"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Notebook *--\u003e \"1\" UniqueClassroomList"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "UniqueClassroomList o--\u003e \"*\" Classroom"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Notebook *--\u003e \"1\" UniqueLessonWeekList"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Classroom *--\u003e \"1\" UniqueStudentList"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "UniqueStudentList o--\u003e \"*\" Student"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student *--\u003e Name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student *--\u003e Phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student *--\u003e Email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student *--\u003e Address"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Student *--\u003e ParentPhone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Student *--\u003e MedicalCondition"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Student *--\u003e DisplayPicture"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Classroom *--\u003e \"1\" UniqueAssignmentList"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "UniqueAssignmentList o--\u003e \"*\" Assignment"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Assignment *--\u003e AssignmentName"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Assignment *--\u003e AssignmentGrades"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Assignment *--\u003e AssignmentDeadline"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Notebook o--\u003e \"*\" UniqueLessonWeekList"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "UniqueLessonWeekList o--\u003e \"7\" UniqueLessonList"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "UniqueLessonList o--\u003e \"*\" Lesson"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Lesson *--\u003e ClassName"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Lesson *--\u003e Time"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Email -[hidden]right-\u003e ParentPhone"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "ParentPhone -[hidden]right-\u003e MedicalCondition"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "MedicalCondition -[hidden]right-\u003e DisplayPicture"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "ModelManager --\u003e\"1\" Notebook : filtered list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 9,
      "Xelyion": 1,
      "sheryltay28": 8,
      "weikiat97": 53,
      "-": 44
    }
  },
  {
    "path": "docs/diagrams/SchedulingActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ":Add Lesson to UniqueLessonList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ":Observable list detects changes in UniqueLessonList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ":Schedules alert for Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ":Creates alert box in GUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "stop"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 8
    }
  },
  {
    "path": "docs/diagrams/SchedulingSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "participant \":MainWindow\" as MainWindow LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "[-\u003e MainWindow : new MainWindow(primaryStage, logic)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "MainWindow -\u003e MainWindow : listenToLesson()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "MainWindow -\u003e MainWindow : countDownAlert(\"reminder\", Lesson.toString())"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 14
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Interface NotebookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class JsonNotebookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "StorageManager o--\u003e NotebookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "JsonNotebookStorage .left.|\u003e NotebookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "JsonNotebookStorage .down.\u003e JsonSerializableNotebookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "JsonSerializableNotebookStorage .right.\u003e JsonSerializableNotebook"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "JsonSerializableNotebook .right.\u003e JsonSerializableClassroom"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "JsonSerializableNotebook .up.\u003e JsonAdaptedLesson"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "JsonSerializableClassroom .right.\u003e JsonSerializableStudent"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "JsonSerializableClassroom .up.\u003e JsonAdaptedAssignment"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "JsonSerializableStudent .right.\u003eJsonAdaptedTag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 14,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class StudentListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class StudentCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class AssignmentListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class AssignmentCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class ClassroomListPanel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Class ClassroomCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Class ReminderListPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Class ReminderCard"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Class History"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "MainWindow *-down-\u003e StudentListPanel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "MainWindow *-down-\u003e AssignmentListPanel"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "MainWindow *-down-\u003e ClassroomListPanel"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "MainWindow *-down-\u003e ReminderListPanel"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "CommandBox *-down-\u003e History"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "StudentListPanel -down-\u003e StudentCard"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "AssignmentListPanel -down-\u003e AssignmentCard"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "ReminderListPanel -down-\u003e ReminderCard"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "ClassroomListPanel -down-\u003e ClassroomCard"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "StudentListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "StudentCard --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "AssignmentListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "AssignmentCard --|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "ReminderListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "ReminderCard --|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "ClassroomListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "ClassroomCard --|\u003e UiPart"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "StudentCard ..\u003e Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "AssignmentCard ..\u003e Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "ReminderCard ..\u003e Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "ClassroomCard ..\u003e Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "StudentListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "AssignmentListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "ReminderListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "ClassroomListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2,
      "sheryltay28": 8,
      "weikiat97": 24,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State1 as \"__n0:Notebook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State2 as \"__n1:Notebook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State3 as \"__n2:Notebook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "title After command \"deletestudent 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State1 as \"__n0:Notebook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State2 as \"__n1:Notebook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State3 as \"__n2:Notebook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 4,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "title After command \"addstudent\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State1 as \"__n0:Notebook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State2 as \"__n1:Notebook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State3 as \"__n2:Notebook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 4,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State1 as \"__n0:Notebook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State2 as \"__n1:Notebook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State3 as \"__n2:Notebook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "title After command \"liststudents\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State1 as \"__n0:Notebook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State2 as \"__n1:Notebook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State3 as \"__n2:Notebook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 4,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State1 as \"__n0:Notebook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State2 as \"__n1:Notebook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class State3 as \"__n3:Notebook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "note right on link: State n2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \":NotebookParser\" as NotebookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "participant \":Caretaker\" as Caretaker MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "LogicManager -\u003e NotebookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate NotebookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "NotebookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "UndoCommand --\u003e NotebookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "NotebookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate NotebookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "UndoCommand -\u003e Model : undoClassroom()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Model -\u003e Caretaker : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "activate Caretaker"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Caretaker -\u003e Caretaker :resetData(ReadOnlyNotebook)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Caretaker --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "deactivate Caretaker"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "weikiat97": 13,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/UploadSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "participant \":FileChooser\" as FileChooser UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "participant \":NotebookParser\" as NotebookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "participant \":UploadCommandParser\" as UploadPictureCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "participant \"u:UploadPictureCommand\" as UploadPictureCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "end box"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "[-\u003e MainWindow : executeCommand(\"upload 1\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "create FileChooser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "MainWindow-\u003e FileChooser : openFileChooser()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate FileChooser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "FileChooser --\u003e MainWindow : filePath"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate FileChooser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "FileChooser -[hidden]-\u003e MainWindow"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "destroy FileChooser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "MainWindow -\u003e LogicManager : execute(\"upload 1 f/filePath\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "LogicManager -\u003e NotebookParser : parseCommand(\"upload 1 f/filePath\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate NotebookParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "create UploadPictureCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "NotebookParser-\u003e UploadPictureCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate UploadPictureCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "UploadPictureCommandParser --\u003e NotebookParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate UploadPictureCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "NotebookParser-\u003e UploadPictureCommandParser : parse(\"1 f/filePath\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate UploadPictureCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "create UploadPictureCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "UploadPictureCommandParser -\u003e UploadPictureCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate UploadPictureCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "UploadPictureCommand --\u003e UploadPictureCommandParser : u"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate UploadPictureCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "UploadPictureCommandParser --\u003e NotebookParser: u"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate UploadPictureCommandParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "UploadPictureCommandParser -[hidden]-\u003e NotebookParser"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "destroy UploadPictureCommandParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "NotebookParser--\u003e LogicManager : u"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate NotebookParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "LogicManager -\u003e UploadPictureCommand : execute()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate UploadPictureCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "UploadPictureCommand -\u003e UploadPictureCommand : createEditedStudent(currentStudent, filePath)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate UploadPictureCommand  #DarkSalmon"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "UploadPictureCommand -\u003e UploadPictureCommand : editedStudent"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate UploadPictureCommand #DarkSalmon"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "UploadPictureCommand -\u003e Model : setStudent(currentStudent, editedStudent)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Model --\u003e UploadPictureCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "UploadPictureCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "CommandResult --\u003e UploadPictureCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "UploadPictureCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate UploadPictureCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "LogicManager --\u003e MainWindow : result"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "[\u003c--MainWindow"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 94
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Participant \":ClassroomParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Participant \":EditStudentCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Participant \"command:EditStudentCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "ecp -\u003e ec ++: index, editStudentDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "weikiat97": 3,
      "-": 17
    }
  },
  {
    "path": "docs/team/SebastianLie.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d Sebastian Lie - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d PROJECT: Teacher\u0027s Notebook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "This project portfolio details my key contributions to Project Teacher\u0027s Notebook."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Teacher\u0027s Notebook is a desktop application designed by my group mates and I for a software engineering"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "module in National University of Singapore (NUS)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "It\u0027s target audience is secondary or primary school teachers in Singapore."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "It aims to improve the efficiency of the efficiency of these teachers."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The project was created under the constraint of the fact that the user only"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "interacts with the application through a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The main features of the project are:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "- The ability to manage students and their information, including keeping track of"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "their grades, personal information and assignments."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "- The ability to manage, and be reminded of, lessons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "- The ability to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "- The ability to"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "- *Major Enhancement*: added the ability to upload and display photos of students"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "** What it does"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "** Justification"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "** Highlight"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "- *Major Enhancement*: added the autocomplete feature to the gui"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "** What it does: add a popup menu that suggests commands to the user based on text the user has already entered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "** Justification: Many commands in Teacher\u0027s Notebook are long and tedious, and have specific prefixes or formats."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "By suggesting commands, users can quickly become familiar with commands, and save time not needing to remember the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "format of commands. It also serves as a shortcut, as users can quickly enter commands without typing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "out the entire command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "and easily select"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "** Highlights: This enhancement allows the user to view up to 10 suggestions in a popup menu."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "The user can scroll through all suggestions and select any suggestion just using their keyboard."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Commands suggested are already in their required form with prefixes, making it easier for users"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "to execute the intended command successfully without referring to the UserGuide."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "- *Minor Enhancement*: added the ability to scroll through previously entered commands with the up and down arrow keys"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "- Code Contributed [https://github.com/AY1920S1-CS2103-T14-1/main/commits?author\u003dsebastianlie[Functional Code]] [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dSebastianLie\u0026tabRepo\u003dAY1920S1-CS2103-T14-1%2Fmain%5Bmaster%5D[RepoSense]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "*** Fixed issues brought up by peers. (PRs https://github.com/AY1920S1-CS2103-T14-1/main/pull/167[#167], https://github.com/AY1920S1-CS2103-T14-1/main/pull/165[#165], https://github.com/AY1920S1-CS2103-T14-1/main/pull/156[#156])"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "*** Added 2 extra panels to the GUI, and added display picture to the student card (PRs https://github.com/AY1920S1-CS2103-T14-1/main/pull/61[#61], https://github.com/AY1920S1-CS2103-T14-1/main/pull/85[#85])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "*** improved test coverage from 25 to 33 %, PR #189, #190, #191: 46-48% (Pull requests https://github.com/AY1920S1-CS2103-T14-1/main/pull/190[#190], Pull requests https://github.com/AY1920S1-CS2103-T14-1/main/pull/189[#189])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "*** Reviewed PRs of other team members"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "- Other contributions:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "- Added Test coverage: improved test coverage from 25 to 33 %, PR #189, #190, #191: 46-48%"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d Contributions to User Guide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "include::../UserGuide.adoc[tag\u003duserfriendly]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "include::../UserGuide.adoc[tag\u003dclasses]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dautocomplete]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dupload]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 123
    }
  },
  {
    "path": "docs/team/Xelyion.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d Xelyion - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d PROJECT: Teacher\u0027s Notebook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Teacher\u0027s Notebook is a desktop application designed for teachers to manage their busy schedules, by aiding the the tasks of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " managing classrooms, students, and assignments. There is also a reminder function to alert the user to upcoming lessons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* *Major enhancement*: added *the ability to manage classrooms with the Notebook class*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "** What it does: Allows the user to group students and assignments within classrooms, and reminders"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "outside of classrooms."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "** Justification: This feature improves the product significantly because a user can have more than one classroom of students, and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "have different assignments for each classroom. Reminders are also not specific to a classroom,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "and hence should not reside within the classroom class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " of existing structure and relations between existing classes. The implementation too was challenging as it required changes"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " to the entire structure of the application, from logic and commands to storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* *Minor enhancement*: Added color to indicate selection of classrooms"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dXelyion\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom[tP dashboard]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "*** Managed releases `v1.1` - `v1.3rc` (4 releases) on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "*** Gave comments to peers before merging PRs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "*** Helped to merge and fix some merge conflicts among the PRs in the team (Pull Request https://github.com/AY1920S1-CS2103-T14-1/main/pull/64[#64])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "*** Added the ability to create classrooms within the Notebook class and set different classrooms (Pull Request https://github.com/AY1920S1-CS2103-T14-1/main/pull/92[#92])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "*** Added the ability to add grades to Assignment in bulk (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/84/[#84])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "*** Added the ability to differentiate a completed assignment from and uncompleted assignment. (Pull Request https://github.com/AY1920S1-CS2103-T14-1/main/pull/201[#201])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "*** Added the ability to toggle between Student and Assignment lists in a combined panel (Pull Request https://github.com/AY1920S1-CS2103-T14-1/main/pull/63[#63])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide so that they are more coherent: https://github.com/AY1920S1-CS2103-T14-1/main/pull/88/[#88]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "*** PRs reviewed (examples: https://github.com/AY1920S1-CS2103-T14-1/main/pull/158[#158], https://github.com/AY1920S1-CS2103-T14-1/main/pull/163[#163])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:   https://github.com/Xelyion/ped/issues/5[1], https://github.com/Xelyion/ped/issues/4[2], https://github.com/Xelyion/ped/issues/6[3], https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/37[4])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "write documentation targeting end-users._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "include::../UserGuide.adoc[tag\u003dassignments]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dAssignment]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 74
    }
  },
  {
    "path": "docs/team/sheryltay28.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d Tay Sheryl - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d PROJECT: Teacher\u0027s Notebook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "Teacher\u0027s Notebook is an application for teachers to organise their classes and lessons as well as provide reminders when their lessons are about to start."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* *Major enhancement*: Added Lessons and Reminders to the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** What it does: Allows user to add, delete, find or edit lessons. A reminder will be scheduled whenever a new Lesson is added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Justification: Since lessons are an important part of a teacher\u0027s daily work schedule, being able to add lessons and reminders will be useful for the teacher to keep track of what lessons they have."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Highlights: Reminders will be automatically added whenever a new Lesson is added and when the application is being closed and open, it will still be scheduled."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Credits: Command for Lessons are inspired by AddressBook3 commands for contacts."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Added tabs to GUI to display lessons by the day of the week."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dsheryltay28\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[tp code dashboard]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "*** Managed releases `v1.1 - v1.3` (4 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Gave comments to other people in the group before merging pr."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Fixed exit issues for the app (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/183)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Improved test coverage (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/210)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Reviewed other pr\u0027s and bugs in class with group mates."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlessons]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodel]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dLesson]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dSchedule]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 56
    }
  },
  {
    "path": "docs/team/weikiat97.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d Loh Wei Kiat - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d PROJECT: Teacher\u0027s Notebook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Teacher\u0027s Notebook is a desktop application used by teachers to manage their classes and provides them with reminders for lessons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "Teacher\u0027s Notebook serves as a one-stop platform to consolidate all the information that teachers will need, that is information about students, assignments, classes and lessons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command. The undo redo commands are only usable after a command that changes the state of the notebook is executed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. There were many considerations when implementing this undo/redo to allow users a better user experience when doing the command. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The implementation was very challenging as one command had to be suited for various types of actions that could be executed in our app, and there were different kinds of dependencies that had to be accounted for during the execution of undo/redo command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Credits: Idea was inspired from the Memento Design Pattern, a software design pattern to restore objects to their previous states. The idea became more concrete as I saw the example UML diagram used for undo/redo commands from AB3."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Added a getgrades and getunsubmitted command to retrieve students grades and unsubmitted assignments respectively."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Refactored the code from AB3 with persons, to students and added in additional fields (MedicalConditions, ParentPhone)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Added various CRUD commands - FindAssignmentCommand, DeleteClassroomCommand etc and improved on peers codes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* *Code contributed*: [https://github.com/AY1920S1-CS2103-T14-1/main/commits?author\u003dweikiat97[Functional Code]] [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dweikiat97\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[RepoSense]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Managed releases `v1.1 - v1.3` (4 releases) on GitHub"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Added Travis, Coveralls and AppVeyor support for the team"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Gave comments to peers before merging PRs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Helped to make overall code base neater with comments and removed unnecessary methods. (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/202[#202])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Helped to merge and fix all merge conflicts among the PRs in the team (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/60[#60])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Retrieving specific students grades and updating grades individually (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/84/[#84])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Added ability to edit assignments (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/91/[#91])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Proper time parsing for dates and times (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/83[#83])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Wrote additional tests to the current project to increase coverage (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/186[#186] increased coverage by 12.6%)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide so that they are more coherent: (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/88/[#88])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Made changes to the current puml diagrams from AB3 to suit our current project: (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/185[#185])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Changed the undo redo implementation feature from AB3 to suit the current project\u0027s undo redo: (Pull request https://github.com/AY1920S1-CS2103-T14-1/main/pull/67[#67])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): (Pull request https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/110[#110], https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull/37[#37])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class during PE dry run (examples:  https://github.com/weikiat97/ped/issues/4[1], https://github.com/weikiat97/ped/issues/1[2], https://github.com/weikiat97/ped/issues/10[3])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "|_Given below are some of the sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstudents]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dget]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreminders_for_assignments]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstatistics]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "|_Given below are some of the sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodel]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstorage]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgetgrades]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgetunsubmitted]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "weikiat97": 88
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "This command allows users of the Classroom application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `ClassroomParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".DeleteStudentCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "return new DeleteStudentCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "NOTE: Don\u0027t forget to update `ClassroomParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "We achieve that by working with the `Student` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Each field in a Student is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d Modify `Student` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Since `PersonCard` displays data from a `Student`, we need to update `Student` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d Modify `Student`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "We change the constructor of `Student` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Student`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Unfortunately, a change to `Student` will cause other commands to break, you will have to modify these commands to use the updated `Student`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Student` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Classroom stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Student`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "WARNING: You must delete Classroom\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "Not doing so will cause Classroom to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Now that we have finalized the `Student` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public PersonCard(Student person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Student`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Since all fields in a `Student` are immutable, we create a new instance of a `Student` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Student: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Student: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student editedPerson \u003d new Student(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String generateSuccessMessage(Student personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "This concludes the tutorial for adding a new `Command` to Classroom."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 20,
      "Xelyion": 7,
      "weikiat97": 2,
      "-": 396
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Student` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Student`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "The `address` field in `Student` is actually an instance of the `seedu.address.model.student.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "For example, removing the `address` field from the `Student` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "A quick look at the `StudentCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".StudentCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".StudentCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ".invalidPersonClassroom.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source,json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 3,
      "Xelyion": 1,
      "weikiat97": 5,
      "-": 108
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     Command command \u003d classroomParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "         storage.saveClassroom(model.getClassroom());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ".ClassroomParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ".ClassroomParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "case EditStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    return new EditStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ". Let\u0027s see what `EditStudentCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ".EditStudentCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENT);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "`JsonClassroom#saveClassroom()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableClassroom``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ".JsonSerializableClassroom#JsonSerializableClassroom()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Converts a given {@code ReadOnlyClassroom} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * {@code JsonSerializableClassroom}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public JsonSerializableClassroom(ReadOnlyClassroom source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Student` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "`JsonSerializableClassroom`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "this tutorial, you learned more about the inner workings of Classroom and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ".. Add a new field to `Student`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2,
      "Xelyion": 12,
      "weikiat97": 11,
      "-": 233
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.storage.JsonNotebookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.storage.NotebookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected Text text;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Teacher\u0027s Notebook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        NotebookStorage notebookStorage \u003d new JsonNotebookStorage(userPrefs.getNotebookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        storage \u003d new StorageManager(notebookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s classroom and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * The data from the sample classroom will be used instead if {@code storage}\u0027s notebook is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * or an empty classroom will be used instead if errors occur when reading {@code storage}\u0027s classroom."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Optional\u003cReadOnlyNotebook\u003e notebookOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ReadOnlyNotebook initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            notebookOptional \u003d storage.readNotebook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            if (!notebookOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Notebook\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            initialData \u003d notebookOptional.orElseGet(SampleDataUtil::getSampleNotebook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            logger.warning(\"`Data file not in the correct format. Will be starting with an empty Notebook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            initialData \u003d new Notebook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Notebook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            initialData \u003d new Notebook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Classroom\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        logger.info(\"Starting Teacher\u0027s Notebook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Teacher\u0027s Notebook ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2,
      "Xelyion": 15,
      "sheryltay28": 3,
      "weikiat97": 8,
      "-": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final String LOG_FILE \u003d \"classroom.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW \u003d \"%1$d assignments listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_LESSONS_LISTED_OVERVIEW \u003d \"%1$d lessons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX \u003d \"The assignment index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_INVALID_CLASSROOM_DISPLAYED_INDEX \u003d \"The classroom index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_INVALID_LESSON_DISPLAYED_INDEX \u003d \"The lesson index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "sheryltay28": 2,
      "weikiat97": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.ReadOnlyClassroom;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns a ReadOnlyClassroom view of the current classroom. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    ReadOnlyClassroom getClassroom();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns a ReadOnlyNotebook view of the notebook. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ReadOnlyNotebook getNotebook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of assignments. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFilteredAssignmentList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of lessons in the day. */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of lessons in all days. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    ObservableList\u003cUniqueLessonList\u003e getFilteredLessonWeekList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns an unmodifiable view of the classrooms. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ObservableList\u003cClassroom\u003e getClassroomList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /** Returns an unmodifiable view of the lessons. */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns the user prefs\u0027 notebook file path. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    Path getNotebookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Set the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns true if the current notebook is set to display students. */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    boolean isDisplayStudents();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "Xelyion": 9,
      "sheryltay28": 8,
      "weikiat97": 18,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.parser.NotebookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.ReadOnlyClassroom;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//import seedu.address.model.lesson.UniqueLessonWeekList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final NotebookParser notebookParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebookParser \u003d new NotebookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        logger.info(\"--------------st--[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Command command \u003d notebookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            storage.saveNotebook(model.getNotebook());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public ReadOnlyClassroom getClassroom() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return model.getCurrentClassroom();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ReadOnlyNotebook getNotebook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return this.model.getNotebook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return model.getFilteredLessonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ObservableList\u003cUniqueLessonList\u003e getFilteredLessonWeekList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return model.getFilteredLessonWeekList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public ObservableList\u003cClassroom\u003e getClassroomList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return model.getClassroomList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return model.getLessonList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Path getNotebookFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return model.getNotebookFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean isDisplayStudents() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return model.isDisplayStudents();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 6,
      "Xelyion": 18,
      "sheryltay28": 16,
      "weikiat97": 14,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Adds an assignment to the classroom."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class AddAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addassignment\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns an assignment \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                    + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                    + PREFIX_ASSIGNMENT + \"ASSIGNMENTNAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                                                    + PREFIX_DEADLINE + \"DEADLINE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                    + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                                                    + PREFIX_ASSIGNMENT + \"Math Test \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                    + PREFIX_DEADLINE + \"11/11/2020 1400\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New assignment added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment already exists in the classroom\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final Assignment toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Creates an AddAssignmentCommand to add the specified {@code Assignment}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public AddAssignmentCommand(Assignment assignment) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        toAdd \u003d assignment;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (model.hasAssignment(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.addAssignment(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (Student student: studentList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            toAdd.addNewStudentGrade(student.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                   || (other instanceof AddAssignmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                           \u0026\u0026 toAdd.equals(((AddAssignmentCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 55,
      "weikiat97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddClassroomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSROOM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Adds a classroom to the notebook."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class AddClassroomCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addclass\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a classroom \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                       + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                                                       + PREFIX_CLASSROOM + \"CLASSROOM_NAME \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New classroom added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLASSROOM \u003d \"This classroom already exists in the notebook\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String MESSAGE_BLANK_CLASSNAME \u003d \"A class must have a name.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final Classroom toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Creates an AddClassroomCommand to add a Classroom with the specified {@code String}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public AddClassroomCommand(String classroomName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(classroomName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        toAdd \u003d new Classroom(classroomName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (model.hasClassroom(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLASSROOM);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.addClassroom(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                       || (other instanceof AddLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                   \u0026\u0026 toAdd.equals(((AddClassroomCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "Xelyion": 48,
      "weikiat97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSONNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPEAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Adds a lesson to the notebook."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class AddLessonCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addlesson\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lesson to the classroom. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + PREFIX_LESSONNAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_STARTTIME + \"START TIME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_ENDTIME + \"END TIME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"[\" + PREFIX_REPEAT + \"repeat] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + PREFIX_LESSONNAME + \"Math 4E7 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + PREFIX_STARTTIME + \"14/07/2020 1200 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + PREFIX_ENDTIME + \"14/07/2020 1400\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + PREFIX_REPEAT + \"repeat\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New lesson added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists in the classroom\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_INVALID_END_TIME \u003d \"The end time should be after the start time\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_INVALID_LESSON_TIME \u003d \"Another lesson in the same timeslot already exists\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final Lesson toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Creates an AddLessonCommand to add the specified {@code Lesson}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public AddLessonCommand(Lesson lesson) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        toAdd \u003d lesson;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (model.hasLesson(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else if (!toAdd.endTimeIsAfterStartTime()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_END_TIME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (model.checkTimingExist(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_LESSON_TIME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        model.addLesson(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                || (other instanceof AddLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddLessonCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "sheryltay28": 53,
      "weikiat97": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddStudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICALCONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARENTPHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Adds a student to the classroom."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AddStudentCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addstudent\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to the classroom. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_PARENTPHONE + \"PARENTPHONE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"[\" + PREFIX_MEDICALCONDITION + \"MEDICALCONDITION] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_PARENTPHONE + \"91234567 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_MEDICALCONDITION + \"Sinus \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the classroom.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_SAME_PHONE_AND_PARENT_PHONE \u003d \"Phone and parent phone cannot be the same.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Creates an AddStudentCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public AddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else if (toAdd.getPhone().toString().equals(toAdd.getParentPhone().toString())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(MESSAGE_SAME_PHONE_AND_PARENT_PHONE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (Assignment assignment: assignmentList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Assignment editedAssignment \u003d new Assignment(assignment.getAssignmentName(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    assignment.getAssignmentDeadline());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            editedAssignment.setGrades(assignment.namesStringListFromGrades(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    assignment.marksStringListFromGrades());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            if (assignment.isCompleted()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                editedAssignment.addOneStudentGrade(toAdd.getName().fullName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                editedAssignment.addNewStudentGrade(toAdd.getName().fullName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            model.setAssignment(assignment, editedAssignment);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof AddStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddStudentCommand) other).toAdd));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "Xelyion": 13,
      "weikiat97": 31,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Clears the notebook."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Notebook has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.setNotebook(new Notebook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 5,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandMasterList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Helper class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * aggregates all command words"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * and example usages of commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class CommandMasterList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static HashSet\u003cString\u003e commandHashSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * contains all usages of commands"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return HashSet"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static HashSet getCommandWords() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(SetClassroomCommand.COMMAND_WORD + \" c/CLASSROOM_NAME\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        commandHashSet.add(AddClassroomCommand.COMMAND_WORD + \" c/CLASSROOM_NAME\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(UpdateGradesCommand.COMMAND_WORD + \" as/ASSIGNMENT_INDEX s/STUDENT_INDEX g/GRADE\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(UpdateGradesCommand.COMMAND_WORD + \" as/ASSIGNMENT_INDEX g/grade\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(EditAssignmentCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                + \" ASSIGNMENT_INDEX [as/ASSIGNMENT_NAME] [d/DEADLINE]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(AddStudentCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                + \" n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                + \"pp/PARENT_PHONE_NUMBER [m/MEDICAL_CONDITIONS] [t/TAG]\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(EditStudentCommand.COMMAND_WORD + \" STUDENT_INDEX [n/NAME] [p/PHONE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                + \"[e/EMAIL] [a/ADDRESS] [m/MEDICAL_CONDITIONS] [t/TAG]\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(DeleteStudentCommand.COMMAND_WORD + \" STUDENT_INDEX\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(DeleteAssignmentCommand.COMMAND_WORD + \" ASSIGNMENT_INDEX\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        commandHashSet.add(DeleteClassroomCommand.COMMAND_WORD + \" c/CLASS\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(FindStudentCommand.COMMAND_WORD + \" STUDENT_NAME\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        commandHashSet.add(FindAssignmentCommand.COMMAND_WORD + \" ASSIGNMENT_NAME\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        commandHashSet.add(FindLessonCommand.COMMAND_WORD + \" LESSON_KEYWORD\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        commandHashSet.add(AddAssignmentCommand.COMMAND_WORD + \" as/ASSIGNMENT d/DEADLINE:dd/MM/yy HHmm\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        commandHashSet.add(AddLessonCommand.COMMAND_WORD + \" l/LESSON st/START_TIME et/ET_TIME:dd/MM/yy HHmm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        commandHashSet.add(DeleteLessonCommand.COMMAND_WORD + \" LESSON_INDEX day/DAY_INDEX\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(EditLessonCommand.COMMAND_WORD + \" LESSON_INDEX day/DAY_INDEX [l/LESSON_NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                + \"[st/START_TIME] [et/END_TIME]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        commandHashSet.add(GetStudentGradesCommand.COMMAND_WORD + \" STUDENT_INDEX\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        commandHashSet.add(GetUnsubmittedAssignmentsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(UploadPictureCommand.COMMAND_WORD + \" STUDENT_INDEX\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(ResetDisplayPictureCommand.COMMAND_WORD + \" STUDENT_INDEX\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(ListAssignmentCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(ListStudentCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandHashSet.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return commandHashSet;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 44,
      "sheryltay28": 1,
      "weikiat97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Deletes an assignment identified using it\u0027s displayed index from the classroom."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class DeleteAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteassignment\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                   + \": Deletes the student identified by the index number \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                   + \"used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                   + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final String MESSAGE_DELETE_ASSIGNMENT_SUCCESS \u003d \"Deleted Assignment: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public DeleteAssignmentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Assignment assignmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.deleteAssignment(assignmentToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ASSIGNMENT_SUCCESS, assignmentToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                   || (other instanceof DeleteAssignmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                           \u0026\u0026 targetIndex.equals(((DeleteAssignmentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 51,
      "weikiat97": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteClassroomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSROOM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Deletes a classroom identified using it\u0027s displayed index from the notebook."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class DeleteClassroomCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteclass\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \": Deletes the classroom identified by the user.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Parameters: \" + PREFIX_CLASSROOM + \"CLASSROOM_NAME\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_CLASSROOM + \"4C\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DELETE_CLASSROOM_SUCCESS \u003d \"Deleted Classroom: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_CLASSROOM \u003d \"This classroom does not exist in the notebook\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_BLANK_CLASSNAME \u003d \"A class must have a name.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Classroom toDelete;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public DeleteClassroomCommand(Classroom classroom) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.toDelete \u003d classroom;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!model.hasClassroom(toDelete)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_CLASSROOM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.deleteClassroom(toDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CLASSROOM_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof DeleteClassroomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 toDelete.equals(((DeleteClassroomCommand) other).toDelete)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Deletes a lesson identified using it\u0027s displayed index from the notebook."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class DeleteLessonCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletelesson\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the lesson identified \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"by the index number used in the displayed lesson list in each day tab.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"Parameters: LESSON_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + PREFIX_DAY + \"DAY_OF_THE_WEEK (Monday: 1, Tuesday: 2 etc) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + PREFIX_DAY + \"3 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_DELETE_LESSON_SUCCESS \u003d \"Deleted Lesson: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final Index day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public DeleteLessonCommand(Index targetIndex, Index day) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        List\u003cUniqueLessonList\u003e lastShownList \u003d model.getFilteredLessonWeekList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        UniqueLessonList dayList \u003d lastShownList.get(day.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d dayList.asUnmodifiableObservableList().size()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                || day.getZeroBased() \u003c 0 || day.getZeroBased() \u003e 7) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson lessonToDelete \u003d dayList.asUnmodifiableObservableList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        model.deleteLesson(lessonToDelete);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                || (other instanceof DeleteLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteLessonCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "sheryltay28": 59,
      "weikiat97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteStudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from the classroom."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class DeleteStudentCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletestudent\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public DeleteStudentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (Assignment assignment: assignmentList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Assignment editedAssignment \u003d new Assignment(assignment.getAssignmentName(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    assignment.getAssignmentDeadline());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            editedAssignment.setGrades(assignment.namesStringListFromGrades(), assignment.marksStringListFromGrades());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            editedAssignment.deleteOneStudentGrade(studentToDelete.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            model.setAssignment(assignment, editedAssignment);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof DeleteStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteStudentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "Xelyion": 7,
      "weikiat97": 19,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentGrades;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Edits the details of an existing assignment in the classroom."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class EditAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editassignment\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the assignment identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"by the index number used in the displayed assignment list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"[\" + PREFIX_ASSIGNMENT + \"ASSIGNMENT_NAME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"[\" + PREFIX_DEADLINE + \"ASSIGNMENT_DEADLINE]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_ASSIGNMENT + \"Math Homework 2 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            + PREFIX_DEADLINE + \"11/11/2020 1200\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_EDIT_ASSIGNMENT_SUCCESS \u003d \"Edited Assignment: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment already exists in the classroom.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final EditAssignmentDescriptor editAssignmentDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param index of the assignment in the filtered assignment list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param editAssignmentDescriptor details to edit the student with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditAssignmentCommand(Index index, EditAssignmentDescriptor editAssignmentDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(editAssignmentDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.editAssignmentDescriptor \u003d new EditAssignmentDescriptor(editAssignmentDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cAssignment\u003e lastShownList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment assignmentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment editedAssignment \u003d createEditedAssignment(assignmentToEdit, editAssignmentDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (!editedAssignment.isCompleted()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            List\u003cStudent\u003e studentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            for (Student student: studentList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                editedAssignment.addOneStudentGrade(student.getName().fullName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!assignmentToEdit.isSameAssignment(editedAssignment) \u0026\u0026 model.hasAssignment(editedAssignment)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.setAssignment(assignmentToEdit, editedAssignment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Creates and returns a {@code Assignment} with the details of {@code assignmentToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * edited with {@code editAssignmentDescriptor}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static Assignment createEditedAssignment(Assignment assignmentToEdit,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                                                     EditAssignmentDescriptor editAssignmentDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assert assignmentToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AssignmentName updatedAssignmentName \u003d editAssignmentDescriptor.getAssignmentName()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .orElse(assignmentToEdit.getAssignmentName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AssignmentDeadline updatedAssignmentDeadline \u003d editAssignmentDescriptor.getAssignmentDeadline()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .orElse(assignmentToEdit.getAssignmentDeadline());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment output \u003d new Assignment(updatedAssignmentName, updatedAssignmentDeadline);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (assignmentToEdit.isCompleted()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            List\u003cString\u003e studentNames \u003d assignmentToEdit.namesStringListFromGrades();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            List\u003cString\u003e studentsGrades \u003d assignmentToEdit.marksStringListFromGrades();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            output.setGrades(studentNames, studentsGrades);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!(other instanceof EditAssignmentCommand)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand e \u003d (EditAssignmentCommand) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 editAssignmentDescriptor.equals(e.editAssignmentDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Stores the details to edit the assignment with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * corresponding field value of the assignment."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static class EditAssignmentDescriptor {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private AssignmentName assignmentName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private AssignmentDeadline assignmentDeadline;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private AssignmentGrades assignmentGrades;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public EditAssignmentDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public EditAssignmentDescriptor(EditAssignmentDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            setAssignmentName(toCopy.assignmentName);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            setAssignmentDeadline(toCopy.assignmentDeadline);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            setAssignmentGrades(toCopy.assignmentGrades);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(assignmentName, assignmentDeadline);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setAssignmentName(AssignmentName assignmentName) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.assignmentName \u003d assignmentName;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Optional\u003cAssignmentName\u003e getAssignmentName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return Optional.ofNullable(assignmentName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setAssignmentDeadline(AssignmentDeadline assignmentDeadline) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.assignmentDeadline \u003d assignmentDeadline;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Optional\u003cAssignmentDeadline\u003e getAssignmentDeadline() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return Optional.ofNullable(assignmentDeadline);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setAssignmentGrades(AssignmentGrades assignmentGrades) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.assignmentGrades \u003d assignmentGrades;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (!(other instanceof EditAssignmentDescriptor)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            EditAssignmentDescriptor e \u003d (EditAssignmentDescriptor) other;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return getAssignmentName().equals(e.getAssignmentName())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    \u0026\u0026 getAssignmentDeadline().equals(e.getAssignmentDeadline());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 4,
      "weikiat97": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.AddLessonCommand.MESSAGE_INVALID_END_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSONNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPEAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LESSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.ClassName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Edits the details of an existing lesson in the notebook."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class EditLessonCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editlesson\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the lesson identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"by the index number used in the displayed lesson list in each day tab. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Parameters: LESSON_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_DAY + \"DAY_OF_THE_WEEK (Monday: 1, Tuesday: 2 etc) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"[\" + PREFIX_LESSONNAME + \"LESSON_NAME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"[\" + PREFIX_STARTTIME + \"START TIME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"[\" + PREFIX_ENDTIME + \"END TIME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"[\" + PREFIX_REPEAT + \"REPEAT] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_DAY + \"3 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + PREFIX_LESSONNAME + \"Math 3E7 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + PREFIX_STARTTIME + \"14/10/2019 1200\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_EDIT_LESSON_SUCCESS \u003d \"Edited Lesson: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists in the classroom.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final EditLessonDescriptor editLessonDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final Index day;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @param index of the lesson in the filtered lesson list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @param editLessonDescriptor details to edit the lesson with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public EditLessonCommand(Index index, EditLessonDescriptor editLessonDescriptor, Index day) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(editLessonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.editLessonDescriptor \u003d new EditLessonDescriptor(editLessonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        List\u003cUniqueLessonList\u003e lastShownList \u003d model.getFilteredLessonWeekList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        UniqueLessonList dayList \u003d lastShownList.get(day.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d dayList.asUnmodifiableObservableList().size()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            || day.getZeroBased() \u003c 0 || day.getZeroBased() \u003e 7) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson lessonToEdit \u003d dayList.asUnmodifiableObservableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson editedLesson \u003d createEditedLesson(lessonToEdit, editLessonDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!lessonToEdit.isSameLesson(editedLesson) \u0026\u0026 model.hasLesson(editedLesson)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else if (!editedLesson.endTimeIsAfterStartTime()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_END_TIME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        model.setLesson(lessonToEdit, editedLesson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        model.updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_LESSON_SUCCESS, editedLesson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Creates and returns a {@code Lesson} with the details of {@code lessonToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * edited with {@code editLessonDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private static Lesson createEditedLesson(Lesson lessonToEdit, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assert lessonToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ClassName updatedLessonName \u003d editLessonDescriptor.getName().orElse(lessonToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Time startTime \u003d editLessonDescriptor.getStartTime().orElse(lessonToEdit.getStartTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Time endtime \u003d editLessonDescriptor.getEndTime().orElse(lessonToEdit.getEndTime());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new Lesson(startTime, endtime, updatedLessonName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!(other instanceof EditStudentCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        EditLessonCommand e \u003d (EditLessonCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 editLessonDescriptor.equals(e.editLessonDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Stores the details to edit the lesson with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * corresponding field value of the lesson."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static class EditLessonDescriptor {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        private ClassName name;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        private Time startTime;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        private Time endTime;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public EditLessonDescriptor() {}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public EditLessonDescriptor(EditLessonDescriptor toCopy) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, startTime, endTime);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setName(ClassName name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public Optional\u003cClassName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setStartTime(Time startTime) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public Optional\u003cTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setEndTime(Time endTime) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public Optional\u003cTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            if (!(other instanceof EditLessonDescriptor)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            EditLessonDescriptor e \u003d (EditLessonDescriptor) other;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                    \u0026\u0026 getStartTime().equals(e.getStartTime())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                    \u0026\u0026 getEndTime().equals(e.getEndTime());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "sheryltay28": 180,
      "weikiat97": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditStudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICALCONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARENTPHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.DisplayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.MedicalCondition;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.ParentPhone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Edits the details of an existing student in the classroom."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class EditStudentCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editstudent\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"[\" + PREFIX_PARENTPHONE + \"PARENTPHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"[\" + PREFIX_MEDICALCONDITION + \"MEDICALCONDITION] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the classroom.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_SAME_PHONE_AND_PARENT_PHONE \u003d \"Phone and parent phone cannot be the same.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param index of the student in the filtered student list to edit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else if (editedStudent.getParentPhone().toString().equals(editedStudent.getPhone().toString())) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(MESSAGE_SAME_PHONE_AND_PARENT_PHONE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!studentToEdit.getName().toString().equals(editedStudent.getName().toString())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            model.updateAllAssignmentsWithName(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Phone updatedPhone \u003d editStudentDescriptor.getPhone().orElse(studentToEdit.getPhone());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ParentPhone updatedParentPhone \u003d editStudentDescriptor.getParentPhone().orElse(studentToEdit.getParentPhone());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Address updatedAddress \u003d editStudentDescriptor.getAddress().orElse(studentToEdit.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        DisplayPicture sameDisplayPicture \u003d new DisplayPicture(studentToEdit.getDisplayPictureFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        MedicalCondition updatedMedicalCondition \u003d editStudentDescriptor.getMedicalCondition()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .orElse(studentToEdit.getMedicalCondition());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new Student(updatedName, updatedPhone, updatedEmail, updatedParentPhone, updatedAddress,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                sameDisplayPicture, updatedMedicalCondition, updatedTags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!(other instanceof EditStudentCommand)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand e \u003d (EditStudentCommand) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private ParentPhone parentPhone;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private MedicalCondition medicalCondition;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            setParentPhone(toCopy.parentPhone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            setMedicalCondition(toCopy.medicalCondition);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, parentPhone, medicalCondition, email, address, tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setParentPhone(ParentPhone parentPhone) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.parentPhone \u003d parentPhone;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Optional\u003cParentPhone\u003e getParentPhone() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return Optional.ofNullable(parentPhone);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setMedicalCondition(MedicalCondition medicalCondition) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.medicalCondition \u003d medicalCondition;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Optional\u003cMedicalCondition\u003e getMedicalCondition() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return Optional.ofNullable(medicalCondition);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    \u0026\u0026 getParentPhone().equals(e.getParentPhone())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    \u0026\u0026 getMedicalCondition().equals(e.getMedicalCondition())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 3,
      "weikiat97": 95,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Classroom as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Finds and lists all assignment in classroom whose assignment name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class FindAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findassignment\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all assignments whose assignment names contain \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"any of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Math\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final AssignmentNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public FindAssignmentCommand(AssignmentNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredAssignmentList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.displayAssignments();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                String.format(Messages.MESSAGE_ASSIGNMENTS_LISTED_OVERVIEW, model.getFilteredAssignmentList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof FindAssignmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindAssignmentCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.LessonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Finds and lists all lessons in notebook which contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class FindLessonCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findlesson\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all lessons which contain any of \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" math\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final LessonContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public FindLessonCommand(LessonContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        model.updateFilteredLessonList(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        String displayList \u003d model.displayLessons();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        String result \u003d String.format(Messages.MESSAGE_LESSONS_LISTED_OVERVIEW, model.getFilteredLessonList().size())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                + \"\\n\" + displayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                String.format(result));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                || (other instanceof FindLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindLessonCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindStudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Finds and lists all students in classroom whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class FindStudentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findstudent\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public FindStudentCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.displayStudents();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof FindStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindStudentCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 11,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GetStudentGradesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Gets an individual student\u0027s grades for all the assignments."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class GetStudentGradesCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"getgrades\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets all the grades of a specific student.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Parameters: STUDENT_INDEX\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Grades of %1$s retrieved: \\n%2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public GetStudentGradesCommand(Index index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cAssignment\u003e lastShownAssignmentList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownStudentList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student student \u003d lastShownStudentList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Assignment assignment : lastShownAssignmentList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Map\u003cString, String\u003e currentAssignmentGrades \u003d assignment.getGrades();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (currentAssignmentGrades.containsKey(student.getName().toString())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                output.append(assignment.getAssignmentName() + \": \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        + currentAssignmentGrades.get(student.getName().toString()) + \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, student.getName().toString(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                output.toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof GetStudentGradesCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 index.equals(((GetStudentGradesCommand) other).index));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GetUnsubmittedAssignmentsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Gets all the unsubmitted assignments in the classroom."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class GetUnsubmittedAssignmentsCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"getunsubmitted\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String UNSUBMITTED \u003d \"Not submitted.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all unsubmitted assignments: \\n%1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cAssignment\u003e lastShownAssignmentList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Assignment assignment : lastShownAssignmentList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Map\u003cString, String\u003e currentAssignmentGrades \u003d assignment.getGrades();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (currentAssignmentGrades.containsValue(UNSUBMITTED)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                output.append(assignment.getAssignmentName().toString() + \": \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                boolean foundFirst \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                for (String student : currentAssignmentGrades.keySet()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    if (currentAssignmentGrades.get(student).equals(\"Not submitted.\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        if (foundFirst) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                            output.append(\", \" + student);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                            output.append(student);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                            foundFirst \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                output.append(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, output.toString()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_NO_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Lists all assignments in the classroom to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class ListAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listassignments\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all assignments\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        //model.updateFilteredStudentList(PREDICATE_SHOW_NO_STUDENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.displayAssignments();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 23,
      "weikiat97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListStudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Lists all students in the classroom to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class ListStudentCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"liststudents\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.displayStudents();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "weikiat97": 6,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LESSONLISTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Redoes a previously undone command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Redo the previous undone command \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_REDO_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_REDO_FAILURE \u003d \"There is no action to redo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!model.canRedo()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(MESSAGE_REDO_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ReadOnlyNotebook previousCopy \u003d model.redo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredLessonWeekList(PREDICATE_SHOW_ALL_LESSONLISTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.setNotebook(previousCopy);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new CommandResult(MESSAGE_REDO_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ResetDisplayPictureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.DisplayPicture;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.MedicalCondition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.ParentPhone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * resets display picture of student to a very handsome man."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class ResetDisplayPictureCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"resetdisplaypic\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" resets display pic to default\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String MESSAGE_PICTURE_ALREADY_DEFAULT \u003d \"Display Picture already default!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Constructor for command, makes sure index not null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public ResetDisplayPictureCommand(Index index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * creates edited student with new picture"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param studentToEdit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return Student"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Name name \u003d studentToEdit.getName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Phone phone \u003d studentToEdit.getPhone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Email email \u003d studentToEdit.getEmail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ParentPhone parentPhone \u003d studentToEdit.getParentPhone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Address address \u003d studentToEdit.getAddress();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        MedicalCondition medicalCondition \u003d studentToEdit.getMedicalCondition();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Set\u003cTag\u003e tags \u003d studentToEdit.getTags();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        DisplayPicture displayPicture \u003d new DisplayPicture();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student editedStudent \u003d new Student(name, phone, email, parentPhone, address,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                displayPicture, medicalCondition, tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return editedStudent;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * creates edited student with changed display photo"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new CommandException(MESSAGE_PICTURE_ALREADY_DEFAULT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String messageSuccess \u003d \"Reset \" + editedStudent.getName() + \"\u0027s display picture.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return new CommandResult(String.format(messageSuccess, editedStudent));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (!(other instanceof ResetDisplayPictureCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ResetDisplayPictureCommand c \u003d (ResetDisplayPictureCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return index.equals(c.getIndex());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetClassroomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSROOM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Sets a classroom in the notebook to be the current classroom."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class SetClassroomCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setclass\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a classroom as current classroom\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                       + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                       + PREFIX_CLASSROOM + \"CLASSROOMNAME\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Classroom set: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String MESSAGE_CLASSROOM_NOT_FOUND \u003d \"This classroom does not exist in the notebook\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String MESSAGE_CLASSROOM_BLANK \u003d \"Classroom name cannot be blank!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final Classroom toSet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public SetClassroomCommand(String classroomName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(classroomName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        toSet \u003d new Classroom(classroomName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String toSetName \u003d toSet.getClassroomName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (toSetName.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new CommandException(MESSAGE_CLASSROOM_BLANK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (model.hasClassroom(toSet)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Classroom newCurrentClassroom \u003d model.getClassroom(toSet);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            model.setCurrentClassroom(newCurrentClassroom);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new CommandException(MESSAGE_CLASSROOM_NOT_FOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.displayAssignments();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.displayStudents();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toSet));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                       || (other instanceof SetClassroomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                   \u0026\u0026 toSet.equals(((SetClassroomCommand) other).toSet));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 7,
      "Xelyion": 47,
      "weikiat97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LESSONLISTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Undoes a previous command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Undo the previous command \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_UNDO_FAILURE \u003d \"There is no action to undo!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!model.canUndo()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(MESSAGE_UNDO_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ReadOnlyNotebook previousNotebook \u003d model.undo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredLessonWeekList(PREDICATE_SHOW_ALL_LESSONLISTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.setNotebook(previousNotebook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new CommandResult(MESSAGE_UNDO_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateGradesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSIGNMENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Updates the grades of an existing assignment in the classroom."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class UpdateGradesCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"grades\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the grades of the assignment identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"by the index number of the assignment list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Either input grades for all the students, or input one student\u0027s index to overwrite the particular \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"student\u0027s grades.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Parameters (All Students): \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_ASSIGNMENT + \"ASSIGNMENT_INDEX \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_MARKS + \"GRADE GRADE ... GRADE\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Parameters (One Student): \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_ASSIGNMENT + \"ASSIGNMENT_INDEX \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_STUDENT + \"STUDENT_INDEX \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_MARKS + \"GRADE\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Example (All Students - for 4 Students): \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_ASSIGNMENT + \"1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_MARKS + \"20 34 56 87\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + \"Example (One Student): \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_ASSIGNMENT + \"1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_STUDENT + \"2 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + PREFIX_MARKS + \"60\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_EDIT_ASSIGNMENT_SUCCESS \u003d \"Edited Assignment: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"This assignment already exists in the classroom.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Index assignment;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Index student;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final List\u003cString\u003e students;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private List\u003cString\u003e marks;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private boolean updatingIndividualGrade;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final String gradeToUpdate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param assignment of the assignment in the filtered assignment list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @param marks List of marks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public UpdateGradesCommand(Index assignment, List\u003cString\u003e marks) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(marks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.student \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.students \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.marks \u003d marks;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.gradeToUpdate \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param assignment of the assignment in the filtered assignment list to edit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param student of the student in the filtered student list to edit"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param mark this student\u0027s mark"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public UpdateGradesCommand(Index assignment, Index student, String mark) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(mark);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.students \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.gradeToUpdate \u003d mark;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.updatingIndividualGrade \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cAssignment\u003e lastShownAssignmentList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (assignment.getZeroBased() \u003e\u003d lastShownAssignmentList.size()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else if (updatingIndividualGrade \u0026\u0026 student.getZeroBased() \u003e\u003d lastShownStudentList.size()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (updatingIndividualGrade) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            marks \u003d lastShownAssignmentList.get(assignment.getZeroBased()).marksStringListFromGrades();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment assignmentToEdit;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment editedAssignment;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (Student s : lastShownStudentList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            String name \u003d s.getName().fullName;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            students.add(name);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!updatingIndividualGrade \u0026\u0026 lastShownStudentList.size() !\u003d marks.size()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            String tooManyInputsError \u003d \"Number of inputs should be \" + lastShownStudentList.size();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            tooManyInputsError +\u003d \" for \" + lastShownStudentList.size() + \" students\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new CommandException(tooManyInputsError);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else if (updatingIndividualGrade) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            marks.set(student.getZeroBased(), gradeToUpdate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assignmentToEdit \u003d lastShownAssignmentList.get(assignment.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAssignment \u003d createEditedAssignment(assignmentToEdit, students, marks);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (!assignmentToEdit.isSameAssignment(editedAssignment) \u0026\u0026 model.hasAssignment(editedAssignment)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.setAssignment(assignmentToEdit, editedAssignment);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        model.updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Creates and returns a {@code Assignment} with the details of {@code assignmentToEdit}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * edited with {@code List\u003cString\u003e students} and {@code List\u003cInteger\u003e marks}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static Assignment createEditedAssignment(Assignment assignmentToEdit,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                                     List\u003cString\u003e students, List\u003cString\u003e marks) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assert assignmentToEdit !\u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AssignmentName assignmentName \u003d assignmentToEdit.getAssignmentName();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AssignmentDeadline assignmentDeadline \u003d assignmentToEdit.getAssignmentDeadline();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment editedAssignment \u003d new Assignment(assignmentName, assignmentDeadline);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAssignment.setGrades(students, marks);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return editedAssignment;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (!(other instanceof UpdateGradesCommand)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        UpdateGradesCommand e \u003d (UpdateGradesCommand) other;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return assignment.equals(e.assignment)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                   \u0026\u0026 marks.equals(e.marks);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 97,
      "weikiat97": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UploadPictureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.DisplayPicture;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.MedicalCondition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.ParentPhone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "//@@author SebastianLie"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * Uploads picture of student into student card"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * acts like edit command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class UploadPictureCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"upload\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": activates file chooser to upload \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            + \"picture of student, by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            + \"Existing DisplayPicture will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String MESSAGE_WRONG_FORMAT \u003d \"Please only upload a PNG or JPG file.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String MESSAGE_SAME_PICTURE \u003d \"This student\u0027s display picture is the same as the current one.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File not found! Please upload another file.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final String fileName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Constructor for command, makes sure index not null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public UploadPictureCommand(Index index, String fileName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assert fileName.length() \u003e 4 : \"Filename should be at least 4 letters long to be valid!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int start \u003d fileName.length() - 3;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        boolean isPng \u003d fileName.substring(start).equals(\"png\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        boolean isJpg \u003d fileName.substring(start).equals(\"jpg\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assert isPng || isJpg : \"File should be a JPG or PNG file!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * creates edited student with new picture"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param studentToEdit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return Student"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, String fileName) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Name name \u003d studentToEdit.getName();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Phone phone \u003d studentToEdit.getPhone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Email email \u003d studentToEdit.getEmail();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ParentPhone parentPhone \u003d studentToEdit.getParentPhone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Address address \u003d studentToEdit.getAddress();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        MedicalCondition medicalCondition \u003d studentToEdit.getMedicalCondition();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Set\u003cTag\u003e tags \u003d studentToEdit.getTags();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        DisplayPicture displayPicture \u003d new DisplayPicture(fileName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student editedStudent \u003d new Student(name, phone, email, parentPhone, address,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                displayPicture, medicalCondition, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return editedStudent;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * creates edited student with changed display photo"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String currentFileName \u003d studentToEdit.getDisplayPictureFilePath();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (currentFileName.equals(fileName)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new CommandException(MESSAGE_SAME_PICTURE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, fileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String messageSuccess \u003d \"Uploaded \" + editedStudent.getName() + \"\u0027s photo successfully.\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return new CommandResult(String.format(messageSuccess, editedStudent));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (!(other instanceof UploadPictureCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UploadPictureCommand c \u003d (UploadPictureCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return index.equals(c.getIndex());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAssignmentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.AddAssignmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Parses input arguments and creates a new AddAssignmentCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class AddAssignmentCommandParser implements Parser\u003cAddAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAssignmentCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * and returns an AddAssignmentCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public AddAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_ASSIGNMENT, PREFIX_DEADLINE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ASSIGNMENT, PREFIX_DEADLINE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AssignmentName assignmentName \u003d ParserUtil.parseAssignmentName(argMultimap.getValue(PREFIX_ASSIGNMENT).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AssignmentDeadline assignmentDeadline \u003d ParserUtil.parseAssignmentDeadline(argMultimap"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment assignment \u003d new Assignment(assignmentName, assignmentDeadline);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return new AddAssignmentCommand(assignment);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Returns true if the prefix contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 40,
      "weikiat97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddClassroomCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSROOM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.AddClassroomCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Parses input arguments and creates a new AddClassroomCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class AddClassroomCommandParser implements Parser\u003cAddClassroomCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddClassroomCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * and returns an AddClassroomCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public AddClassroomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASSROOM);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASSROOM)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClassroomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String classroomName \u003d ParserUtil.parseClassroomName(argMultimap.getValue(PREFIX_CLASSROOM).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (classroomName.equals(\"\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new ParseException(String.format(AddClassroomCommand.MESSAGE_BLANK_CLASSNAME));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Classroom classroom \u003d new Classroom(classroomName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return new AddClassroomCommand(classroom.getClassroomName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Returns true if the prefix contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 3,
      "Xelyion": 41,
      "weikiat97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddLessonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSONNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPEAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.ClassName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Parses input arguments and creates a new AddLessonCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class AddLessonCommandParser implements Parser\u003cAddLessonCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddLessonCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * and returns an AddLessonCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public AddLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LESSONNAME, PREFIX_STARTTIME, PREFIX_ENDTIME, PREFIX_REPEAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_LESSONNAME, PREFIX_STARTTIME, PREFIX_ENDTIME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ClassName className \u003d ParserUtil.parseClassName(argMultimap.getValue(PREFIX_LESSONNAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Time startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_STARTTIME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Time endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_ENDTIME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson lesson \u003d new Lesson(startTime, endTime, className);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_REPEAT)) { //if indicated repeat then set isRepeat in lesson to true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            lesson.setRepeat();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new AddLessonCommand(lesson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 50,
      "weikiat97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddStudentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICALCONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARENTPHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.DisplayPicture;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.MedicalCondition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.ParentPhone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Parses input arguments and creates a new AddStudentCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AddStudentCommandParser implements Parser\u003cAddStudentCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddStudentCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * and returns an AddStudentCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public AddStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_PARENTPHONE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_MEDICALCONDITION, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                PREFIX_PARENTPHONE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ParentPhone parentPhone \u003d ParserUtil.parseParentPhone(argMultimap.getValue(PREFIX_PARENTPHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        MedicalCondition medicalCondition;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MEDICALCONDITION)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            medicalCondition \u003d ParserUtil.parseMedicalCondition(argMultimap"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    .getValue(PREFIX_MEDICALCONDITION).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            medicalCondition \u003d new MedicalCondition(\"NIL\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student student \u003d new Student(name, phone, email, parentPhone, address,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                new DisplayPicture(), medicalCondition, tagList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new AddStudentCommand(student);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 3,
      "weikiat97": 31,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Prefix PREFIX_PARENTPHONE \u003d new Prefix(\"pp/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Prefix PREFIX_MEDICALCONDITION \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final Prefix PREFIX_ASSIGNMENT \u003d new Prefix(\"as/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Prefix PREFIX_STUDENT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final Prefix PREFIX_MARKS \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final Prefix PREFIX_LESSONNAME \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final Prefix PREFIX_STARTTIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final Prefix PREFIX_ENDTIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final Prefix PREFIX_REPEAT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final Prefix PREFIX_CLASSROOM \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final Prefix PREFIX_FILE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix(\"day/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "Xelyion": 3,
      "sheryltay28": 5,
      "weikiat97": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteAssignmentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.DeleteAssignmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Parses input arguments and creates a new DeleteAssignmentCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class DeleteAssignmentCommandParser implements Parser\u003cDeleteAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAssignmentCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * and returns a DeleteAssignmentCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public DeleteAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return new DeleteAssignmentCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAssignmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteClassroomCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSROOM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.DeleteClassroomCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Parses input arguments and creates a new DeleteClassroomCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class DeleteClassroomCommandParser implements Parser\u003cDeleteClassroomCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteClassroomCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * and returns a DeleteClassroomCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public DeleteClassroomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASSROOM);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASSROOM)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    DeleteClassroomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String classroomName \u003d ParserUtil.parseClassroomName(argMultimap.getValue(PREFIX_CLASSROOM).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (classroomName.equals(\"\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(String.format(DeleteClassroomCommand.MESSAGE_BLANK_CLASSNAME));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Classroom classroom \u003d new Classroom(classroomName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new DeleteClassroomCommand(classroom);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if the prefix contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteLessonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.DeleteLessonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Parses input arguments and creates a new DeleteLessonCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class DeleteLessonCommandParser implements Parser\u003cDeleteLessonCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteLessonCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * and returns a DeleteLessonCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public DeleteLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DAY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Index day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            day \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return new DeleteLessonCommand(index, day);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLessonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 50,
      "weikiat97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteStudentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Parses input arguments and creates a new DeleteStudentCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class DeleteStudentCommandParser implements Parser\u003cDeleteStudentCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteStudentCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * and returns a DeleteStudentCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public DeleteStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new DeleteStudentCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStudentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditAssignmentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.EditAssignmentCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditAssignmentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Parses input arguments and creates a new EditAssignmentCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class EditAssignmentCommandParser implements Parser\u003cEditAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAssignmentCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * and returns an EditAssignmentCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ASSIGNMENT, PREFIX_DEADLINE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    EditAssignmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentDescriptor editAssignmentDescriptor \u003d new EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ASSIGNMENT).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            editAssignmentDescriptor.setAssignmentName(ParserUtil.parseAssignmentName(argMultimap"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    .getValue(PREFIX_ASSIGNMENT).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            editAssignmentDescriptor.setAssignmentDeadline(ParserUtil.parseAssignmentDeadline(argMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    .getValue(PREFIX_DEADLINE).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!editAssignmentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(EditAssignmentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new EditAssignmentCommand(index, editAssignmentDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditLessonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.commands.EditLessonCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSONNAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.EditLessonCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Parses input arguments and creates a new EditLessonCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class EditLessonCommandParser implements Parser\u003cEditLessonCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditLessonCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * and returns an EditLessonCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public EditLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DAY, PREFIX_LESSONNAME, PREFIX_STARTTIME, PREFIX_ENDTIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            day \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                    EditLessonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        EditLessonDescriptor editLessonDescriptor \u003d new EditLessonDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LESSONNAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            editLessonDescriptor.setName(ParserUtil.parseClassName(argMultimap.getValue(PREFIX_LESSONNAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STARTTIME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            editLessonDescriptor.setStartTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_STARTTIME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ENDTIME).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            editLessonDescriptor.setEndTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_ENDTIME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!editLessonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new ParseException(EditLessonCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new EditLessonCommand(index, editLessonDescriptor, day);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 56,
      "weikiat97": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditStudentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICALCONDITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARENTPHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Parses input arguments and creates a new EditStudentCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class EditStudentCommandParser implements Parser\u003cEditStudentCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditStudentCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * and returns an EditStudentCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_PARENTPHONE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_MEDICALCONDITION, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            editStudentDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PARENTPHONE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            editStudentDescriptor.setParentPhone(ParserUtil.parseParentPhone(argMultimap.getValue(PREFIX_PARENTPHONE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            editStudentDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEDICALCONDITION).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            editStudentDescriptor.setMedicalCondition(ParserUtil.parseMedicalCondition(argMultimap"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    .getValue(PREFIX_MEDICALCONDITION).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new EditStudentCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 28,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindAssignmentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.FindAssignmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Parses input arguments and creates a new FindAssignmentCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class FindAssignmentCommandParser implements Parser\u003cFindAssignmentCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindAssignmentCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * and returns a FindAssignmentCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public FindAssignmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new FindAssignmentCommand(new AssignmentNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindLessonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.FindLessonCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.LessonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Parses input arguments and creates a new FindLessonCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class FindLessonCommandParser implements Parser\u003cFindLessonCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindLessonCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * and returns a FindLessonCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public FindLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new FindLessonCommand(new LessonContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindStudentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.FindStudentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Parses input arguments and creates a new FindStudentCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class FindStudentCommandParser implements Parser\u003cFindStudentCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindStudentCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * and returns a FindStudentCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public FindStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new FindStudentCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 9,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GetStudentGradesCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.GetStudentGradesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Parses input arguments and creates a new GetStudentGradesCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class GetStudentGradesCommandParser implements Parser\u003cGetStudentGradesCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GetStudentGradesCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * and returns a GetStudentGradesCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public GetStudentGradesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new GetStudentGradesCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GetStudentGradesCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NotebookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.AddAssignmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.AddClassroomCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.DeleteAssignmentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.DeleteClassroomCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.DeleteLessonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditAssignmentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.EditLessonCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.FindAssignmentCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.FindLessonCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.FindStudentCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.GetStudentGradesCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.GetUnsubmittedAssignmentsCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.ListAssignmentCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.ListStudentCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.ResetDisplayPictureCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.SetClassroomCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.UpdateGradesCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.UploadPictureCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class NotebookParser {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Please add any new command to the command masterlist as well."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        case SetClassroomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return new SetClassroomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        case AddClassroomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return new AddClassroomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        case ListAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return new ListAssignmentCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        case UpdateGradesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return new UpdateGradesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        case AddAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return new AddAssignmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case EditAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new EditAssignmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case AddStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new AddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case EditStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new EditStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case DeleteStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new DeleteStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        case DeleteAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return new DeleteAssignmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case FindStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new FindStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case FindAssignmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new FindAssignmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case ListStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new ListStudentCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        case AddLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return new AddLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        case DeleteLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return new DeleteLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case DeleteClassroomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new DeleteClassroomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        case EditLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return new EditLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new UndoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new RedoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case GetStudentGradesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new GetStudentGradesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        case GetUnsubmittedAssignmentsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new GetUnsubmittedAssignmentsCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        case UploadPictureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return new UploadPictureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        case ResetDisplayPictureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return new ResetDisplayPictureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        case FindLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return new FindLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 10,
      "Xelyion": 28,
      "sheryltay28": 16,
      "weikiat97": 44,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.UploadPictureCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.AssignmentGrades;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.ClassName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.DisplayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.MedicalCondition;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.ParentPhone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses a {@code String assignmentName} into a {@code AssignmentName}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the given {@code assignmentName} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static AssignmentName parseAssignmentName(String assignmentName) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(assignmentName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String trimmedAssignmentName \u003d assignmentName.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!AssignmentName.isValidAssignmentName(trimmedAssignmentName)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new ParseException(AssignmentName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new AssignmentName(trimmedAssignmentName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses a {@code String grades} into a {@code List\u003cString\u003e}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * String grades will be split by whitespace and stored in list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the given {@code grades} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static List\u003cString\u003e parseAssignmentGrades(String grades) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(grades);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        String trimmedGrades \u003d grades.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        String[] individualGrades \u003d trimmedGrades.split(\" \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (!AssignmentGrades.isValidGrade(individualGrades)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new ParseException(AssignmentGrades.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (String grade: individualGrades) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            output.add(grade);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses a {@code String grade} into a {@code String}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * String grade will be converted to String for output."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the given {@code grade} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static String parseSingleAssignmentGrade(String grade) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String trimmedGrade \u003d grade.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!AssignmentGrades.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(AssignmentGrades.SINGLE_ASSIGNMENT_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return trimmedGrade;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses a {@code String assignmentDeadline} into a {@code AssignmentDeadline}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the given {@code assignmentDeadline} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static AssignmentDeadline parseAssignmentDeadline(String assignmentDeadline) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(assignmentDeadline);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String trimmedAssignmentDeadline \u003d assignmentDeadline.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sdf.setLenient(false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            date \u003d sdf.parse(trimmedAssignmentDeadline);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            calendar.setTime(date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Calendar currCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (calendar.compareTo(currCalendar) \u003c 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                throw new ParseException(AssignmentDeadline.MESSAGE_DEADLINE_CONSTRAINT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(AssignmentDeadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new AssignmentDeadline(trimmedAssignmentDeadline);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!Phone.isValidParentPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses a {@code String parentPhone} into a {@code ParentPhone}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the given {@code parentPhone} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static ParentPhone parseParentPhone(String parentPhone) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(parentPhone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String trimmedParentPhone \u003d parentPhone.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!ParentPhone.isValidParentPhone(trimmedParentPhone)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(ParentPhone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new ParentPhone(trimmedParentPhone);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses a {@code String medicalCondition} into an {@code MedicalCondition}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the given {@code medicalCondition} is invalid."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static MedicalCondition parseMedicalCondition(String medicalCondition) throws ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(medicalCondition);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String trimmedMedicalCondition \u003d medicalCondition.trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!MedicalCondition.isValidMedicalCondition(trimmedMedicalCondition)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new MedicalCondition(trimmedMedicalCondition);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Parses a {@code String className} into a {@code ClassName}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @throws ParseException if the given {@code className} is invalid."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static ClassName parseClassName(String className) throws ParseException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(className);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        String trimmedClassName \u003d className.trim();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!ClassName.isValidClassName(trimmedClassName)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new ParseException(ClassName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new ClassName(trimmedClassName);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Parses a {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sdf.setLenient(false);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            date \u003d sdf.parse(trimmedTime);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            calendar.setTime(date);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            Calendar currCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            if (calendar.compareTo(currCalendar) \u003c 0) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                throw new ParseException(Time.MESSAGE_TIME_CONSTRAINT);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new Time(calendar);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the classroom name."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static String parseClassroomName(String classroomName) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        String trimmedName \u003d classroomName.trim();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return trimmedName;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses a {@code String fileName} into an {@code String} to be used as file name for DisplayPicture."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the given {@code fileName} is invalid."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static String parseDisplayPicture(String fileName) throws ParseException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (!DisplayPicture.isValidFormat(fileName)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new ParseException(UploadPictureCommand.MESSAGE_WRONG_FORMAT);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 11,
      "Xelyion": 35,
      "sheryltay28": 30,
      "weikiat97": 116,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RedoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Parses input arguments and creates a new RedoCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class RedoCommandParser implements Parser\u003cRedoCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RedoCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * and returns an RedoCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public RedoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (tooManyArgumentsPresent(args)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RedoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new RedoCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if there are more arguments than \u0027redo\u0027 in the give {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static boolean tooManyArgumentsPresent(String args) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String trimmedRedo \u003d args.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return trimmedRedo.equals(\"redo\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "weikiat97": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ResetDisplayPictureCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.ResetDisplayPictureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Parses input arguments and creates a new ResetDisplayPictureCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class ResetDisplayPictureCommandParser implements Parser\u003cResetDisplayPictureCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ResetDisplayPictureCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * and returns an ResetDisplayPictureCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public ResetDisplayPictureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return new ResetDisplayPictureCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ResetDisplayPictureCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 26,
      "weikiat97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetClassroomCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSROOM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.SetClassroomCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Parses input arguments and creates a new SetClassroomCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class SetClassroomCommandParser implements Parser\u003cSetClassroomCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetClassroomCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * and returns an SetClassroomCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public SetClassroomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASSROOM);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASSROOM)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetClassroomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        String classroomName \u003d ParserUtil.parseClassroomName(argMultimap.getValue(PREFIX_CLASSROOM).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Classroom classroom \u003d new Classroom(classroomName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return new SetClassroomCommand(classroom.getClassroomName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Returns true if the prefix contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "Xelyion": 36,
      "weikiat97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UndoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Parses input arguments and creates a new UndoCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class UndoCommandParser implements Parser\u003cUndoCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UndoCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * and returns an UndoCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public UndoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (tooManyArgumentsPresent(args)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new UndoCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if there are more arguments than \u0027undo\u0027 in the give {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static boolean tooManyArgumentsPresent(String args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String trimmedUndo \u003d args.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return trimmedUndo.equals(\"undo\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "weikiat97": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateGradesCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.commands.UpdateGradesCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Parses input arguments and creates a new UpdateGradesCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class UpdateGradesCommandParser implements Parser\u003cUpdateGradesCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateGradesCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * and returns an UpdateGradesCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public UpdateGradesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_ASSIGNMENT, PREFIX_STUDENT, PREFIX_MARKS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index assignment;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cString\u003e marks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index student \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String grade \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        boolean updatingIndividualGrades \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ASSIGNMENT, PREFIX_MARKS) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateGradesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assignment \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_ASSIGNMENT).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STUDENT).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            student \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            grade \u003d ParserUtil.parseSingleAssignmentGrade(argMultimap.getValue(PREFIX_MARKS).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            updatingIndividualGrades \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_MARKS).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            marks \u003d ParserUtil.parseAssignmentGrades(argMultimap.getValue(PREFIX_MARKS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (updatingIndividualGrades) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new UpdateGradesCommand(assignment, student, grade);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new UpdateGradesCommand(assignment, marks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if the prefix contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 38,
      "weikiat97": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UploadPictureCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.UploadPictureCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "//@@author SebastianLie"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * Parses input arguments and return UploadPictureCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class UploadPictureCommandParser implements Parser\u003cUploadPictureCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UploadPictureCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * and returns an UploadPictureCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public UploadPictureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FILE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    UploadPictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    UploadPictureCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String displayPictureFileName \u003d ParserUtil.parseDisplayPicture(argMultimap.getValue(PREFIX_FILE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return new UploadPictureCommand(index, displayPictureFileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Caretaker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Manages a list of all the previous Notebooks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class Caretaker extends Notebook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private ArrayList\u003cMemento\u003e mementos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private int statePointer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Notebook notebook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Initializes the list of mementos."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param notebook the notebook where changes are updated in."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Caretaker(Notebook notebook) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(notebook);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        statePointer \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        mementos.add(new Memento(new Notebook(notebook)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.notebook \u003d notebook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Saves the current state of notebook into the list of mementos."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void saveState() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        mementos \u003d new ArrayList\u003c\u003e(mementos.subList(0, statePointer + 1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Notebook notebookToAdd \u003d new Notebook(this.notebook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebookToAdd.setCurrentClassroom(this.notebook.getCurrentClassroom());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Memento mementoToAdd \u003d new Memento(notebookToAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        mementos.add(mementoToAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        statePointer++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Gets the first ReadOnlyNotebook in the mementos, which is the initial state of the Notebook."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ReadOnlyNotebook getInitialState() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return mementos.get(0).getState();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Undoes the previous command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return ReadOnlyNotebook that is the previous state of the notebook."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ReadOnlyNotebook undo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        statePointer--;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ReadOnlyNotebook previousCopy \u003d mementos.get(statePointer).getState();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return previousCopy;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Redoes the previously undone command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return ReadOnlyNotebook that is the previous state of the notebook."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ReadOnlyNotebook redo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        statePointer++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ReadOnlyNotebook previousCopy \u003d mementos.get(statePointer).getState();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return previousCopy;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Checks if there is anything to undo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return true if there are commands to undo."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return statePointer \u003e 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Checks if there is anything to redo."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return true if there are commands to redo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return statePointer \u003c (mementos.size() - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Memento.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a state of the Classroom."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class Memento {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private ReadOnlyNotebook state;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Initialises the memento and adds a ReadOnlyNotebook to it as its state. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Memento(ReadOnlyNotebook state) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(state);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ReadOnlyNotebook getState() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.ReadOnlyClassroom;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    Predicate\u003cAssignment\u003e PREDICATE_SHOW_ALL_ASSIGNMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    Predicate\u003cLesson\u003e PREDICATE_SHOW_ALL_LESSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    Predicate\u003cUniqueLessonList\u003e PREDICATE_SHOW_ALL_LESSONLISTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Returns the user prefs\u0027 notebook file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    Path getNotebookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the user prefs\u0027 classroom file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    void setNotebookFilePath(Path classroomFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notebook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces notebook data with the data in {@code notebook}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void setNotebook(ReadOnlyNotebook notebook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns a ReadOnlyNotebook of the current notebook."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ReadOnlyNotebook getNotebook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Classroom \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces classroom data with the data in {@code classroom}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    void setClassroom(ReadOnlyClassroom classroom);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if the notebook contains the {@code classroom}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    boolean hasClassroom(Classroom classroom);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Gets the current classroom of the notebook."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    Classroom getCurrentClassroom();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Gets the classroom with the same name as {@code classroom} from the notebook."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    Classroom getClassroom(Classroom classroom);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Deletes the given classroom."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The classroom must exist in the notebook."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void deleteClassroom(Classroom target);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds the given classroom."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code classroom} must not already exist in the notebook."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void addClassroom(Classroom classroom);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Sets {@code classroom} to be the current classroom."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * :@code classroom} must exist in the notebook."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void setCurrentClassroom(Classroom classroom);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Student \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the classroom."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code student} must not already exist in the classroom."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The student must exist in the classroom."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code target} must exist in the classroom."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the classroom."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Assignment \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if an assignment with the same identity as {@code assignment} exists in the classroom."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    boolean hasAssignment(Assignment assignment);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds the given assignment."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code assignment} must not already exist in the classroom."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void addAssignment(Assignment assignment);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Deletes the given assignment."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The assignment must exist in the classroom."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void deleteAssignment(Assignment target);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the given assignment {@code target} with {@code editedAssignment}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code target} must exist in the classroom."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as another existing assignment"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * in the classroom."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void setAssignment(Assignment target, Assignment editedAssignment);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces all the current key value {@code oldStudent} with {@code newStudent}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Does this for all the assignments."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void updateAllAssignmentsWithName(Student oldStudent, Student newStudent);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Lesson \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Adds the given lesson."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @param lesson lesson object."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    void addLesson(Lesson lesson);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Takes a Lesson and checks if another lesson exists in the same time period."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @param toCheck Lesson object."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    boolean checkTimingExist(Lesson toCheck);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if a Lesson with the same identity exists in the classroom."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @param lesson Lesson object."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    boolean hasLesson(Lesson lesson);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Deletes the given lesson."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The lesson must exist in the classroom."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    void deleteLesson(Lesson target);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Replaces the given lesson {@code target} with {@code editedLesson}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code target} must exist in the classroom."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in the address"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    void setLesson(Lesson target, Lesson editedLesson);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list. */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered assignment list. */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ObservableList\u003cAssignment\u003e getFilteredAssignmentList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered lesson list. */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered lesson week list. */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ObservableList\u003cUniqueLessonList\u003e getFilteredLessonWeekList();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns an unmodifiable view of the classroom list. */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    ObservableList\u003cClassroom\u003e getClassroomList();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /** Returns an unmodifiable view of the lesson list. */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Updates the filter of the filtered assignment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Updates the filter of the filtered lesson list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Updates the filter of the filtered lesson week list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void updateFilteredLessonWeekList(Predicate\u003cUniqueLessonList\u003e predicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo and Redo Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns a ReadOnlyNotebook of the previously saved state of the notebook. */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ReadOnlyNotebook undo();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns true if the notebook has previous states to undo to. */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    boolean canUndo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns a ReadOnlyNotebook of the next saved state of the notebook. */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ReadOnlyNotebook redo();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns true if the notebook has next state to redo to. */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    boolean canRedo();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Saves the current state of the notebook. */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void saveState();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Display Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns the boolean Classroom.isDisplayStudents to determine if students should be displayed."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    boolean isDisplayStudents();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the boolean Classroom.isDisplayStudents to true, to display student list."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void displayStudents();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the boolean Classroom.isDisplayStudents to false, to display assignment list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void displayAssignments();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns lists of lessons as a string."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    String displayLessons();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 24,
      "sheryltay28": 35,
      "weikiat97": 166,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.ReadOnlyClassroom;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Represents the in-memory model of the notebook data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final Notebook notebook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Caretaker caretaker;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private FilteredList\u003cAssignment\u003e filteredAssignments;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private FilteredList\u003cLesson\u003e filteredLessons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private FilteredList\u003cUniqueLessonList\u003e filteredLessonLists;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Initializes a ModelManager with the given notebook and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ModelManager(ReadOnlyNotebook notebook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireAllNonNull(notebook, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        logger.fine(\"Initializing with notebook: \" + notebook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.notebook \u003d new Notebook(notebook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.caretaker \u003d new Caretaker(this.notebook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(getCurrentClassroom().getStudentList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredAssignments \u003d new FilteredList\u003c\u003e(getCurrentClassroom().getAssignmentList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredLessons \u003d new FilteredList\u003c\u003e(this.notebook.getLessonList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        filteredLessonLists \u003d new FilteredList\u003c\u003e(this.notebook.getLessonWeekList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this(new Notebook(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Path getNotebookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return userPrefs.getNotebookFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setNotebookFilePath(Path notebookFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(notebookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        userPrefs.setNotebookFilePath(notebookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notebook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setNotebook(ReadOnlyNotebook notebook) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.notebook.resetData(notebook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(getCurrentClassroom().getStudentList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredAssignments \u003d new FilteredList\u003c\u003e(getCurrentClassroom().getAssignmentList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredLessons \u003d new FilteredList\u003c\u003e(this.notebook.getLessonList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredLessonLists \u003d new FilteredList\u003c\u003e(this.notebook.getLessonWeekList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ReadOnlyNotebook getNotebook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return notebook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Classroom \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setClassroom(ReadOnlyClassroom classroom) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        notebook.setClassroom(classroom);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Classroom getCurrentClassroom() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return notebook.getCurrentClassroom();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Classroom getClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return notebook.getClassroom(classroom);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean hasClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return notebook.hasClassroom(classroom);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void addClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        notebook.addClassroom(classroom);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setCurrentClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.setCurrentClassroom(classroom);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(getCurrentClassroom().getStudentList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        filteredAssignments \u003d new FilteredList\u003c\u003e(getCurrentClassroom().getAssignmentList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void deleteClassroom(Classroom target) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.removeClassroom(target);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(getCurrentClassroom().getStudentList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredAssignments \u003d new FilteredList\u003c\u003e(getCurrentClassroom().getAssignmentList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Student \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return notebook.hasStudent(student);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.addStudent(student);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        notebook.deleteStudent(target);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Assignment \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return notebook.hasAssignment(assignment);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.deleteAssignment(target);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.addAssignment(assignment);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        updateFilteredAssignmentList(PREDICATE_SHOW_ALL_ASSIGNMENTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireAllNonNull(target, editedAssignment);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        notebook.setAssignment(target, editedAssignment);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Updates the assignments in the notebook with the new student\u0027s name."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void updateAllAssignmentsWithName(Student oldStudent, Student newStudent) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(oldStudent, newStudent);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.updateAllAssignmentNamesWithName(oldStudent.getName().toString(), newStudent.getName().toString());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Display Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean isDisplayStudents() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return notebook.isDisplayStudents();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void displayStudents() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        notebook.displayStudents();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void displayAssignments() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        notebook.displayAssignments();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * returns a string of lessons."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @return String."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public String displayLessons() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (filteredLessons.isEmpty()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            for (int i \u003d 0; i \u003c filteredLessons.size(); i++) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                builder.append(\"---------------------------------------\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                builder.append(\"\\n\" + filteredLessons.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Lesson \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        notebook.addLesson(lesson);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean checkTimingExist(Lesson toCheck) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return notebook.checkTimingExist(toCheck);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return notebook.hasLesson(lesson);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        notebook.removeLesson(target);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        notebook.setLesson(target, editedLesson);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return filteredAssignments;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return filteredLessons;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ObservableList\u003cUniqueLessonList\u003e getFilteredLessonWeekList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return filteredLessonLists;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return notebook.getLessonList();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ObservableList\u003cClassroom\u003e getClassroomList() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return notebook.getClassroomList();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredAssignments.setPredicate(predicate);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        filteredLessons.setPredicate(predicate);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void updateFilteredLessonWeekList(Predicate\u003cUniqueLessonList\u003e predicate) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        filteredLessonLists.setPredicate(predicate);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo and Redo Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ReadOnlyNotebook undo() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return caretaker.undo();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return caretaker.canUndo();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ReadOnlyNotebook redo() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return caretaker.redo();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return caretaker.canRedo();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void saveState() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        caretaker.saveState();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Utility Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        boolean note \u003d notebook.equals(other.notebook);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        boolean pre \u003d userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        boolean stu \u003d filteredStudents.equals(other.filteredStudents);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        boolean ass \u003d filteredAssignments.equals(other.filteredAssignments);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        boolean les \u003d filteredLessonLists.equals(other.filteredLessonLists);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return notebook.equals(other.notebook)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 filteredAssignments.equals(other.filteredAssignments)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 filteredLessonLists.equals(other.filteredLessonLists);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 79,
      "sheryltay28": 66,
      "weikiat97": 124,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Notebook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//import seedu.address.model.assignment.UniqueAssignmentList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.ReadOnlyClassroom;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.UniqueClassroomList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonWeekList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Represents the in-memory model of the classroom data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class Notebook implements ReadOnlyNotebook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Classroom currentClassroom;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final UniqueClassroomList classrooms;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final UniqueLessonList lessons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final UniqueLessonWeekList lessonLists;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        classrooms \u003d new UniqueClassroomList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        lessonLists \u003d new UniqueLessonWeekList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            lessonLists.add(new UniqueLessonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Notebook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Notebook(ReadOnlyNotebook toBeCopied) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Resets the data of the notebook to the newData."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param newData notebook to reset data to."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void resetData(ReadOnlyNotebook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        setClassrooms(newData.getClassroomList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (currentClassroom !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            setCurrentClassroom(newData.getCurrentClassroom());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else if (classrooms.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Classroom newClassroom \u003d new Classroom();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            setCurrentClassroom(newClassroom);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            setCurrentClassroom(newData.getCurrentClassroom());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            lessonLists.asUnmodifiableObservableList().get(i).setLessons(newData.getLessonWeekList().get(i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ObservableList\u003cLesson\u003e newLessonList \u003d newData.getLessonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        lessons.setLessons(newLessonList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Classroom \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setClassrooms(List\u003cClassroom\u003e classrooms) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.classrooms.setClassrooms(classrooms);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Sets {@code classroom} as the current classroom. */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setCurrentClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(classroom);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (hasClassroom(classroom)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            currentClassroom \u003d classrooms.get(classroom);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Gets the current classroom of the notebook. */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Classroom getCurrentClassroom() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (currentClassroom !\u003d null \u0026\u0026 hasClassroom(currentClassroom)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return currentClassroom;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return getFirstClassroom();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Gets the first classroom of the notebook. */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Classroom getFirstClassroom() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cClassroom\u003e classroomList \u003d classrooms.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (classroomList.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            currentClassroom \u003d new Classroom();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            currentClassroom \u003d classroomList.get(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return currentClassroom;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setClassroom(ReadOnlyClassroom classroom) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        currentClassroom.resetData(classroom);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if the notebook has the given classroom."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param classroom check whether this classroom is in the notebook."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return true if the notebook has the given classroom."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean hasClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(classroom);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return classrooms.contains(classroom);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds the classroom to the notebook."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param classroom classroom to add to notebook."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void addClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (classrooms.isEmpty()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            classrooms.add(classroom);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            setCurrentClassroom(classroom);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            classrooms.add(classroom);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Removes {@code key} from this {@code Notebook}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code key} must exist in the notebook."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void removeClassroom(Classroom key) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        classrooms.remove(key);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Gets the {@code classroom} from the notebook. */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Classroom getClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cClassroom\u003e classroomList \u003d getClassroomList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Classroom toCheck : classroomList) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (toCheck.getClassroomName().equals(classroom.getClassroomName())) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                return toCheck;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Student  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if the current classroom has the given student."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param student checks to see if this student is in the classroom."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return true if the classroom has the student."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return currentClassroom.hasStudent(student);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        currentClassroom.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Adds a specified student to the notebook. */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        currentClassroom.addStudent(student);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Deletes a specified student from the notebook. */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        currentClassroom.removeStudent(target);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Assignment  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if the current classroom has the given assignment."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param assignment checks to see if this assignment is in the classroom."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return true if the classroom has the assignment."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return currentClassroom.hasAssignment(assignment);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Deletes a specified assignment from the notebook. */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        currentClassroom.removeAssignment(target);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds an assignment to the current classroom."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param assignment to add to current classroom."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        currentClassroom.addAssignment(assignment);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireAllNonNull(target, editedAssignment);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        currentClassroom.setAssignment(target, editedAssignment);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Updates the assignments in the current classroom with the new student\u0027s name."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void updateAllAssignmentNamesWithName(String oldStudentName, String newStudentName) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(oldStudentName, newStudentName);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        currentClassroom.updateAllAssignmentNamesWithName(oldStudentName, newStudentName);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Display Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean isDisplayStudents() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return currentClassroom.isDisplayStudents();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void displayStudents() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        currentClassroom.displayStudents();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void displayAssignments() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        currentClassroom.displayAssignments();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Lesson \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds a lessons to the classroom."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * The lesson must not already exist in the classroom."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void addLesson(Lesson p) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        int day \u003d p.getDayIndex();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        UniqueLessonList dayList \u003d lessonLists.getDayList(day);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        dayList.add(p);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        lessons.add(p);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Returns true if another lesson in the list exists in the same period as lesson toCheck."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @param toCheck Lesson object."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean checkTimingExist(Lesson toCheck) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return lessons.checkTimingExist(toCheck);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if a lesson with the same identity as {@code lesson} exists in the classroom."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        int day \u003d lesson.getDayIndex();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        UniqueLessonList dayList \u003d lessonLists.getDayList(day);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return dayList.contains(lesson);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Removes {@code key} from this {@code Classroom}."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code key} must exist in the classroom."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void removeLesson(Lesson key) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        int day \u003d key.getDayIndex();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        UniqueLessonList dayList \u003d lessonLists.getDayList(day);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        dayList.remove(key);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        lessons.remove(key);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Replaces the given lesson {@code target} in the list with {@code editedLesson}."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code target} must exist in the classroom."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in the address"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(editedLesson);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (target.isSameDay(editedLesson)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            int day \u003d target.getDayIndex();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            UniqueLessonList dayList \u003d lessonLists.getDayList(day);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            dayList.setLesson(target, editedLesson);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            removeLesson(target);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            addLesson(editedLesson);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Replaces the contents of the lesson list with {@code unique lesson lists}."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setAllLessons(List\u003cUniqueLessonList\u003e lessons) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.lessonLists.setLessons(lessons);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Replaces the contents of the lesson list with {@code lessons}."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.lessons.setLessons(lessons);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Classroom}."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ObservableList\u003cClassroom\u003e getClassroomList() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return classrooms.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Lesson}."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return lessons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code UniqueLessonList}."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ObservableList\u003cUniqueLessonList\u003e getLessonWeekList() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return lessonLists.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Utility Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (!(obj instanceof Notebook)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Notebook other \u003d (Notebook) obj;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return classrooms.equals(other.classrooms)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 lessonLists.equals(other.lessonLists);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Xelyion": 142,
      "sheryltay28": 48,
      "weikiat97": 170
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyNotebook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Unmodifiable view of a notebook."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public interface ReadOnlyNotebook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns an unmodifiable view of the classrooms list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * This list will not contain any duplicate classrooms."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ObservableList\u003cClassroom\u003e getClassroomList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns the current classroom in the notebook."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    Classroom getCurrentClassroom();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns an unmodifiable view of the lessons list in the week."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * This list will not contain any duplicate lessons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ObservableList\u003cUniqueLessonList\u003e getLessonWeekList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns an unmodefiable view of the lessons list in the day."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * This list will not contain any duplicate lessons.."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 4,
      "weikiat97": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    Path getNotebookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Path notebookFilePath \u003d Paths.get(\"data\" , \"notebook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        setNotebookFilePath(newUserPrefs.getNotebookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Path getNotebookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return notebookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setNotebookFilePath(Path notebookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(notebookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.notebookFilePath \u003d notebookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u0026\u0026 notebookFilePath.equals(o.notebookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return Objects.hash(guiSettings, notebookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + notebookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/Assignment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Represents an assignment in the classroom."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class Assignment {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Assignment names should be alphanumeric\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public final AssignmentName assignmentName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public final AssignmentGrades assignmentGrades;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public final AssignmentDeadline assignmentDeadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Constructs a {@code Assignment}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param assignmentName A valid assignment name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Assignment(AssignmentName assignmentName, AssignmentDeadline assignmentDeadline) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(assignmentName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignmentName \u003d assignmentName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.assignmentGrades \u003d new AssignmentGrades();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignmentDeadline \u003d assignmentDeadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Initialises the grades for students as \"Not submitted\" for new assignments."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param studentNames students name to serve as keys during initialisation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void initialiseGrades(List\u003cString\u003e studentNames) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(studentNames);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (String studentName : studentNames) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            assignmentGrades.addOneUncompletedStudentGrade(studentName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Gets the AssignmentName."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return AssignmentName of the assignment."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public AssignmentName getAssignmentName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return this.assignmentName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Gets the AssignmentDeadline"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return AssignmentDeadline of the assignment."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public AssignmentDeadline getAssignmentDeadline() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this.assignmentDeadline;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Gets the AssignmentGrades"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return AssignmentGrades of the assignment."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Map\u003cString, String\u003e getGrades() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return this.assignmentGrades.getGrades();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses a {@code List\u003cString\u003e grades} and {@code List\u003cString\u003e newGrades} to update assignmentGrades."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setGrades(List\u003cString\u003e studentNames, List\u003cString\u003e newGrades) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireAllNonNull(studentNames, newGrades);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.assignmentGrades.setGrades(studentNames, newGrades);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        checkCompletion();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Checks if the given assignment is completed from the assignment grades map."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private void checkCompletion() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        isCompleted \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (String value : getGrades().values()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            if (value.equals(\"Not submitted.\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                isCompleted \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses a {@code String studentName} into an {@code Assignment}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Returns the updated assignment after adding key-value pair for key: studentName."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Value is set to \"Not submitted\" as student was added before assignment was graded."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void addNewStudentGrade (String studentName) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentGrades.addOneUncompletedStudentGrade(studentName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        setGrades(this.namesStringListFromGrades(), this.marksStringListFromGrades());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses a {@code String studentName} into an {@code Assignment}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Returns the updated assignment after adding key-value pair for key: studentName."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Value is set to \"Late to the party\" as student was added after assignment was graded."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void addOneStudentGrade (String studentName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentGrades.addOneCompletedStudentGrade(studentName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        setGrades(this.namesStringListFromGrades(), this.marksStringListFromGrades());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses a {@code String studentName} into an {@code Assignment}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Returns the updated assignment after removing key-value pair for key: studentName."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Assignment deleteOneStudentGrade (String studentName) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentGrades.deleteOneStudentGrade(studentName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment outputAssignment \u003d new Assignment (this.assignmentName, this.assignmentDeadline);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        outputAssignment.setGrades(this.namesStringListFromGrades(), this.marksStringListFromGrades());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return outputAssignment;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public List\u003cString\u003e marksStringListFromGrades() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return assignmentGrades.marksStringListFromGrades();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public List\u003cString\u003e namesStringListFromGrades() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return assignmentGrades.namesStringListFromGrades();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public String gradesMapToString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return assignmentGrades.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Returns true if both assignments of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * This defines a weaker notion of equality between two assignments."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean isSameAssignment(Assignment otherAssignment) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (otherAssignment \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return otherAssignment !\u003d null"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                   \u0026\u0026 otherAssignment.getAssignmentName().equals(getAssignmentName());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Returns true if both assignments have the same identity and data fields."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * This defines a stronger notion of equality between two assignments."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (!(other instanceof Assignment)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Assignment otherAssignment \u003d (Assignment) other;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return otherAssignment.getAssignmentName().equals(getAssignmentName())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u0026\u0026 otherAssignment.getAssignmentDeadline().equals(getAssignmentDeadline())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u0026\u0026 otherAssignment.getGrades().equals(getGrades());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        output +\u003d this.getAssignmentName();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        output +\u003d this.getAssignmentDeadline();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (this.isCompleted) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            output +\u003d \"\\nCompleted: \";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            output +\u003d \"\\nNot Completed: \";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        output +\u003d \"\\n\" + this.assignmentGrades;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setCompletionStatus(boolean isCompleted) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 15,
      "Xelyion": 116,
      "weikiat97": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/AssignmentComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Sorts the assignment list by chronological deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AssignmentComparator implements Comparator\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public int compare(Assignment assignment1, Assignment assignment2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (assignment1.getAssignmentDeadline().getAssignmentDeadlineCalendar()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .before(assignment2.getAssignmentDeadline().getAssignmentDeadlineCalendar())) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/AssignmentDeadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents an assignment\u0027s deadline in the classroom."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AssignmentDeadline {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \"There is no such date / time! Input should be in dd/MM/yyyy HHmm format.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DEADLINE_CONSTRAINT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \"Deadline inputted should not be before the current system time.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public final String assignmentDeadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Calendar assignmentDeadlineCalendar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Constructs a {@code AssignmentDeadline}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param assignmentDeadline A valid assignment deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public AssignmentDeadline(String assignmentDeadline) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(assignmentDeadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        checkArgument(isValidAssignmentDeadline(assignmentDeadline), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignmentDeadline \u003d assignmentDeadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignmentDeadlineCalendar \u003d setAssignmentDeadlineCalendar();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Gets the AssignmentDeadline in Calendar format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return Calendar representing the assignment deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Calendar getAssignmentDeadlineCalendar() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this.assignmentDeadlineCalendar;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if a given string is a valid assignment deadline."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static boolean isValidAssignmentDeadline(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sdf.setLenient(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            sdf.parse(test);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Formats the assignment deadline into a Calendar format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return Calendar representation of the assignment deadline."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Calendar setAssignmentDeadlineCalendar() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            date \u003d sdf.parse(assignmentDeadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Calendar assignmentDeadlineCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assignmentDeadlineCalendar.setTime(date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return assignmentDeadlineCalendar;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof AssignmentDeadline // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 assignmentDeadline.equals(((AssignmentDeadline) other).assignmentDeadline)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return assignmentDeadline.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMMM yyyy h:mm a\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return formatter.format(assignmentDeadlineCalendar.getTime());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/AssignmentGrades.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents an AssignmentGrades in the classroom."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGrade(String[])}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class AssignmentGrades {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \"Marks should only contain numeric characters between 0 to 100, and it should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String SINGLE_ASSIGNMENT_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \"There should be only one mark when editing an individual student\u0027s marks, which should only contain \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    + \"numeric characters between 0 to 100, and it should not be blank\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"100|\\\\d{1,2}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private HashMap\u003cString, String\u003e assignmentGrades;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Constructs a {@code AssignmentGrades}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public AssignmentGrades() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentGrades \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Map\u003cString, String\u003e getGrades() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return this.assignmentGrades;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses a {@code List\u003cString\u003e grades} and {@code List\u003cInteger\u003e newGrades} to update assignmentGrades."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * A LinkedHashMap is created with key-value pairs, with keys from grades and values from newGrades"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setGrades(List\u003cString\u003e studentNames, List\u003cString\u003e newGrades) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        //Add new grades"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (int i \u003d 0; i \u003c studentNames.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            String studentName \u003d studentNames.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            String studentGrade \u003d newGrades.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            if (assignmentGrades.containsKey(studentName)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                assignmentGrades.replace(studentName, studentGrade);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                assignmentGrades.put(studentName, studentGrade);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignmentGrades.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses a {@code String studentName}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds a key-value pair with key: studentName, value: \"Not submitted.\"."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void addOneUncompletedStudentGrade (String studentName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentGrades.put(studentName, \"Not submitted.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses a {@code String studentName}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Adds the key-value pair for key: studentName, value: Late to the party."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void addOneCompletedStudentGrade (String studentName) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentGrades.put(studentName, \"Late to the party.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Parses a {@code String studentName}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Removes the key-value pair for key: studentName."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void deleteOneStudentGrade (String studentName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentGrades.remove(studentName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Returns a {@code List\u003cString\u003e names} created from keys in LinkedHashMap assignmentGrades"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public List\u003cString\u003e namesStringListFromGrades() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cString\u003e names \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        names.addAll(assignmentGrades.keySet());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return names;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns a {@code List\u003cString\u003e marks} created from values in LinkedHashMap assignmentGrades"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public List\u003cString\u003e marksStringListFromGrades() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cString\u003e marks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (String key:assignmentGrades.keySet()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            marks.add(assignmentGrades.get(key));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return marks;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if a given array of string is a valid AssignmentGrades map."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static boolean isValidGrade(String[] marks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (String mark: marks) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            if (!mark.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if a given string is a valid AssignmentGrades map."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static boolean isValidGrade(String mark) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!mark.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        String gradeOutput \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cString\u003e names \u003d this.namesStringListFromGrades();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cString\u003e marks \u003d this.marksStringListFromGrades();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (int i \u003d 0; i \u003c names.size(); i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            String name \u003d names.get(i);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            String mark \u003d marks.get(i);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            gradeOutput +\u003d name + \": \" + mark + \"\\n\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return gradeOutput;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Xelyion": 114,
      "weikiat97": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/AssignmentName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents an assignment\u0027s name in the classroom."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAssignmentName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AssignmentName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \"Assignment names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public final String assignmentName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Constructs a {@code AssignmentName}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param assignmentName A valid assignment name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public AssignmentName(String assignmentName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(assignmentName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        checkArgument(isValidAssignmentName(assignmentName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.assignmentName \u003d assignmentName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if a given string is a valid assignment name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static boolean isValidAssignmentName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return assignmentName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof AssignmentName // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u0026\u0026 assignmentName.equals(((AssignmentName) other).assignmentName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return assignmentName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 5,
      "weikiat97": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/AssignmentNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Tests that an {@code Assignment}\u0027s {@code AssignmentName} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AssignmentNameContainsKeywordsPredicate implements Predicate\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public AssignmentNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean test(Assignment assignment) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(assignment.getAssignmentName().toString(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof AssignmentNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 keywords.equals(((AssignmentNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/UniqueAssignmentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A list of assignments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A assignment is considered unique by comparing using {@code Assignment#isSameAssignment(assignment)}. As such, adding"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * and updating of assignments uses assignment#isSameassignment(assignment) for equality so as to ensure that the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * assignment being added or updated is unique in terms of identity in the UniqueAssignmentList. However, the removal of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * a assignment uses Assignment#equals(Object) so as to ensure that the assignment with exactly the same fields will be"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * @see Assignment#isSameAssignment(Assignment)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class UniqueAssignmentList implements Iterable\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final ObservableList\u003cAssignment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if the list contains an equivalent assignment as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean contains(Assignment toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAssignment);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds a assignment to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The assignment must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void add(Assignment toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.sort(new AssignmentComparator());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the assignment {@code target} in the list with {@code editedAssignment}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as another existing assignment in the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireAllNonNull(target, editedAssignment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (!target.isSameAssignment(editedAssignment) \u0026\u0026 contains(editedAssignment)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        internalList.set(index, editedAssignment);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.sort(new AssignmentComparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Removes the equivalent assignment from the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The assignment must exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void remove(Assignment toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new AssignmentNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.sort(new AssignmentComparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setAssignments(UniqueAssignmentList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.sort(new AssignmentComparator());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the contents of this list with {@code assignments}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code assignments} must not contain duplicate assignments."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setAssignments(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(assignments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!assignmentsAreUnique(assignments)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new DuplicateAssignmentException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.setAll(assignments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.sort(new AssignmentComparator());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public ObservableList\u003cAssignment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Iterator\u003cAssignment\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                   || (other instanceof UniqueAssignmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                           \u0026\u0026 internalList.equals(((UniqueAssignmentList) other).internalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if {@code assignments} contains only unique assignments."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private boolean assignmentsAreUnique(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (int i \u003d 0; i \u003c assignments.size() - 1; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            for (int j \u003d i + 1; j \u003c assignments.size(); j++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                if (assignments.get(i).isSameAssignment(assignments.get(j))) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public String getLength() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return Integer.toString(internalList.size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Xelyion": 123,
      "weikiat97": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/AssignmentNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Signals that the operation is unable to find the specified assignment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class AssignmentNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/assignment/exceptions/DuplicateAssignmentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.model.assignment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Signals that the operation will result in duplicate Assignments (Assignments are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * if they have the same name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class DuplicateAssignmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/classroom/Classroom.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.UniqueAssignmentList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Wraps all data at the classroom level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class Classroom implements ReadOnlyClassroom {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private String classroomName \u003d \"My First Classroom\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final UniqueAssignmentList assignments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private boolean isDisplayStudents \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignments \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Classroom() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Classroom(String classroomName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        setClassroomName(classroomName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Creates an Classroom using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Classroom(ReadOnlyClassroom toBeCopied) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Resets the existing data of this {@code Classroom} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void resetData(ReadOnlyClassroom newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        setClassroomName(newData.getClassroomName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        setAssignments(newData.getAssignmentList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //// classroom-level operations."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setClassroomName(String name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.classroomName \u003d name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public String getClassroomName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return this.classroomName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public String getStudentLength() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return students.getLength();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public String getAssignmentLength() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return assignments.getLength();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Checks if the current classroom is set to display students. */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean isDisplayStudents() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this.isDisplayStudents;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Sets boolean isDisplayStudents to true, changes the view on UI. */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void displayStudents() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.isDisplayStudents \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Sets boolean isDisplayStudents to false, changes the view on UI. */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void displayAssignments() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.isDisplayStudents \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //// student-level operations."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code target} must exist in the classroom."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the classroom."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the classroom."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds a student to the classroom."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The student must not already exist in the classroom."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Removes {@code key} from this {@code Classroom}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code key} must exist in the classroom."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Gets list of the student names in String format."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return list of student names."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public List\u003cString\u003e getStudentNameList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cString\u003e toReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Student student : getStudentList()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            toReturn.add(student.getName().toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //// assignment-level operations."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the contents of the assignment list with {@code assignments}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Initialises the AssignmentGrades if it is empty."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code assignments} must not contain duplicate assignments."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setAssignments(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignments.setAssignments(assignments);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Assignment assignment : assignments) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (assignment.getGrades().isEmpty()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                assignment.initialiseGrades(getStudentNameList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Replaces the given assignment {@code target} in the list with {@code editedAssignment}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code target} must exist in the classroom."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The assignment identity of {@code editedAssignment} must not be the same as another existing assignment in the"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * classroom."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        requireNonNull(editedAssignment);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignments.setAssignment(target, editedAssignment);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if an assignment with the same identity as {@code assignment} exists in the classroom."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(assignment);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return assignments.contains(assignment);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds an assignment to the classroom."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The assignment must not already exist in the classroom."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void addAssignment(Assignment p) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assignments.add(p);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Removes {@code key} from this {@code Classroom}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code key} must exist in the classroom."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void removeAssignment(Assignment key) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignments.remove(key);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Updates all the assignments with the new edited student\u0027s name."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the unique lesson list with new assignments."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void updateAllAssignmentNamesWithName(String oldStudentName, String newStudentName) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(oldStudentName, newStudentName);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        System.out.println(oldStudentName);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cAssignment\u003e newAssignmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Assignment assignment : assignments) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            List\u003cString\u003e studentNames \u003d assignment.namesStringListFromGrades();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            List\u003cString\u003e grades \u003d assignment.marksStringListFromGrades();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            for (int i \u003d 0; i \u003c studentNames.size(); i++) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                if (studentNames.get(i).equals(oldStudentName)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    studentNames.set(i, newStudentName);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Assignment toAdd \u003d new Assignment(assignment.getAssignmentName(), assignment.getAssignmentDeadline());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            toAdd.setGrades(studentNames, grades);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            newAssignmentList.add(toAdd);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assignments.setAssignments(newAssignmentList);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return assignments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return classroomName;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if both classrooms of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * This defines a weaker notion of equality between two classrooms."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean isSameClassroom(Classroom otherClassroom) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (otherClassroom \u003d\u003d this) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return otherClassroom !\u003d null"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 otherClassroom.getClassroomName().equals(getClassroomName());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                || (other instanceof Classroom // instanceof handles nulls"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 classroomName.equals(((Classroom) other).classroomName)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 students.equals(((Classroom) other).students)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 assignments.equals(((Classroom) other).assignments));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return Objects.hash(students, assignments);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 57,
      "sheryltay28": 1,
      "weikiat97": 158,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/classroom/ReadOnlyClassroom.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Unmodifiable view of a classroom."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public interface ReadOnlyClassroom {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Gets the name of the classroom"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    String getClassroomName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Sets the name of the classroom"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    void setClassroomName(String classroomName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * returns unmodifiable view of assignment list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    ObservableList\u003cAssignment\u003e getAssignmentList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns an list of student names."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    List\u003cString\u003e getStudentNameList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 3,
      "Xelyion": 13,
      "weikiat97": 16,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/classroom/UniqueClassroomList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.exceptions.ClassroomNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.exceptions.DuplicateClassroomException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A list of classrooms that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A classroom is considered unique by comparing using {@code classroom#isSameclassroom(classroom)}. As such, adding"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * and updating of classrooms uses classroom#isSameclassroom(classroom) for equality so as to ensure that the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * classroom being added or updated is unique in terms of identity in the UniqueclassroomList. However, the removal of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * a classroom uses classroom#equals(Object) so as to ensure that the classroom with exactly the same fields will be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * @see Classroom#isSameClassroom(Classroom)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class UniqueClassroomList implements Iterable\u003cClassroom\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final ObservableList\u003cClassroom\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final ObservableList\u003cClassroom\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if the list contains an equivalent classroom as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean contains(Classroom toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameClassroom);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Gets a classroom from the list with a class name toGet in String representation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Classroom get(String toGet) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Classroom classroom : internalList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (classroom.getClassroomName().equals(toGet)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                return classroom;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Gets a classroom from the list with a class name toGet in Classroom representation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Classroom get(Classroom toGet) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(toGet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Classroom classroom : internalList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (classroom.getClassroomName().equals(toGet.getClassroomName())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                return classroom;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds a classroom to the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The classroom must not already exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void add(Classroom toAdd) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new DuplicateClassroomException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the classroom {@code target} in the list with {@code editedClassroom}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The classroom identity of {@code editedClassroom} must not be the same as another existing classroom in the"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassroom(Classroom target, Classroom editedClassroom) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(target, editedClassroom);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ClassroomNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!target.isSameClassroom(editedClassroom) \u0026\u0026 contains(editedClassroom)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new DuplicateClassroomException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.set(index, editedClassroom);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Removes the equivalent classroom from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The classroom must exist in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void remove(Classroom toRemove) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Classroom classroom : internalList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (classroom.getClassroomName().equals(toRemove.getClassroomName())) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                internalList.remove(classroom);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!found) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new ClassroomNotFoundException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassrooms(UniqueClassroomList replacement) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the contents of this list with {@code classrooms}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code classrooms} must not contain duplicate classrooms."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassrooms(List\u003cClassroom\u003e classrooms) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(classrooms);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!classroomsAreUnique(classrooms)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new DuplicateClassroomException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cClassroom\u003e listToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Classroom classroom : classrooms) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Classroom classroomToAdd \u003d new Classroom();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            classroomToAdd.resetData(classroom);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            listToAdd.add(classroomToAdd);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.setAll(listToAdd);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return internalList.isEmpty();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ObservableList\u003cClassroom\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Iterator\u003cClassroom\u003e iterator() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof UniqueClassroomList // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueClassroomList) other).internalList));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if {@code classrooms} contains only unique classrooms."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private boolean classroomsAreUnique(List\u003cClassroom\u003e classrooms) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (int i \u003d 0; i \u003c classrooms.size() - 1; i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c classrooms.size(); j++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                if (classrooms.get(i).isSameClassroom(classrooms.get(j))) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "weikiat97": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/model/classroom/exceptions/ClassroomNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.classroom.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Signals that the operation is unable to find the specified classroom."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class ClassroomNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/classroom/exceptions/DuplicateClassroomException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.classroom.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Signals that the operation will result in duplicate Classrooms (Classrooms are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class DuplicateClassroomException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public DuplicateClassroomException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        super(\"Operation would result in duplicate classrooms\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/ClassName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a Class name in the Classroom."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class ClassName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \"Class names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public final String className;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ClassName(String className) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(className);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        checkArgument(isValidClassName(className), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.className \u003d className;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if a given string is a valid class name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static boolean isValidClassName(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return className;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return className.hashCode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                || (other instanceof ClassName // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 className.equals(((ClassName) other).className)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "sheryltay28": 42,
      "weikiat97": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Lesson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a Lesson in the notebook."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final Time startTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final Time endTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final ClassName name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private boolean isRepeat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public Lesson(Time startTime, Time endTime, ClassName name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.isRepeat \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public Time getStartTime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public Time getEndTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ClassName getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean getIsRepeat() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return isRepeat;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public String getRepeatString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (isRepeat) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return \"Repeated weekly\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return \"Not repeated\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void setRepeat() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.isRepeat \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public int getDayIndex() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar date \u003d startTime.getTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        int index \u003d (date.get(Calendar.DAY_OF_WEEK) + 5) % 7;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Returns true if both lessons are on the same day of week."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @param otherLesson Lesson object to compare to."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean isSameDay(Lesson otherLesson) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return this.getDayIndex() \u003d\u003d otherLesson.getDayIndex();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Returns true if both lessons of the same name have both identity fields that are the same."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean isSameLesson(Lesson otherLesson) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (otherLesson \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return otherLesson !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 otherLesson.getStartTime().equals(this.getStartTime())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 otherLesson.getEndTime().equals(this.getEndTime())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 otherLesson.getName().equals(this.getName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * checks if Lesson time occurs during another Lesson time."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @param toCheck Lesson object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean checkTimingExist(Lesson toCheck) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar toCheckStart \u003d toCheck.getStartTime().getTime();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar toCheckEnd \u003d toCheck.getEndTime().getTime();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar thisStart \u003d this.getStartTime().getTime();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar thisEnd \u003d this.getEndTime().getTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        boolean equalStartTime \u003d toCheckStart.compareTo(thisStart) \u003d\u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        boolean equalEndTime \u003d toCheckEnd.compareTo(thisEnd) \u003d\u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        boolean startBetweenLesson \u003d toCheckStart.after(thisStart) \u0026\u0026 toCheckStart.before(thisEnd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        boolean endBetweenLesson \u003d toCheckEnd.after(thisStart) \u0026\u0026 toCheckEnd.before(thisEnd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return equalStartTime || equalEndTime || startBetweenLesson || endBetweenLesson;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if the end time is after the start time."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean endTimeIsAfterStartTime() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return endTime.getTime().after(startTime.getTime());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!(other instanceof Lesson)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return otherLesson.getStartTime().equals(this.getStartTime())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 otherLesson.getEndTime().equals(this.getEndTime())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 otherLesson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 otherLesson.getIsRepeat() \u003d\u003d this.getIsRepeat();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return Objects.hash(startTime, endTime, name, isRepeat);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        builder.append(getName() + \"\\n\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .append(getStartTime().getStringDay())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .append(\" \\nFrom: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .append(\" To: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .append(\" \" + getRepeatString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 129,
      "weikiat97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/LessonComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Sorts the lesson list by chronological start time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class LessonComparator implements Comparator\u003cLesson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public int compare(Lesson lesson1, Lesson lesson2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (lesson1.getStartTime().getTime()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .before(lesson2.getStartTime().getTime())) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/LessonContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Tests that a {@code Lesson}\u0027s keywords matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class LessonContainsKeywordsPredicate implements Predicate\u003cLesson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public LessonContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean test(Lesson lesson) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(lesson.toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                || (other instanceof LessonContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 keywords.equals(((LessonContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Time.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Represents a class time in the Classroom."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \"There is no such date / time! Input should be in dd/MM/yyyy HHmm format.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \"Time inputted should not be before the current system time.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\d]{1,2}\" + \"/\" + \"[\\\\d]{1,2}\" + \"/\" + \"[\\\\d]{2,4}\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            + \" \" + \"[\\\\d]{4}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final Calendar time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public Time(Calendar time) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Gets the time in Calendar format. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public Calendar getTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Gets the day in String format. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public String getStringDay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEEE\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return formatter.format(time.getTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Gets the time in String format. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public String getStringTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Gets the time in Json format. */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public String getJsonStringTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return formatter.format(time.getTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /** Returns if a given string is a valid time. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMMM yyyy h:mm a\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return formatter.format(time.getTime());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return time.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 time.equals(((Time) other).time)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "sheryltay28": 60,
      "weikiat97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/UniqueLessonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * A list of lessons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * A lesson is considered unique by comparing using {@code lesson#isSameLesson(lesson)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * updating of lessons uses lesson#isSameLesson(lesson) for equality so as to ensure that the lesson being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * or updated is unique in terms of identity in the UniqueLessonList. However, the removal of a lesson uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * lesson#equals(Object) so as to ensure that the lesson with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * @see Lesson#isSameLesson(Lesson)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class UniqueLessonList implements Iterable\u003cLesson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Returns true if the list contains an equivalent lesson as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean contains(Lesson toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameLesson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Adds a lesson to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * The lesson must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void add(Lesson toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.sort(new LessonComparator());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * checks if there exists a lesson during the time period of lesson toCheck."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @param toCheck Lesson object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean checkTimingExist(Lesson toCheck) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            Lesson lesson \u003d internalList.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            if (lesson.checkTimingExist(toCheck)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            } else if (toCheck.checkTimingExist(lesson)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Replaces the lesson {@code target} in the list with {@code editedLesson}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!target.isSameLesson(editedLesson) \u0026\u0026 contains(editedLesson)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        internalList.set(index, editedLesson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.sort(new LessonComparator());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Removes the equivalent lesson from the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * The lesson must exist in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void remove(Lesson toRemove) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.sort(new LessonComparator());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void setLessons(UniqueLessonList replacement) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.sort(new LessonComparator());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Replaces the contents of this list with {@code lessons}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireAllNonNull(lessons);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!lessonsAreUnique(lessons)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        internalList.setAll(lessons);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ObservableList\u003cLesson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public Iterator\u003cLesson\u003e iterator() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                || (other instanceof UniqueLessonList // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLessonList) other).internalList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Returns true if {@code lessons} contains only unique lesson."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private boolean lessonsAreUnique(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.size() - 1; i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            for (int j \u003d i + 1; j \u003c lessons.size(); j++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                if (lessons.get(i).isSameLesson(lessons.get(j))) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //@@author weikiat97"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if both assignments of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * This defines a weaker notion of equality between two assignments."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean isSameUniqueLesson(UniqueLessonList otherUniqueLessonList) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (otherUniqueLessonList \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return otherUniqueLessonList !\u003d null"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 otherUniqueLessonList.asUnmodifiableObservableList().equals(asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 149,
      "weikiat97": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/UniqueLessonWeekList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * List of all the lessons sorted by the days of the week."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class UniqueLessonWeekList implements Iterable\u003cUniqueLessonList\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final ObservableList\u003cUniqueLessonList\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final ObservableList\u003cUniqueLessonList\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public UniqueLessonList getDayList(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void add(UniqueLessonList uniqueLessonList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        internalList.add(uniqueLessonList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void setLessonLists(UniqueLessonWeekList replacement) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //@@author weikiat97"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the contents of this list with {@code lessons}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setLessons(List\u003cUniqueLessonList\u003e uniqueLessonLists) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(uniqueLessonLists);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cUniqueLessonList\u003e listToAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (UniqueLessonList uniqueLesson : uniqueLessonLists) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            UniqueLessonList uniqueLessonToAdd \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            uniqueLessonToAdd.setLessons(uniqueLesson.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            listToAdd.add(uniqueLessonToAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.setAll(listToAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ObservableList\u003cUniqueLessonList\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public Iterator\u003cUniqueLessonList\u003e iterator() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                || (other instanceof UniqueLessonWeekList // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLessonWeekList) other).internalList));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    //@@author weikiat97"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if {@code assignments} contains only unique assignments."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private boolean lessonsAreUnique(List\u003cUniqueLessonList\u003e uniqueLessons) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (int i \u003d 0; i \u003c uniqueLessons.size() - 1; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c uniqueLessons.size(); j++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                if (uniqueLessons.get(i).isSameUniqueLesson(uniqueLessons.get(j))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 53,
      "weikiat97": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/DuplicateLessonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Signals that the operation will result in duplicate Lessons (Lessons are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class DuplicateLessonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public DuplicateLessonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        super(\"Operation would result in duplicate lesson\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "sheryltay28": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/LessonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Signals that the operation is unable to find the specified lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class LessonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a Student\u0027s address in the classroom."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/DisplayPicture.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "//@@ author SebastianLie"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * Class to handle location of image on student card"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class DisplayPicture {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String imgFileName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final String defaultPicture \u003d \"/images/themyth.png\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public DisplayPicture() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        imgFileName \u003d defaultPicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Overloaded method to load"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * DisplayPicture"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public DisplayPicture(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        checkArgument(isValidFormat(fileName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        imgFileName \u003d fileName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * tries to load img and send it to another component"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return String of imgFilePath"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return imgFileName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getDefault() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return defaultPicture;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setNewImg(String newImg) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        imgFileName \u003d newImg;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setToDefault() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        imgFileName \u003d defaultPicture;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * asserts that picture chosen must be png"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static boolean isValidFormat(String file) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (file.length() \u003c 5) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int start \u003d file.length() - 3;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        boolean isFilePng \u003d file.substring(start).equals(\"png\") || file.substring(start).equals(\"jpg\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return isFilePng;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                || (other instanceof DisplayPicture // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                \u0026\u0026 imgFileName.equals(((DisplayPicture) other).imgFileName)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a Student\u0027s email in the classroom."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/MedicalCondition.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a MedicalCondition in the classroom."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidMedicalCondition(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class MedicalCondition {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Medical conditions should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Constructs a {@code MedicalCondition}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param medicalCondition A valid medical condition."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public MedicalCondition(String medicalCondition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(medicalCondition);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        checkArgument(isValidMedicalCondition(medicalCondition), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        value \u003d medicalCondition;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if a given string is a valid medical condition."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static boolean isValidMedicalCondition(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof MedicalCondition // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 value.equals(((MedicalCondition) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a Student\u0027s name in the classroom."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2,
      "weikiat97": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/ParentPhone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a Student\u0027s parent\u0027s phone number in the classroom."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidParentPhone(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class ParentPhone {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \"Parent phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Constructs a {@code ParentPhone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param parentPhone A valid parent phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ParentPhone(String parentPhone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(parentPhone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        checkArgument(isValidParentPhone(parentPhone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        value \u003d parentPhone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static boolean isValidParentPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof ParentPhone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 value.equals(((ParentPhone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a Student\u0027s phone number in the classroom."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidParentPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        checkArgument(isValidParentPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static boolean isValidParentPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 5,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Student.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a Student in the classroom."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private DisplayPicture displayPicture;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final ParentPhone parentPhone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final MedicalCondition medicalCondition;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Student(Name name, Phone phone, Email email, ParentPhone parentPhone, Address address,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                   DisplayPicture displayPicture, MedicalCondition medicalCondition, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        requireAllNonNull(name, parentPhone, phone, email, address, medicalCondition, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.parentPhone \u003d parentPhone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.medicalCondition \u003d medicalCondition;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.displayPicture \u003d displayPicture;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * overloaded method for backwards"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * compatibility for older code without displaypic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param parentPhone"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param address"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param medicalCondition"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Student(Name name, Phone phone, Email email, ParentPhone parentPhone, Address address,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    MedicalCondition medicalCondition, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(name, parentPhone, phone, email, address, medicalCondition, tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.parentPhone \u003d parentPhone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.medicalCondition \u003d medicalCondition;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.displayPicture \u003d new DisplayPicture();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ParentPhone getParentPhone() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return parentPhone;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public MedicalCondition getMedicalCondition() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return medicalCondition;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getDisplayPictureFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return displayPicture.getFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getDefaultDisplayPicture() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return displayPicture.getDefault();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Setter for displaypic"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param newFile"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setDisplayPicture(String newFile) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        displayPicture.setNewImg(newFile);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 otherStudent.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 otherStudent.getParentPhone().equals(getParentPhone())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 otherStudent.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 otherStudent.getMedicalCondition().equals(getMedicalCondition())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                \u0026\u0026 otherStudent.getDisplayPictureFilePath().equals(getDisplayPictureFilePath());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return Objects.hash(name, phone, email, parentPhone, address, medicalCondition, tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .append(\" Parent\u0027s Phone: \")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .append(getParentPhone())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .append(\" Medical Conditions(s): \")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .append(getMedicalCondition())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 43,
      "weikiat97": 39,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/UniqueStudentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * updating of students uses Student#isSameStudent(Student) for equality so as to ensure that the student being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * or updated is unique in terms of identity in the UniqueStudentList. However, the removal of a student uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Student#equals(Object) so as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public String getLength() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return Integer.toString(internalList.size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 4,
      "weikiat97": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a Tag in the classroom."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.ClassName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.MedicalCondition;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.ParentPhone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Contains utility methods for populating {@code Classroom} with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Student[] getSampleStudents4E7() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@gmail.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"98103329\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"Sinus\"), getTagSet(\"English REP\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@gmail.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"88210392\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"Asthma\"), getTagSet(\"Math REP\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@gmail.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"91836192\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"Heart Attack\"), getTagSet(\"Misbehaves a lot\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@gmail.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"88839201\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"Pimples\"), getTagSet(\"Likes to go toilet\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@hotmail.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"98011257\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"NIL\"), getTagSet(\"Cannot sit next to Alex\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@msn.com\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"98710394\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"Arthritis\"), getTagSet(\"Class Monitor\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Student[] getSampleStudents2E6() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Alexandra Chin\"), new Phone(\"93810385\"), new Email(\"alexandrachin@hotmail.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"93185033\"), new Address(\"Blk 39 Hougang Street 16, #06-20\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"NIL\"), getTagSet(\"PE REP\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Benjamin Xu\"), new Phone(\"93260711\"), new Email(\"benjaminxu@gmail.com\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"95821112\"), new Address(\"Blk 16 Jurong West Gardens, #07-18\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"Asthma\"), getTagSet()),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Crystal Tan\"), new Phone(\"98802194\"), new Email(\"crystal@gmail.com\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"93333333\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"Asthma\"), getTagSet())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Student[] getSampleStudents3E8() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Cindy Chan\"), new Phone(\"83019928\"), new Email(\"cindychan@gmail.com\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"98019211\"), new Address(\"Blk 14 Tampinese Street 69, #12-40\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"NIL\"), getTagSet(\"Math REP\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Dominic Ng\"), new Phone(\"98128401\"), new Email(\"domdom@hotmail.com\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"99112830\"), new Address(\"Blk 14 Jurong West Avenue 3, #06-18\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"Asthma\"), getTagSet()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Genna Lim\"), new Phone(\"91830511\"), new Email(\"gennarox@gmail.com\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"91830511\"), new Address(\"Blk 16 Yishun Street 14, #13-04\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"Sinus\"), getTagSet(\"Likes to eat her pencil\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Sandra Sim\"), new Phone(\"91120009\"), new Email(\"sandra@gmail.com\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"81125252\"), new Address(\"Blk 801 Clementi Street 16, #02-46\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"Allergic to nuts\"), getTagSet(\"Likes to eat nuts\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Student(new Name(\"Xavier Lim\"), new Phone(\"91820112\"), new Email(\"xavierdaman@gmail.com\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new ParentPhone(\"98019304\"), new Address(\"Blk 69 Jurong East Street 2, #14-65\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    new MedicalCondition(\"NIL\"), getTagSet(\"Cannot sit next to Sandra\"))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Classroom[] getSampleClassrooms() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new Classroom[] {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                getSampleClassroom4E7(), getSampleClassroom2E6(), getSampleClassroom3E8()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Classroom getSampleClassroom4E7() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Classroom sampleClassroom \u003d new Classroom();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sampleClassroom.setClassroomName(\"4E7\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Student sampleStudent : getSampleStudents4E7()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            sampleClassroom.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Assignment sampleAssignment : getSampleAssignments4E7()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            sampleClassroom.addAssignment(sampleAssignment);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return sampleClassroom;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Classroom getSampleClassroom2E6() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Classroom sampleClassroom \u003d new Classroom();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sampleClassroom.setClassroomName(\"2E6\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Student sampleStudent : getSampleStudents2E6()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            sampleClassroom.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Assignment sampleAssignment : getSampleAssignments2E6()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            sampleClassroom.addAssignment(sampleAssignment);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return sampleClassroom;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Classroom getSampleClassroom3E8() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Classroom sampleClassroom \u003d new Classroom();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sampleClassroom.setClassroomName(\"3E8\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Student sampleStudent : getSampleStudents3E8()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            sampleClassroom.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Assignment sampleAssignment : getSampleAssignments3E8()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            sampleClassroom.addAssignment(sampleAssignment);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return sampleClassroom;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static Lesson[] getSampleLessons() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar monStartCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        monStartCalendar.set(2020, 0, 6, 12, 0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar monEndCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        monEndCalendar.set(2020, 0, 6, 13, 0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar wedStartCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        wedStartCalendar.set(2020, 0, 8, 12, 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar wedEndCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        wedEndCalendar.set(2020, 0, 8, 13, 0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar friStartCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        friStartCalendar.set(2020, 0, 10, 12, 0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar friEndCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        friEndCalendar.set(2020, 0, 10, 13, 0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Calendar monStartCalendar2 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        monStartCalendar2.set(2020, 0, 6, 15, 0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Calendar monEndCalendar2 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        monEndCalendar2.set(2020, 0, 6, 17, 0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Calendar tueStartCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        tueStartCalendar.set(2020, 0, 7, 8, 0);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Calendar tueEndCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        tueEndCalendar.set(2020, 0, 7, 9, 0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Calendar thuStartCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        thuStartCalendar.set(2020, 0, 9, 11, 0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Calendar thuEndCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        thuEndCalendar.set(2020, 0, 9, 12, 30);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Calendar satStartCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        satStartCalendar.set(2020, 0, 11, 8, 0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Calendar satEndCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        satEndCalendar.set(2020, 0, 12, 20, 30);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new Lesson[] {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            new Lesson(new Time(monStartCalendar), new Time(monEndCalendar), new ClassName(\"4E7 Math\")),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            new Lesson(new Time(wedStartCalendar), new Time(wedEndCalendar), new ClassName(\"2E6 English\")),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Lesson(new Time(friStartCalendar), new Time(friEndCalendar), new ClassName(\"3E8 Math\")),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Lesson(new Time(monStartCalendar2), new Time(monEndCalendar2), new ClassName(\"3E8 English\")),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Lesson(new Time(tueStartCalendar), new Time(tueEndCalendar), new ClassName(\"2E6 Math\")),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Lesson(new Time(thuStartCalendar), new Time(thuEndCalendar), new ClassName(\"4E7 English\")),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Lesson(new Time(satStartCalendar), new Time(satEndCalendar), new ClassName(\"4E7 Camp\"))"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        };"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static ReadOnlyNotebook getSampleNotebook() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Notebook sampleNotebook \u003d new Notebook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (Classroom sampleClassroom : getSampleClassrooms()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            sampleNotebook.addClassroom(sampleClassroom);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        for (Lesson sampleLesson : getSampleLessons()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            sampleNotebook.addLesson(sampleLesson);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return sampleNotebook;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Assignment[] getSampleAssignments4E7() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new Assignment[] {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Assignment(new AssignmentName(\"Math Assignment 1\"), new AssignmentDeadline(\"23/11/2019 1800\")),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Assignment(new AssignmentName(\"English Assignment 3\"), new AssignmentDeadline(\"29/11/2019 2359\")),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Assignment(new AssignmentName(\"Math Tutorial 3\"), new AssignmentDeadline(\"01/12/2019 1400\")),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Assignment(new AssignmentName(\"English Essay 1\"), new AssignmentDeadline(\"02/12/2019 2359\"))"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Assignment[] getSampleAssignments2E6() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new Assignment[] {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Assignment(new AssignmentName(\"Math Worksheet 2\"), new AssignmentDeadline(\"23/11/2019 1800\")),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Assignment(new AssignmentName(\"English Worksheet 1\"), new AssignmentDeadline(\"18/11/2019 2359\")),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Assignment(new AssignmentName(\"Math Assignment 1\"), new AssignmentDeadline(\"19/11/2019 1400\"))"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Assignment[] getSampleAssignments3E8() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new Assignment[] {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Assignment(new AssignmentName(\"Math Assignment 3\"), new AssignmentDeadline(\"23/11/2019 1900\")),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Assignment(new AssignmentName(\"English Essay 4\"), new AssignmentDeadline(\"29/11/2019 2359\")),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new Assignment(new AssignmentName(\"English Tutorial 2\"), new AssignmentDeadline(\"19/11/2019 1400\"))"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 9,
      "sheryltay28": 26,
      "weikiat97": 151,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAssignment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Jackson-friendly version of {@link Assignment}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class JsonAdaptedAssignment {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Assignment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final String assignmentName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final String assignmentDeadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final List\u003cString\u003e names \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final List\u003cString\u003e marks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Constructs a {@code JsonAdaptedAssignment} with the given {@code assignmentName}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public JsonAdaptedAssignment(@JsonProperty(\"assignmentName\") String assignmentName,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                                 @JsonProperty(\"assignmentDeadline\") String assignmentDeadline,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                 @JsonProperty(\"studentNames\") List\u003cString\u003e names,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                 @JsonProperty(\"studentMarks\") List\u003cString\u003e marks,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                 @JsonProperty(\"completionStatus\") boolean isCompleted) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignmentName \u003d assignmentName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignmentDeadline \u003d assignmentDeadline;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (names !\u003d null \u0026\u0026 marks !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            this.names.addAll(names);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            this.marks.addAll(marks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Converts a given {@code Assignment} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public JsonAdaptedAssignment(Assignment source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentName \u003d source.getAssignmentName().assignmentName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assignmentDeadline \u003d source.getAssignmentDeadline().assignmentDeadline;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        names.addAll(source.namesStringListFromGrades());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        marks.addAll(source.marksStringListFromGrades());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        isCompleted \u003d source.isCompleted();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Converts this Jackson-friendly adapted assignment object into the model\u0027s {@code Assignment} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Assignment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (assignmentName \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    AssignmentName.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!AssignmentName.isValidAssignmentName(assignmentName)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new IllegalValueException(AssignmentName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final AssignmentName modelAssignmentName \u003d new AssignmentName(assignmentName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (assignmentDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    AssignmentDeadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!AssignmentDeadline.isValidAssignmentDeadline(assignmentDeadline)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new IllegalValueException(AssignmentDeadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final AssignmentDeadline modelAssignmentDeadline \u003d new AssignmentDeadline(assignmentDeadline);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment newAssignment \u003d new Assignment(modelAssignmentName, modelAssignmentDeadline);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        newAssignment.setGrades(this.names, this.marks);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        newAssignment.setCompletionStatus(this.isCompleted);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return newAssignment;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 27,
      "weikiat97": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLesson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.ClassName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Jackson-friendly version of {@link Lesson}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class JsonAdaptedLesson {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Lesson\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final String className;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final String isRepeat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Constructs a {@code JsonAdaptedLesson} with the given lesson details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public JsonAdaptedLesson(@JsonProperty(\"className\") String className, @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                              @JsonProperty(\"endTime\") String endTime, @JsonProperty(\"isRepeat\") String isRepeat) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.className \u003d className;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.isRepeat \u003d isRepeat;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Converts a given {@code Lesson} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public JsonAdaptedLesson(Lesson source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        className \u003d source.getName().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        startTime \u003d source.getStartTime().getJsonStringTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        endTime \u003d source.getEndTime().getJsonStringTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        isRepeat \u003d source.getRepeatString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Converts this Jackson-friendly adapted lesson object into the model\u0027s {@code Lesson} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted lesson."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public Lesson toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (className \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                    ClassName.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!ClassName.isValidClassName(className)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new IllegalValueException(ClassName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        final ClassName modelClassName \u003d new ClassName(className);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName())));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!Time.isValidTime(startTime)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        final Time modelStartTime \u003d ParserUtil.parseTime(startTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (!Time.isValidTime(endTime)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        final Time modelEndTime \u003d ParserUtil.parseTime(endTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson lesson \u003d new Lesson(modelStartTime, modelEndTime, modelClassName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (isRepeat.equals(\"Repeated weekly\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            lesson.setRepeat();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return lesson;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.UploadPictureCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.DisplayPicture;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.MedicalCondition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.ParentPhone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final String parentPhone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final String medicalCondition;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final String displayPicture;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                              @JsonProperty(\"email\") String email, @JsonProperty(\"parentPhone\") String parentPhone,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                              @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                              @JsonProperty(\"displayPicture\") String displayPicture,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                              @JsonProperty(\"medicalCondition\") String medicalCondition,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.parentPhone \u003d parentPhone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.displayPicture \u003d displayPicture;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (medicalCondition !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.medicalCondition \u003d medicalCondition;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.medicalCondition \u003d \"NIL\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        parentPhone \u003d source.getParentPhone().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        medicalCondition \u003d source.getMedicalCondition().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        displayPicture \u003d source.getDisplayPictureFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            studentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!Phone.isValidParentPhone(phone)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (parentPhone \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    ParentPhone.class.getSimpleName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!ParentPhone.isValidParentPhone(parentPhone)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new IllegalValueException(ParentPhone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final ParentPhone modelParentPhone \u003d new ParentPhone(parentPhone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (displayPicture \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    DisplayPicture.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!DisplayPicture.isValidFormat(displayPicture)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new IllegalValueException(UploadPictureCommand.MESSAGE_WRONG_FORMAT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        final DisplayPicture modelDisplayPicture \u003d new DisplayPicture(displayPicture);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (medicalCondition \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    MedicalCondition.class.getSimpleName()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!MedicalCondition.isValidMedicalCondition(medicalCondition)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new IllegalValueException(MedicalCondition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final MedicalCondition modelMedicalCondition \u003d new MedicalCondition(medicalCondition);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(studentTags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return new Student(modelName, modelPhone, modelEmail, modelParentPhone, modelAddress,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                modelDisplayPicture, modelMedicalCondition, modelTags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 9,
      "weikiat97": 60,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonNotebookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * A class to access Notebook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class JsonNotebookStorage implements NotebookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonNotebookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public JsonNotebookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Path getNotebookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Optional\u003cReadOnlyNotebook\u003e readNotebook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return readNotebook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Similar to {@link #readNotebook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Optional\u003cReadOnlyNotebook\u003e readNotebook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Optional\u003cJsonSerializableNotebook\u003e jsonNotebook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                filePath, JsonSerializableNotebook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (jsonNotebook.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return Optional.of(jsonNotebook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void saveNotebook(ReadOnlyNotebook notebook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        saveNotebook(notebook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Similar to {@link #saveNotebook(ReadOnlyNotebook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void saveNotebook(ReadOnlyNotebook notebook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        requireNonNull(notebook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNotebook(notebook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Xelyion": 13,
      "weikiat97": 8,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableClassroom.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.ReadOnlyClassroom;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * An Immutable Classroom that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "@JsonRootName(value \u003d \"classroom\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "class JsonSerializableClassroom {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSIGNMENT \u003d \"Assignments list contains duplicate assignment(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private String classroomName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final List\u003cJsonAdaptedAssignment\u003e assignments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Constructs a {@code JsonSerializableClassroom} with the given students."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public JsonSerializableClassroom(@JsonProperty(\"classroomName\") String classroomName,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                     @JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                                     @JsonProperty(\"assignments\") List\u003cJsonAdaptedAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.classroomName \u003d classroomName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignments.addAll(assignments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Converts a given {@code ReadOnlyClassroom} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableClassroom}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public JsonSerializableClassroom(ReadOnlyClassroom source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        classroomName \u003d source.getClassroomName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assignments.addAll(source.getAssignmentList().stream().map(JsonAdaptedAssignment::new).collect(Collectors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Converts this classroom into the model\u0027s {@code Classroom} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Classroom toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Classroom classroom \u003d new Classroom();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        classroom.setClassroomName(classroomName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cString\u003e studentsName \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            if (classroom.hasStudent(student)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            classroom.addStudent(student);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            studentsName.add(student.getName().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (JsonAdaptedAssignment jsonAdaptedAssignment : assignments) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Assignment assignment \u003d jsonAdaptedAssignment.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            if (classroom.hasAssignment(assignment)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (!assignment.isCompleted()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                assignment.initialiseGrades(studentsName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            classroom.addAssignment(assignment);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return classroom;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 19,
      "weikiat97": 29,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableNotebook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * An Immutable Notebook that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "@JsonRootName(value \u003d \"notebook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "class JsonSerializableNotebook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLASSROOM \u003d \"Classroom list contains duplicate classrooms\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"Lessons list contains duplicate lesson(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final List\u003cJsonSerializableClassroom\u003e classrooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final List\u003cJsonAdaptedLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Constructs a {@code JsonSerializableNotebook} with the given students."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public JsonSerializableNotebook(@JsonProperty(\"classrooms\") List\u003cJsonSerializableClassroom\u003e classrooms,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                                    @JsonProperty(\"lessons\") List\u003cJsonAdaptedLesson\u003e lessons) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.classrooms.addAll(classrooms);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.lessons.addAll(lessons);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Converts a given {@code Notebook} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableNotebook}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public JsonSerializableNotebook(ReadOnlyNotebook source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        classrooms.addAll(source.getClassroomList().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                                  .map(JsonSerializableClassroom::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        lessons.addAll(source.getLessonWeekList().get(0).asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .stream().map(JsonAdaptedLesson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        lessons.addAll(source.getLessonWeekList().get(1).asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .stream().map(JsonAdaptedLesson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        lessons.addAll(source.getLessonWeekList().get(2).asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .stream().map(JsonAdaptedLesson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        lessons.addAll(source.getLessonWeekList().get(3).asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .stream().map(JsonAdaptedLesson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        lessons.addAll(source.getLessonWeekList().get(4).asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .stream().map(JsonAdaptedLesson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        lessons.addAll(source.getLessonWeekList().get(5).asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .stream().map(JsonAdaptedLesson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        lessons.addAll(source.getLessonWeekList().get(6).asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .stream().map(JsonAdaptedLesson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Converts this classroom into the model\u0027s {@code Notebook} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Notebook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Notebook notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (JsonSerializableClassroom jsc : classrooms) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            Classroom classroom \u003d jsc.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            if (notebook.hasClassroom(classroom)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CLASSROOM);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            notebook.addClassroom(classroom);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        for (JsonAdaptedLesson jsonAdaptedLesson : lessons) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                Lesson lesson \u003d jsonAdaptedLesson.toModelType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                if (notebook.hasLesson(lesson)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                    throw new IllegalValueException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                notebook.addLesson(lesson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return notebook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 57,
      "sheryltay28": 32,
      "weikiat97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/NotebookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Represents a storage for {@link ReadOnlyNotebook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public interface NotebookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    Path getNotebookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns Notebook data as a {@link ReadOnlyNotebook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    Optional\u003cReadOnlyNotebook\u003e readNotebook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @see #getNotebookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    Optional\u003cReadOnlyNotebook\u003e readNotebook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Saves the given {@link ReadOnlyNotebook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @param notebook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void saveNotebook(ReadOnlyNotebook notebook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @see #saveNotebook(ReadOnlyNotebook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void saveNotebook(ReadOnlyNotebook notebook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 36,
      "weikiat97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public interface Storage extends NotebookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    Path getNotebookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    Optional\u003cReadOnlyNotebook\u003e readNotebook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    void saveNotebook(ReadOnlyNotebook notebook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 2,
      "weikiat97": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Manages storage of Classroom data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private NotebookStorage notebookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public StorageManager(NotebookStorage notebookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.notebookStorage \u003d notebookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notebook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public Path getNotebookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return notebookStorage.getNotebookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Optional\u003cReadOnlyNotebook\u003e readNotebook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return readNotebook(notebookStorage.getNotebookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Optional\u003cReadOnlyNotebook\u003e readNotebook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return notebookStorage.readNotebook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void saveNotebook(ReadOnlyNotebook notebook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        saveNotebook(notebook, notebookStorage.getNotebookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void saveNotebook(ReadOnlyNotebook notebook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        notebookStorage.saveNotebook(notebook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 11,
      "weikiat97": 5,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignmentCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * An UI component that displays information of a {@code Assignment}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class AssignmentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Classroom level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public final Assignment assignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Label grades;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Label completionStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public AssignmentCard(Assignment assignment, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (assignment.isCompleted()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            completionStatus.setText(\"Completed\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            completionStatus.setText(\"Not Completed\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        name.setText(assignment.getAssignmentName().assignmentName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        deadline.setText(\"Deadline: \" + assignment.getAssignmentDeadline().assignmentDeadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        grades.setText(assignment.gradesMapToString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        AssignmentCard card \u003d (AssignmentCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                       \u0026\u0026 assignment.equals(card.assignment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 68,
      "weikiat97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AssignmentListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Panel containing the list of assignments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class AssignmentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final String FXML \u003d \"AssignmentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AssignmentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private ListView\u003cAssignment\u003e assignmentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public AssignmentListPanel(ObservableList\u003cAssignment\u003e assignmentList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentListView.setItems(assignmentList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentListView.setCellFactory(listView -\u003e new AssignmentListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Assignment} using a {@code AssignmentCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    class AssignmentListViewCell extends ListCell\u003cAssignment\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        protected void updateItem(Assignment assignment, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            super.updateItem(assignment, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            if (empty || assignment \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                setGraphic(new AssignmentCard(assignment, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 43,
      "weikiat97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AutoCompleteTextField.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.CommandMasterList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "//@@author SebastianLie"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * AutoComplete added to textfield."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * Listens to user input and populates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * drop down menu with existing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class AutoCompleteTextField extends TextField {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final SortedSet\u003cString\u003e entries;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ContextMenu entriesPopup;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final int maxEntries \u003d 10;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ArrayList\u003cString\u003e entriesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * The listener that will be added to textproperty"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * listens for changes in user input and suggests"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * commands accordingly, using getSuggestedCommands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ChangeListener\u003cString\u003e changeListener \u003d new ChangeListener\u003c\u003e() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        public void changed(ObservableValue\u003c? extends String\u003e observable, String oldValue, String newValue) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String enteredText \u003d getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            int maxCompareWordSize \u003d 6;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            int comparingCutoffPoint \u003d Math.min(enteredText.length(), maxCompareWordSize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String mainText \u003d enteredText.substring(0, comparingCutoffPoint);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (enteredText \u003d\u003d null || enteredText.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                entriesPopup.hide();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                ArrayList\u003cString\u003e filteredEntries \u003d getSuggestedCommands(mainText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                if (!filteredEntries.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    populatePopUp(filteredEntries, mainText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    if (!entriesPopup.isShowing()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        //position of popup"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        entriesPopup.show(AutoCompleteTextField.this, Side.BOTTOM, 0, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    // V impt, enables focus on 1st suggestion all the time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    entriesPopup.getSkin().getNode().lookup(\".menu-item\").requestFocus();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    entriesPopup.hide();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Initialises all commands and their usages,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * popup-menu as well as listener."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public AutoCompleteTextField() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.entries \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.entriesPopup \u003d new ContextMenu();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cString\u003e commandMasterList \u003d new ArrayList\u003cString\u003e(CommandMasterList.getCommandWords());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assert !commandMasterList.isEmpty() : \"Command master list cannot be empty!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        entries.addAll(commandMasterList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        initListener();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Adds listener to suggest commands."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void initListener() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        textProperty().addListener(changeListener);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        focusedProperty().addListener((observableValue, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            entriesPopup.hide();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        logger.info(\"Listening to textfield.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * shutsdown listener for autocomplete"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void shutDownListener() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        logger.info(\"Shutting down autocomplete listener for textfield....\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        textProperty().removeListener(changeListener);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * filter entries based on contains"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ArrayList\u003cString\u003e getSuggestedCommands(String enteredText) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ArrayList\u003cString\u003e suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        boolean commandContainsUserInput;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (String command : entries) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            commandContainsUserInput \u003d command.contains(enteredText);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (commandContainsUserInput) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                suggestedCommands.add(command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        suggestedCommands.sort(new SuggestionComparator(enteredText));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return suggestedCommands;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * comparator to decide which"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * suggested command to place first"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * in popup menu"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public class SuggestionComparator implements Comparator\u003cString\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        private final String enteredText;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        public SuggestionComparator(String enteredText) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            this.enteredText \u003d enteredText;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        public int compare(String command, String otherCommand) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            int inputIndexOfCommand \u003d command.indexOf(enteredText);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            int inputIndexOfOtherCommand \u003d otherCommand.indexOf(enteredText);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (inputIndexOfCommand \u003c inputIndexOfOtherCommand) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Populates contextmenu with suggestions from listener"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * if any suggestion is selected,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * set the textfield to suggestion."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param searchResults"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param searchRequest"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void populatePopUp(ArrayList\u003cString\u003e searchResults, String searchRequest) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assert !searchResults.isEmpty() : \"Search result must be non-empty in this method.\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (searchRequest.equals(\"\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cCustomMenuItem\u003e menuItems \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int numEntries \u003d Math.min(searchResults.size(), maxEntries);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        entriesList.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (int i \u003d 0; i \u003c numEntries; i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            final String mainText \u003d searchResults.get(i);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            boolean requestLongerThanResult \u003d searchRequest.length() \u003e\u003d mainText.length();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (mainText.equals(\"\") || requestLongerThanResult) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            CustomMenuItem popUpItem \u003d buildPopUpEntry(mainText, searchRequest);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            menuItems.add(popUpItem);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            setOnSelection(popUpItem, mainText);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cMenuItem\u003e popUpList \u003d entriesPopup.getItems();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        popUpList.clear();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        popUpList.addAll(menuItems);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Helper for populatePopup."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Builds highlighted portion of text"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * for each popup entry."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param mainText"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param portionToHighlight"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private CustomMenuItem buildPopUpEntry(String mainText, String portionToHighlight) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        entriesList.add(mainText);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Label entryLabel \u003d new Label();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        TextFlow highlightText \u003d Styles.buildTextFlow(mainText, portionToHighlight);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        entryLabel.setGraphic(highlightText);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        entryLabel.setPrefHeight(10);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        CustomMenuItem popupItem \u003d new CustomMenuItem(entryLabel, true);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return popupItem;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Upon selection,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * item text placed into textfield,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * cursor set to back of command and"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * popup menu closed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param popUpItem"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param mainText"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void setOnSelection(CustomMenuItem popUpItem, String mainText) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        popUpItem.setOnAction(actionEvent -\u003e {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            setText(mainText);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            positionCaret(mainText.length());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            entriesPopup.hide();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Helps to autocomplete on ctrl key press"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * sets cursor position at."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAutoCompleteResult() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // return if no suggestions"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (entriesList.isEmpty() || !entriesPopup.isShowing()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String result \u003d entriesList.get(0);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        setText(result);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        positionCaret(result.length());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        entriesPopup.hide();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Hide autocomplete results if needed."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void hidePopUp() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (entriesPopup.isShowing()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            entriesPopup.hide();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 230
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClassroomCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * An UI component that displays information of a {@code Classroom}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class ClassroomCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final String FXML \u003d \"ClassroomListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Classroom level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public final Classroom classroom;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Label studentLength;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Label assignmentLength;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public ClassroomCard(Classroom classroom) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.classroom \u003d classroom;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        name.setText(classroom.getClassroomName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        String numberOfStudents \u003d \"Number of students: \" + classroom.getStudentLength();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        String numberOfAssignments \u003d \"Number of assignments: \" + classroom.getAssignmentLength();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        studentLength.setText(numberOfStudents);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentLength.setText(numberOfAssignments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        ClassroomCard card \u003d (ClassroomCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return name.getText().equals(card.name.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                       \u0026\u0026 classroom.equals(card.classroom);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 63,
      "weikiat97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClassroomListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " * Panel containing the list of classrooms."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class ClassroomListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final String FXML \u003d \"ClassroomListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ClassroomListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Classroom currentClassroom;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private ListView\u003cClassroom\u003e classroomListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public ClassroomListPanel(ObservableList\u003cClassroom\u003e classroomList, Classroom currentClassroom) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        classroomListView.setItems(classroomList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.currentClassroom \u003d currentClassroom;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        classroomListView.setCellFactory(listView -\u003e new ClassroomListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Classroom} using a {@code ClassroomCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    class ClassroomListViewCell extends ListCell\u003cClassroom\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        protected void updateItem(Classroom classroom, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            super.updateItem(classroom, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            if (empty || classroom \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                if (classroom.getClassroomName() \u003d\u003d currentClassroom.getClassroomName()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    setGraphic(new CurrentClassroomCard(classroom).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    setGraphic(new ClassroomCard(classroom).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 50,
      "weikiat97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private History history \u003d new History();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private boolean isAutoCompleteOn \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private AutoCompleteTextField commandTextField;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assert commandTextField !\u003d null : \"Textfield must be initialised by now.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * links result display"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * so autocomplete feedback can be given to user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param resultDisplay"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void linkResultsDisplay(ResultDisplay resultDisplay) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assert resultDisplay !\u003d null : \"Result Display cannot be null!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.resultDisplay \u003d resultDisplay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String command \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (command.equals(\"exit\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                commandTextField.shutDownListener();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            history.sendToHistory(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            commandExecutor.execute(command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * handles all key presses"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * keycode of key pressed sent to keyPressed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void handleKeyPress() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandTextField.setOnKeyPressed(event -\u003e keyPressed(event.getCode()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    //@@author SebastianLie"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * handles keypresses for GUI commands, like history or autocomplete"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param keyCode"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void keyPressed(KeyCode keyCode) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (keyCode \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String previousCommand \u003d history.getPastCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                commandTextField.setText((previousCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                commandTextField.positionCaret(previousCommand.length());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } catch (NoSuchElementException ex) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                commandTextField.setText((\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (keyCode \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String nextCommand \u003d history.getNextCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                commandTextField.setText((nextCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                commandTextField.positionCaret(nextCommand.length());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } catch (NoSuchElementException ex) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                commandTextField.setText((\"\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (keyCode \u003d\u003d KeyCode.CONTROL) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (isAutoCompleteOn) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    commandTextField.setAutoCompleteResult();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    logger.info(\"Exception thrown from autocomplete.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                commandTextField.initListener();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                isAutoCompleteOn \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"AutoComplete feature turned on.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (keyCode \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (isAutoCompleteOn) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                commandTextField.hidePopUp();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                commandTextField.shutDownListener();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                isAutoCompleteOn \u003d false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"AutoComplete feature turned off.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 120,
      "weikiat97": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CurrentClassroomCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * An UI component that displays information of a {@code Classroom}, which is the current classroom."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class CurrentClassroomCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final String FXML \u003d \"CurrentClassroomCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Classroom level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public final Classroom classroom;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Label studentLength;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Label assignmentLength;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public CurrentClassroomCard(Classroom classroom) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        this.classroom \u003d classroom;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        name.setText(classroom.getClassroomName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        String numberOfStudents \u003d \"Number of students: \" + classroom.getStudentLength();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        String numberOfAssignments \u003d \"Number of assignments: \" + classroom.getAssignmentLength();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        studentLength.setText(numberOfStudents);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentLength.setText(numberOfAssignments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        CurrentClassroomCard card \u003d (CurrentClassroomCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return name.getText().equals(card.name.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                       \u0026\u0026 classroom.equals(card.classroom);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 63,
      "weikiat97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103-t14-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/History.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Class to support history feature for UI"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class History {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ArrayDeque\u003cString\u003e pastCommands \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ArrayDeque\u003cString\u003e nextCommands \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns next command in"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * sequence of user entered commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @throws NoSuchElementException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getNextCommand() throws NoSuchElementException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String nextCommand \u003d nextCommands.pop();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        pastCommands.push(nextCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return nextCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns previous command in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * sequence of user entered commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @throws NoSuchElementException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getPastCommand() throws NoSuchElementException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String pastCommand \u003d pastCommands.pop();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        nextCommands.push(pastCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return pastCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sends command to past command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * while maintaining order of commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void sendToHistory(String command) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        while (!nextCommands.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            pastCommands.push(nextCommands.pop());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        pastCommands.push(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 41,
      "weikiat97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javax.sound.sampled.AudioInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javax.sound.sampled.AudioSystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javax.sound.sampled.Clip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.ui.scheduler.Scheduler;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String ALERT_SOUND_PATH \u003d \"/alert.wav\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private AssignmentListPanel assignmentListPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private ClassroomListPanel classroomListPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private Classroom currentClassroom;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private ReminderListPanel monReminderListPanel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private ReminderListPanel tueReminderListPanel;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private ReminderListPanel wedReminderListPanel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private ReminderListPanel thurReminderListPanel;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private ReminderListPanel friReminderListPanel;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private ReminderListPanel satReminderListPanel;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private ReminderListPanel sunReminderListPanel;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private ListChangeListener\u003cLesson\u003e listener;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private TabPane lessonTabPanel;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private StackPane combinedListPanelPlaceholder;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private StackPane monReminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private StackPane tueReminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private StackPane wedReminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private StackPane thurReminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private StackPane friReminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private StackPane satReminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private StackPane sunReminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private StackPane assignmentListPanelPlaceholder;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private StackPane classroomListPanelPlaceholder;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private StackPane currentClassroomListPanelPlaceholder;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        listenToLesson();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        //studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assignmentListPanel \u003d new AssignmentListPanel(logic.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        //assignmentListPanelPlaceholder.getChildren().add(assignmentListPanel.getRoot());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        combinedListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        currentClassroom \u003d logic.getNotebook().getCurrentClassroom();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        classroomListPanel \u003d new ClassroomListPanel(logic.getClassroomList(), currentClassroom);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        classroomListPanelPlaceholder.getChildren().add(classroomListPanel.getRoot());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //reminderListPanel \u003d new ReminderListPanel(logic.getFilteredLessonList());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        createLessonTabs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getNotebookFilePath());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        commandBox.linkResultsDisplay(resultDisplay);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Creates the tabs that will separate lessons based on the days of the week."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void createLessonTabs() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ObservableList\u003cTab\u003e tabs \u003d lessonTabPanel.getTabs();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Tab mon \u003d tabs.get(0);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        monReminderListPanel \u003d new ReminderListPanel(logic.getFilteredLessonWeekList().get(0)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        monReminderListPanelPlaceholder.getChildren().add(monReminderListPanel.getRoot());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        mon.setContent(monReminderListPanelPlaceholder);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Tab tue \u003d tabs.get(1);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        tueReminderListPanel \u003d new ReminderListPanel(logic.getFilteredLessonWeekList().get(1)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        tueReminderListPanelPlaceholder.getChildren().add(tueReminderListPanel.getRoot());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        tue.setContent(tueReminderListPanelPlaceholder);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Tab wed \u003d tabs.get(2);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        wedReminderListPanel \u003d new ReminderListPanel(logic.getFilteredLessonWeekList().get(2)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        wedReminderListPanelPlaceholder.getChildren().add(wedReminderListPanel.getRoot());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        wed.setContent(wedReminderListPanelPlaceholder);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Tab thur \u003d tabs.get(3);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        thurReminderListPanel \u003d new ReminderListPanel(logic.getFilteredLessonWeekList().get(3)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        thurReminderListPanelPlaceholder.getChildren().add(thurReminderListPanel.getRoot());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        thur.setContent(thurReminderListPanelPlaceholder);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Tab fri \u003d tabs.get(4);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        friReminderListPanel \u003d new ReminderListPanel(logic.getFilteredLessonWeekList().get(4)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        friReminderListPanelPlaceholder.getChildren().add(friReminderListPanel.getRoot());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        fri.setContent(friReminderListPanelPlaceholder);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Tab sat \u003d tabs.get(5);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        satReminderListPanel \u003d new ReminderListPanel(logic.getFilteredLessonWeekList().get(5)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        satReminderListPanelPlaceholder.getChildren().add(satReminderListPanel.getRoot());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        sat.setContent(satReminderListPanelPlaceholder);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Tab sun \u003d tabs.get(6);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        sunReminderListPanel \u003d new ReminderListPanel(logic.getFilteredLessonWeekList().get(6)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        sunReminderListPanelPlaceholder.getChildren().add(sunReminderListPanel.getRoot());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        sun.setContent(sunReminderListPanelPlaceholder);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //logic.getFilteredLessonList().removeListener(listener);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentListPanel getStudentListPanel() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    //public ReminderListPanel getReminderListPanel() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    //return reminderListPanel;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public AssignmentListPanel getAssignmentListPanel() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        return assignmentListPanel;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    //@@author SebastianLie"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * opens filechooser and returns"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * path of file, if cancelled, throws"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * nullpointer exception"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @throws NullPointerException"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String openFileChooser() throws NullPointerException {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        FileChooser fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        File file \u003d fileChooser.showOpenDialog(primaryStage);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return file.toURI().toString();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    //@@author SebastianLie"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * checks if upload command called"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * adds name of file to command"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * filename: f/file:filepath"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param commandText"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return commandText"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String uploadCommandCheck(String commandText) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (commandText.length() \u003e 7 \u0026\u0026 commandText.substring(0, 6).equals(\"upload\")) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String filePath \u003d openFileChooser();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            commandText \u003d commandText + \" \" + \"f/\" + filePath;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return commandText;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            commandText \u003d uploadCommandCheck(commandText);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            updateStudentsAndAssignments();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (logic.isDisplayStudents()) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                combinedListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                combinedListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                combinedListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                combinedListPanelPlaceholder.getChildren().add(assignmentListPanel.getRoot());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            currentClassroom \u003d logic.getNotebook().getCurrentClassroom();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            classroomListPanel \u003d new ClassroomListPanel(logic.getClassroomList(), currentClassroom);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            classroomListPanelPlaceholder.getChildren().add(classroomListPanel.getRoot());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            logger.info(\"Null pointer exception.\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"Upload operation cancelled.\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Updates the window with the updated students and assignments."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void updateStudentsAndAssignments() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assignmentListPanel \u003d new AssignmentListPanel(logic.getFilteredAssignmentList());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        //combinedListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        //combinedListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        //assignmentListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        //assignmentListPanelPlaceholder.getChildren().add(assignmentListPanel.getRoot());"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    //@author sheryltay28"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * schedules a lesson."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param lesson Lesson object."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void createSchedule(Lesson lesson) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Scheduler scheduler \u003d new Scheduler(lesson);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        scheduler.scheduleLesson(new Runnable() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                logger.info(\"creating countdown\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                countDownAlert(\"You have a lesson\", lesson.toString());"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    //@author sheryltay28"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * method to add a listener to lesson observable list."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * whenever a lesson is added to the list, a scheduler is created."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void listenToLesson() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        logger.info(\"listening to lesson\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ObservableList\u003cLesson\u003e lessons \u003d logic.getFilteredLessonList();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.size(); i++) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Lesson lesson \u003d lessons.get(i);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            createSchedule(lesson);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        listener \u003d new ListChangeListener\u003cLesson\u003e() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            public void onChanged(Change\u003c? extends Lesson\u003e c) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                while (c.next()) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    if (c.wasAdded()) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        Object addedItem \u003d c.getAddedSubList().get(c.getAddedSubList().size() - 1);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        logger.info(\"creating scheduler\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        createSchedule((Lesson) addedItem);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        };"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        lessons.addListener(listener);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    //@@author SebastianLie"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * alert for scheduler."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * sets properties of alert then"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * plays sound file and shows alert dialog"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void countDownAlert(String reminderType, String reminderDetails) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    final Alert alert \u003d new Alert(Alert.AlertType.CONFIRMATION);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    alert.initOwner(getPrimaryStage());"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    //alert.initOwner(new Stage());"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    alert.setTitle(\"Reminder!\");"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    alert.setHeaderText(reminderType);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    alert.setContentText(reminderDetails);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    playSound();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    alert.show();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            });"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    //@@author SebastianLie"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * handles playing alert audio for scheduled alert."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * gets .wav file from resource folder as input stream,"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * then open and play."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void playSound() {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            InputStream inputStream \u003d this.getClass().getResourceAsStream(ALERT_SOUND_PATH);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            AudioInputStream audioStream \u003d AudioSystem.getAudioInputStream(inputStream);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Clip sound \u003d AudioSystem.getClip();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            sound.open(audioStream);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            sound.start();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 184,
      "Xelyion": 25,
      "sheryltay28": 102,
      "weikiat97": 8,
      "-": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * An UI component that displays information of a {@code Lesson}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class ReminderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Classroom level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private Label className;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ReminderCard(Lesson lesson, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        className.setText(lesson.getName().className);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        startTime.setText(lesson.getStartTime().getStringTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        endTime.setText(lesson.getEndTime().getStringTime());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        day.setText(lesson.getStartTime().getStringDay());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (!(other instanceof ReminderCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ReminderCard card \u003d (ReminderCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u0026\u0026 lesson.equals(card.lesson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 6,
      "Xelyion": 1,
      "sheryltay28": 14,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Panel containing the list of lessons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class ReminderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private ListView\u003cLesson\u003e reminderListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cLesson\u003e lessonList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        reminderListView.setItems(lessonList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Lesson} using a {@code ReminderCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cLesson\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        protected void updateItem(Lesson lesson, boolean empty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            super.updateItem(lesson, empty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            if (empty || lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                setGraphic(new ReminderCard(lesson, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 33,
      "sheryltay28": 11,
      "weikiat97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Classroom level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Label parentPhone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Label medicalCondition;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        phone.setText(\"(P): \" + student.getPhone().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        parentPhone.setText(\"(PP): \" + student.getParentPhone().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        address.setText(\"(A): \" + student.getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        email.setText(\"(E): \" + student.getEmail().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        medicalCondition.setText(\"(M): \" + student.getMedicalCondition().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Image displayImg \u003d new Image(student.getDisplayPictureFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        displayPicture.setImage(displayImg);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * method for reloading image when picture uploaded"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void reloadImage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Image img \u003d new Image(student.getDisplayPictureFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 13,
      "Xelyion": 2,
      "weikiat97": 21,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Styles.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "//@@author SebastianLie"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * Helps to highlight user input in the suggestions offered by autocomplete"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Styles {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Highlights a certain portion of text."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param text - string with text"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param textToHighlight - string to select in text"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @return - TextFlow"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static TextFlow buildTextFlow(String text, String textToHighlight) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        //(text.equals(\"\") \u0026\u0026 textToHighlight.equals(\"\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (text \u003d\u003d null || textToHighlight \u003d\u003d null || (text.equals(\"\") \u0026\u0026 textToHighlight.equals(\"\"))) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new IllegalArgumentException(\"Text cannot be null or empty!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String caseIndependent \u003d text.toLowerCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String caseIndependentToHighlight \u003d textToHighlight.toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assert caseIndependent.contains(caseIndependentToHighlight) : \"Text to highlight must be in original\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int highlightIndex \u003d caseIndependent.indexOf(caseIndependentToHighlight);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int highlightIndexWithinLength \u003d Math.max(0, highlightIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Text textBefore \u003d new Text(text.substring(0, highlightIndexWithinLength));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Text textAfter \u003d new Text(text.substring(highlightIndexWithinLength + textToHighlight.length()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Text textHighlighted \u003d new Text(text.substring(highlightIndexWithinLength,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                highlightIndexWithinLength + textToHighlight.length()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        textHighlighted.setFill(Color.LIGHTSKYBLUE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        textHighlighted.setFont(Font.font(\"Arial\", FontWeight.BOLD, 12));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return new TextFlow(textBefore, textHighlighted, textAfter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * The manager of the UI component.\\"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/notebook-icon.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Text text \u003d new Text();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 5,
      "weikiat97": 1,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/scheduler/Scheduler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.ui.scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.concurrent.ScheduledExecutorService;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * scheduler class which handles scheduling of lessons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class Scheduler {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private final Lesson lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public Scheduler(Lesson lesson) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Method which schedules the lesson depending on whether its repeat or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Uses ScheduledExecutorService to schedule lesson."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void scheduleLesson(Runnable task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ScheduledExecutorService scheduler \u003d Executors.newScheduledThreadPool(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Time time \u003d lesson.getStartTime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar lessonTime \u003d time.getTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        long initialDelay \u003d lessonTime.getTimeInMillis() - System.currentTimeMillis();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        if (lesson.getIsRepeat()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            long period \u003d TimeUnit.DAYS.toMillis(7);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            scheduler.scheduleAtFixedRate(task, initialDelay, period, TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            scheduler.schedule(task, initialDelay, TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 35,
      "weikiat97": 2
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                \u003cLabel fx:id\u003d\"completionStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$completionStatus\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "               \u003cFont name\u003d\"System Italic\" size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \u003cLabel fx:id\u003d\"grades\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$grades\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 27,
      "weikiat97": 15
    }
  },
  {
    "path": "src/main/resources/view/AssignmentListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    \u003cListView fx:id\u003d\"assignmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Xelyion": 9
    }
  },
  {
    "path": "src/main/resources/view/ClassroomListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cLabel fx:id\u003d\"studentLength\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentLength\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cLabel fx:id\u003d\"assignmentLength\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$assignmentLength\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 38
    }
  },
  {
    "path": "src/main/resources/view/ClassroomListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    \u003cListView fx:id\u003d\"classroomListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Xelyion": 9
    }
  },
  {
    "path": "src/main/resources/view/CombinedListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    \u003cListView fx:id\u003d\"combinedListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Xelyion": 9
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import seedu.address.ui.AutoCompleteTextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "  \u003cAutoCompleteTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CurrentClassroomCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" style\u003d\"-fx-background-color: cornflowerblue;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cLabel fx:id\u003d\"studentLength\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$studentLength\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            \u003cLabel fx:id\u003d\"assignmentLength\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$assignmentLength\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 38
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    -fx-text-fill: #666666;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    -fx-text-fill: #FFFAF0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "#filterField, #studentListPanel, #studentWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2,
      "weikiat97": 1,
      "-": 348
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Teacher\u0027s Notebook\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4, 0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "          \u003cVBox fx:id\u003d\"reminderList\" alignment\u003d\"CENTER\" maxWidth\u003d\"700.0\" minWidth\u003d\"240.0\" prefWidth\u003d\"240.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" lineSpacing\u003d\"9.0\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_big_label\" text\u003d\"Lessons\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                  \u003cTabPane fx:id\u003d\"lessonTabPanel\" prefHeight\u003d\"1700.0\" prefWidth\u003d\"2100.0\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                      \u003cTab text\u003d\"Mon\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003ccontent\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"monReminderListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003c/content\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                      \u003cTab text\u003d\"Tue\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003ccontent\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"tueReminderListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003c/content\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003cTab text\u003d\"Wed\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003ccontent\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"wedReminderListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003c/content\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003cTab text\u003d\"Thur\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003ccontent\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"thurReminderListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003c/content\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003cTab text\u003d\"Fri\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003ccontent\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"friReminderListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003c/content\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003cTab text\u003d\"Sat\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003ccontent\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"satReminderListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003c/content\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003cTab text\u003d\"Sun\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003ccontent\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"sunReminderListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                           \u003c/content\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                  \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "          \u003cVBox fx:id\u003d\"classroomList\" alignment\u003d\"CENTER\" maxWidth\u003d\"700.0\" minWidth\u003d\"240.0\" prefWidth\u003d\"240.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" lineSpacing\u003d\"9.0\" styleClass\u003d\"cell_big_label\" text\u003d\"Classrooms\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "              \u003cStackPane fx:id\u003d\"classroomListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "          \u003cVBox fx:id\u003d\"combinedList\" alignment\u003d\"CENTER\" maxWidth\u003d\"700.0\" minWidth\u003d\"240.0\" prefWidth\u003d\"240.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" lineSpacing\u003d\"9.0\" styleClass\u003d\"cell_big_label\" text\u003d\"Students/Assignments\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            \u003cStackPane fx:id\u003d\"combinedListPanelPlaceholder\" alignment\u003d\"BOTTOM_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" alignment\u003d\"BOTTOM_RIGHT\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 31,
      "Xelyion": 1,
      "sheryltay28": 41,
      "weikiat97": 5,
      "-": 48
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                \u003cLabel fx:id\u003d\"className\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            \u003cLabel fx:id\u003d\"day\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$day\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 32,
      "sheryltay28": 4
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "   \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"150.0\" fitWidth\u003d\"95.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "      \u003cLabel fx:id\u003d\"parentPhone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$parentPhone\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "      \u003cLabel fx:id\u003d\"medicalCondition\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$medicalCondition\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 9,
      "weikiat97": 6,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "  \u003cListView fx:id\u003d\"studentListView\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEDICALCONDITION_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARENTPHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.ListStudentCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.storage.JsonNotebookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonNotebookStorage notebookStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonNotebookStorage(temporaryFolder.resolve(\"notebook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(notebookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String deleteStudentCommand \u003d \"deletestudent 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandException(deleteStudentCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String listCommand \u003d ListStudentCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandSuccess(listCommand, ListStudentCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        // Setup LogicManager with JsonClassroomIoExceptionThrowingStub"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonNotebookStorage notebookStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonNotebookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionNotebook.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(notebookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String addStudentCommand \u003d AddStudentCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + ADDRESS_DESC_AMY + PARENTPHONE_DESC_AMY + MEDICALCONDITION_DESC_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.addStudent(expectedStudent);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(addStudentCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static class JsonNotebookIoExceptionThrowingStub extends JsonNotebookStorage {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private JsonNotebookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void saveNotebook(ReadOnlyNotebook notebook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "weikiat97": 40,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAssignmentCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddAssignmentCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AddAssignmentCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_newAssignment_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().withAssignmentName(\"Math Worksheet\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cString\u003e studentNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.getCurrentClassroom().getStudentList().forEach(student -\u003e studentNames.add(student.getName()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .toString()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        validAssignment.initialiseGrades(studentNames);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.addAssignment(validAssignment);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandSuccess(new AddAssignmentCommand(validAssignment), model,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                String.format(AddAssignmentCommand.MESSAGE_SUCCESS, validAssignment), expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_duplicateAssignment_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment assignmentInList \u003d model.getCurrentClassroom().getAssignmentList().get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(new AddAssignmentCommand(assignmentInList), model,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                AddAssignmentCommand.MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAssignmentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.UniqueAssignmentList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.ReadOnlyClassroom;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AddAssignmentCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddAssignmentCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_assignmentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ModelStubAcceptingAssignmentAdded modelStub \u003d new ModelStubAcceptingAssignmentAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        CommandResult commandResult \u003d new AddAssignmentCommand(validAssignment).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(String.format(AddAssignmentCommand.MESSAGE_SUCCESS, validAssignment),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(Arrays.asList(validAssignment), modelStub.assignmentsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_duplicateAssignment_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment validAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AddAssignmentCommand addAssignmentCommand \u003d new AddAssignmentCommand(validAssignment);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAssignment(validAssignment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(CommandException.class, AddAssignmentCommand.MESSAGE_DUPLICATE_ASSIGNMENT, ("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ) -\u003e addAssignmentCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment mathAssignment \u003d new AssignmentBuilder().withAssignmentName(\"Math Homework 3\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment englishAssignment \u003d new AssignmentBuilder().withAssignmentName(\"English Assignment 2\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AddAssignmentCommand addMathAssignmentCommand \u003d new AddAssignmentCommand(mathAssignment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AddAssignmentCommand addEnglishAssignmentCommand \u003d new AddAssignmentCommand(englishAssignment);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(addMathAssignmentCommand.equals(addMathAssignmentCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AddAssignmentCommand addMathAssignmentCommandCopy \u003d new AddAssignmentCommand(mathAssignment);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(addMathAssignmentCommand.equals(addMathAssignmentCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(addMathAssignmentCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(addMathAssignmentCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different Assignment -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(addMathAssignmentCommand.equals(addEnglishAssignmentCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Path getNotebookFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setNotebookFilePath(Path classroomFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setClassroom(ReadOnlyClassroom newData) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Classroom getCurrentClassroom() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Classroom getClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setNotebook(ReadOnlyNotebook notebook) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ReadOnlyNotebook getNotebook() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean hasClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void deleteClassroom(Classroom target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setStudent(Student target, Student editedAssignment) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void updateAllAssignmentsWithName(Student oldStudent, Student newStudent) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void addClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setCurrentClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cClassroom\u003e getClassroomList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean checkTimingExist(Lesson lesson) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cUniqueLessonList\u003e getFilteredLessonWeekList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void updateFilteredLessonWeekList(Predicate\u003cUniqueLessonList\u003e predicate) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void displayStudents() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void displayAssignments() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean isDisplayStudents() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public String displayLessons() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ReadOnlyNotebook undo() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ReadOnlyNotebook redo() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean canRedo() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void saveState() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * A Model stub that contains a single assignment."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private class ModelStubWithAssignment extends ModelStub {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private final Assignment assignment;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ModelStubWithAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.assignment \u003d assignment;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return this.assignment.isSameAssignment(assignment);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * A Model stub that always accept the assignment being added."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private class ModelStubAcceptingAssignmentAdded extends ModelStub {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final ArrayList\u003cAssignment\u003e assignmentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final UniqueAssignmentList assignments \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final UniqueStudentList students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return assignmentsAdded.stream().anyMatch(assignment::isSameAssignment);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            requireNonNull(assignment);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            assignmentsAdded.add(assignment);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Classroom getCurrentClassroom() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return new Classroom();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            AssignmentName assignmentName \u003d new AssignmentName(\"Dummy Assignment\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            AssignmentDeadline assignmentDeadline \u003d new AssignmentDeadline(\"01/02/03 0456\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Assignment dummyAssignment \u003d new Assignment(assignmentName, assignmentDeadline);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            assignments.add(dummyAssignment);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return assignments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            students.add(student);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 5,
      "weikiat97": 400
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddLessonCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddLessonCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class AddLessonCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void execute_newLesson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().withClassName(\"Science\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        expectedModel.addLesson(validLesson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertCommandSuccess(new AddLessonCommand(validLesson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                String.format(AddLessonCommand.MESSAGE_SUCCESS, validLesson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void execute_duplicateLesson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson lessonInList \u003d model.getLessonList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertCommandFailure(new AddLessonCommand(lessonInList), model, AddLessonCommand.MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddLessonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.classroom.ReadOnlyClassroom;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class AddLessonCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void constructor_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddLessonCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void execute_lessonAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ModelStubAcceptingLessonAdded modelStub \u003d new ModelStubAcceptingLessonAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        CommandResult commandResult \u003d new AddLessonCommand(validLesson).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertEquals(String.format(AddLessonCommand.MESSAGE_SUCCESS, validLesson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertEquals(Arrays.asList(validLesson), modelStub.lessonsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void execute_duplicateLesson_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        AddLessonCommand addLessonCommand \u003d new AddLessonCommand(validLesson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithLesson(validLesson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertThrows(CommandException.class, AddLessonCommand.MESSAGE_DUPLICATE_LESSON, ("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ) -\u003e addLessonCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson math \u003d new LessonBuilder().withClassName(\"Math\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson eng \u003d new LessonBuilder().withClassName(\"English\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        AddLessonCommand addMathCommand \u003d new AddLessonCommand(math);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        AddLessonCommand addEngCommand \u003d new AddLessonCommand(eng);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(addMathCommand.equals(addMathCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        AddLessonCommand addMathCommandCopy \u003d new AddLessonCommand(math);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(addMathCommand.equals(addMathCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(addMathCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(addMathCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(addMathCommand.equals(addEngCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public Path getNotebookFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setNotebookFilePath(Path classroomFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setClassroom(ReadOnlyClassroom newData) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public Classroom getCurrentClassroom() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public Classroom getClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setNotebook(ReadOnlyNotebook notebook) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ReadOnlyNotebook getNotebook() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean hasClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void deleteClassroom(Classroom target) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void updateAllAssignmentsWithName(Student oldStudent, Student newStudent) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void addClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setCurrentClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ObservableList\u003cClassroom\u003e getClassroomList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean checkTimingExist(Lesson lesson) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ObservableList\u003cUniqueLessonList\u003e getFilteredLessonWeekList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void updateFilteredLessonWeekList(Predicate\u003cUniqueLessonList\u003e predicate) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void displayAssignments() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void displayStudents() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public String displayLessons() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean isDisplayStudents() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ReadOnlyNotebook undo() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ReadOnlyNotebook redo() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean canRedo() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void saveState() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private class ModelStubWithLesson extends AddLessonCommandTest.ModelStub {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        private final Lesson lesson;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ModelStubWithLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return this.lesson.isSameLesson(lesson);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private class ModelStubAcceptingLessonAdded extends AddLessonCommandTest.ModelStub {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        final ArrayList\u003cLesson\u003e lessonsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        final UniqueLessonList lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return lessonsAdded.stream().anyMatch(lesson::isSameLesson);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            lessonsAdded.add(lesson);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean checkTimingExist(Lesson lesson) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return lessons.checkTimingExist(lesson);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 373
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddStudentCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddStudentCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AddStudentCommandIntegrationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().withName(\"Damith\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d expectedModel.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        for (Assignment assignment: assignmentList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            Assignment editedAssignment \u003d new Assignment(assignment.getAssignmentName(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    assignment.getAssignmentDeadline());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            editedAssignment.setGrades(assignment.namesStringListFromGrades(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                    assignment.marksStringListFromGrades());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            editedAssignment.addNewStudentGrade(validStudent.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            expectedModel.setAssignment(assignment, editedAssignment);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandSuccess(new AddStudentCommand(validStudent), model,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student studentInList \u003d model.getCurrentClassroom().getStudentList().get(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(new AddStudentCommand(studentInList), model, AddStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 15,
      "weikiat97": 22,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddStudentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.UniqueAssignmentList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.ReadOnlyClassroom;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AddStudentCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        CommandResult commandResult \u003d new AddStudentCommand(validStudent).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AddStudentCommand addStudentCommand \u003d new AddStudentCommand(validStudent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(CommandException.class, AddStudentCommand.MESSAGE_DUPLICATE_STUDENT, ("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            ) -\u003e addStudentCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_samePhoneAsParentPhone_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student invalidStudent \u003d new StudentBuilder().withPhone(\"99999999\").withParentPhone(\"99999999\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(CommandException.class, String.format(AddStudentCommand.MESSAGE_SAME_PHONE_AND_PARENT_PHONE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                invalidStudent), () -\u003e new AddStudentCommand(invalidStudent).execute(modelStub));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AddStudentCommand addAliceCommand \u003d new AddStudentCommand(alice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AddStudentCommand addBobCommand \u003d new AddStudentCommand(bob);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AddStudentCommand addAliceCommandCopy \u003d new AddStudentCommand(alice);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Path getNotebookFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setNotebookFilePath(Path classroomFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public void addAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public void setClassroom(ReadOnlyClassroom newData) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Classroom getCurrentClassroom() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Classroom getClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setNotebook(ReadOnlyNotebook notebook) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ReadOnlyNotebook getNotebook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean hasClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public boolean hasAssignment(Assignment assignment) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public void deleteAssignment(Assignment target) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void deleteClassroom(Classroom target) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void updateAllAssignmentsWithName(Student oldStudent, Student newStudent) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void addClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setCurrentClassroom(Classroom classroom) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cClassroom\u003e getClassroomList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean checkTimingExist(Lesson lesson) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cUniqueLessonList\u003e getFilteredLessonWeekList() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void updateFilteredLessonWeekList(Predicate\u003cUniqueLessonList\u003e predicate) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public void displayAssignments() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public void displayStudents() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public String displayLessons() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public boolean isDisplayStudents() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ReadOnlyNotebook undo() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean canUndo() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ReadOnlyNotebook redo() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean canRedo() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void saveState() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        final UniqueAssignmentList assignments \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Classroom getCurrentClassroom() {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return new Classroom();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getFilteredAssignmentList() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            AssignmentName assignmentName \u003d new AssignmentName(\"Dummy Assignment\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            AssignmentDeadline assignmentDeadline \u003d new AssignmentDeadline(\"01/02/03 0456\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            Assignment dummyAssignment \u003d new Assignment(assignmentName, assignmentDeadline);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            assignments.add(dummyAssignment);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return assignments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public void updateFilteredAssignmentList(Predicate\u003cAssignment\u003e predicate) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public void setAssignment(Assignment target, Assignment editedAssignment) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 62,
      "sheryltay28": 31,
      "weikiat97": 181,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void execute_emptyClassroom_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void execute_nonEmptyClassroom_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.setNotebook(new Notebook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 2,
      "weikiat97": 6,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICALCONDITION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARENTPHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALID_PARENTPHONE_AMY \u003d \"33333333\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALID_PARENTPHONE_BOB \u003d \"44444444\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALID_MEDICALCONDITION_AMY \u003d \"Asthma\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALID_MEDICALCONDITION_BOB \u003d \"Sinus\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String VALID_FILE_1 \u003d \"file:/C:/ping.png\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String VALID_FILE_2 \u003d \"file:/C:/ping.jpg\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MEDICALCONDITION_DESC_AMY \u003d \" \" + PREFIX_MEDICALCONDITION + VALID_MEDICALCONDITION_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String MEDICALCONDITION_DESC_BOB \u003d \" \" + PREFIX_MEDICALCONDITION + VALID_MEDICALCONDITION_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String PARENTPHONE_DESC_AMY \u003d \" \" + PREFIX_PARENTPHONE + VALID_PARENTPHONE_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String PARENTPHONE_DESC_BOB \u003d \" \" + PREFIX_PARENTPHONE + VALID_PARENTPHONE_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String INVALID_PARENTPHONE_DESC \u003d \" \" + PREFIX_PARENTPHONE + \"91a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String VALID_CLASSNAME_MATH \u003d \"Math Class\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String VALID_CLASSNAME_ENGLISH \u003d \"English Class\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String VALID_STARTTIME_MON \u003d \"06/01/2020 1200\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String VALID_STARTTIME_TUE \u003d \"07/01/2020 1200\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String VALID_STARTTIME_WED \u003d \"08/01/2020 1200\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String VALID_ENDTIME_MON \u003d \"06/01/2020 1300\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String VALID_ENDTIME_TUE \u003d \"07/01/2020 1300\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String VALID_ENDTIME_WED \u003d \"08/01/2020 1300\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALID_ASSIGNMENT_NAME_ENGLISH \u003d \"English Worksheet 2\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALID_ASSIGNMENT_NAME_MATH \u003d \"Math Homework 2\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALID_ASSIGNMENT_DEADLINE_ENGLISH \u003d \"02/12/2024 1029\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String VALID_ASSIGNMENT_DEADLINE_MATH \u003d \"12/12/2019 1800\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String ASSIGNMENT_NAME_DESC_ENGLISH \u003d \" \" + PREFIX_ASSIGNMENT + VALID_ASSIGNMENT_NAME_ENGLISH;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String ASSIGNMENT_NAME_DESC_MATH \u003d \" \" + PREFIX_ASSIGNMENT + VALID_ASSIGNMENT_NAME_MATH;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String ASSIGNMENT_DEADLINE_DESC_ENGLISH \u003d \" \" + PREFIX_DEADLINE"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            + VALID_ASSIGNMENT_DEADLINE_ENGLISH;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String ASSIGNMENT_DEADLINE_DESC_MATH \u003d \" \" + PREFIX_DEADLINE + VALID_ASSIGNMENT_DEADLINE_MATH;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String INVALID_ASSIGNMENT_NAME_DESC \u003d \" \" + PREFIX_ASSIGNMENT + \"Math\u0026\u0026\"; // \u0027\u0026\u0027 not allowed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String INVALID_ASSIGNMENT_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"invalid\"; // invalid deadline"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final EditAssignmentCommand.EditAssignmentDescriptor DESC_ENGLISH;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final EditAssignmentCommand.EditAssignmentDescriptor DESC_MATH;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withParentPhone(VALID_PARENTPHONE_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withMedicalCondition(VALID_MEDICALCONDITION_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withParentPhone(VALID_PARENTPHONE_BOB)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withMedicalCondition((VALID_MEDICALCONDITION_BOB))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        DESC_ENGLISH \u003d new EditAssignmentDescriptorBuilder().withAssignmentName(VALID_ASSIGNMENT_NAME_ENGLISH)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withAssignmentDeadline(VALID_ASSIGNMENT_DEADLINE_ENGLISH).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        DESC_MATH \u003d new EditAssignmentDescriptorBuilder().withAssignmentName(VALID_ASSIGNMENT_NAME_MATH)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withAssignmentDeadline(VALID_ASSIGNMENT_DEADLINE_MATH).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * - the classroom, filtered student list and selected student in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Classroom expectedClassroom \u003d new Classroom(actualModel.getCurrentClassroom());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedClassroom, actualModel.getCurrentClassroom());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code model}\u0027s classroom."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the assignment at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * {@code model}\u0027s classroom."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static void showAssignmentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment assignment \u003d model.getFilteredAssignmentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final String[] splitName \u003d assignment.getAssignmentName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredAssignmentList(new AssignmentNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(1, model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2,
      "sheryltay28": 9,
      "weikiat97": 70,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteLessonCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class DeleteLessonCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson lessonToDelete \u003d model.getFilteredLessonWeekList().get(INDEX_FIRST_OBJECT.getZeroBased())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .asUnmodifiableObservableList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand \u003d new DeleteLessonCommand(INDEX_FIRST_OBJECT, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteLessonCommand.MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // emulates delete command behaviour"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        expectedModel.deleteLesson(lessonToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertCommandSuccess(deleteLessonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredLessonWeekList()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            .get(0).asUnmodifiableObservableList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand \u003d new DeleteLessonCommand(outOfBoundIndex, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertCommandFailure(deleteLessonCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        DeleteLessonCommand deleteFirstCommand \u003d new DeleteLessonCommand(INDEX_FIRST_OBJECT, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        DeleteLessonCommand deleteSecondCommand \u003d new DeleteLessonCommand(INDEX_SECOND_OBJECT, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        DeleteLessonCommand deleteFirstCommandCopy \u003d new DeleteLessonCommand(INDEX_FIRST_OBJECT, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private void showNoLesson(Model model) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        model.updateFilteredLessonList(p -\u003e false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(model.getFilteredLessonList().isEmpty());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteStudentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * {@code DeleteStudentCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class DeleteStudentCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(deleteStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of classroom list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getNotebook().getCurrentClassroom().getStudentList()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                .size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(deleteStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d expectedModel.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (Assignment assignment: assignmentList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Assignment editedAssignment \u003d new Assignment(assignment.getAssignmentName(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    assignment.getAssignmentDeadline());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            editedAssignment.setGrades(assignment.namesStringListFromGrades(), assignment.marksStringListFromGrades());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            editedAssignment.deleteOneStudentGrade(studentToDelete.getName().fullName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            expectedModel.setAssignment(assignment, editedAssignment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandSuccess(deleteStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // emulates delete command behaviour"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d expectedModel.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (Assignment assignment: assignmentList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Assignment editedAssignment \u003d new Assignment(assignment.getAssignmentName(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    assignment.getAssignmentDeadline());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            editedAssignment.setGrades(assignment.namesStringListFromGrades(), assignment.marksStringListFromGrades());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            editedAssignment.deleteOneStudentGrade(studentToDelete.getName().fullName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            expectedModel.setAssignment(assignment, editedAssignment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandSuccess(deleteStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        DeleteStudentCommand deleteFirstCommand \u003d new DeleteStudentCommand(INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        DeleteStudentCommand deleteSecondCommand \u003d new DeleteStudentCommand(INDEX_SECOND_OBJECT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        DeleteStudentCommand deleteFirstCommandCopy \u003d new DeleteStudentCommand(INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 50,
      "weikiat97": 32,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditAssignmentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ENGLISH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ASSIGNMENT_DEADLINE_MATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ASSIGNMENT_NAME_ENGLISH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ASSIGNMENT_NAME_MATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAssignmentAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditAssignmentCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.EditAssignmentDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * EditAssignmentCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class EditAssignmentCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment editedAssignment \u003d new AssignmentBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand.EditAssignmentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new EditAssignmentDescriptorBuilder(editedAssignment).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand editAssignmentCommand \u003d new EditAssignmentCommand(INDEX_FIRST_OBJECT, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        //editedAssignment.initialiseGrades(model.getCurrentClassroom().getStudentNameList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(EditAssignmentCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Notebook(model.getNotebook()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), editedAssignment);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        //assertCommandSuccess(editAssignmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index indexLastAssignment \u003d Index.fromOneBased(model.getFilteredAssignmentList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment lastAssignment \u003d model.getFilteredAssignmentList().get(indexLastAssignment.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AssignmentBuilder assignmentInList \u003d new AssignmentBuilder(lastAssignment);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment editedAssignment \u003d assignmentInList.withAssignmentName(VALID_ASSIGNMENT_NAME_MATH)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withAssignmentDeadline(VALID_ASSIGNMENT_DEADLINE_MATH).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withAssignmentName(VALID_ASSIGNMENT_NAME_MATH).withAssignmentDeadline(VALID_ASSIGNMENT_DEADLINE_MATH)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand editAssignmentCommand \u003d new EditAssignmentCommand(indexLastAssignment, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAssignment.initialiseGrades(model.getCurrentClassroom().getStudentNameList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(EditAssignmentCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Notebook(model.getNotebook()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        //expectedModel.setAssignment(lastAssignment, editedAssignment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        //assertCommandSuccess(editAssignmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand editAssignmentCommand \u003d new EditAssignmentCommand(INDEX_FIRST_OBJECT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new EditAssignmentDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment editedAssignment \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(EditAssignmentCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Notebook(model.getNotebook()), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        //assertCommandSuccess(editAssignmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment assignmentInFilteredList \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment editedAssignment \u003d new AssignmentBuilder(assignmentInFilteredList)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withAssignmentName(VALID_ASSIGNMENT_NAME_ENGLISH).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand editAssignmentCommand \u003d new EditAssignmentCommand(INDEX_FIRST_OBJECT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new EditAssignmentDescriptorBuilder().withAssignmentName(VALID_ASSIGNMENT_NAME_ENGLISH).build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAssignment.initialiseGrades(model.getCurrentClassroom().getStudentNameList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(EditAssignmentCommand.MESSAGE_EDIT_ASSIGNMENT_SUCCESS, editedAssignment);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Notebook(model.getNotebook()), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.setAssignment(model.getFilteredAssignmentList().get(0), editedAssignment);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        //assertCommandSuccess(editAssignmentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_duplicateAssignmentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment firstAssignment \u003d model.getFilteredAssignmentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder(firstAssignment).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand editAssignmentCommand \u003d new EditAssignmentCommand(INDEX_SECOND_OBJECT, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(editAssignmentCommand, model, EditAssignmentCommand.MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_duplicateAssignmentFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // edit assignment in filtered list into a duplicate in classroom"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment assignmentInList \u003d model.getCurrentClassroom().getAssignmentList()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .get(INDEX_SECOND_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand editAssignmentCommand \u003d new EditAssignmentCommand(INDEX_FIRST_OBJECT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new EditAssignmentDescriptorBuilder(assignmentInList).build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(editAssignmentCommand, model, EditAssignmentCommand.MESSAGE_DUPLICATE_ASSIGNMENT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_invalidAssignmentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAssignmentList().size() + 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand.EditAssignmentDescriptor descriptor \u003d new EditAssignmentDescriptorBuilder()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withAssignmentName(VALID_ASSIGNMENT_NAME_MATH).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand editAssignmentCommand \u003d new EditAssignmentCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(editAssignmentCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * but smaller than size of classroom"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_invalidAssignmentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        showAssignmentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of classroom list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCurrentClassroom().getAssignmentList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand editAssignmentCommand \u003d new EditAssignmentCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new EditAssignmentDescriptorBuilder().withAssignmentName(VALID_ASSIGNMENT_NAME_MATH).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(editAssignmentCommand, model, Messages.MESSAGE_INVALID_ASSIGNMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final EditAssignmentCommand standardCommand \u003d new EditAssignmentCommand(INDEX_FIRST_OBJECT, DESC_ENGLISH);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand.EditAssignmentDescriptor copyDescriptor \u003d new EditAssignmentCommand"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .EditAssignmentDescriptor(DESC_ENGLISH);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditAssignmentCommand commandWithSameValues \u003d new EditAssignmentCommand(INDEX_FIRST_OBJECT, copyDescriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAssignmentCommand(INDEX_SECOND_OBJECT, DESC_ENGLISH)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAssignmentCommand(INDEX_FIRST_OBJECT, DESC_MATH)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditStudentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * EditStudentCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class EditStudentCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_OBJECT, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Notebook(model.getNotebook()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Notebook(model.getNotebook()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.setStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        //assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_OBJECT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new EditStudentDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Notebook(model.getNotebook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_OBJECT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Notebook(model.getNotebook()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        //assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_SECOND_OBJECT, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // edit student in filtered list into a duplicate in classroom"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student studentInList \u003d model.getCurrentClassroom().getStudentList().get(INDEX_SECOND_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_OBJECT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * but smaller than size of classroom"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of classroom list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCurrentClassroom().getStudentList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        final EditStudentCommand standardCommand \u003d new EditStudentCommand(INDEX_FIRST_OBJECT, DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor copyDescriptor \u003d new EditStudentCommand"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand commandWithSameValues \u003d new EditStudentCommand(INDEX_FIRST_OBJECT, copyDescriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_SECOND_OBJECT, DESC_AMY)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_FIRST_OBJECT, DESC_BOB)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 95,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditStudentDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptorWithSameValues \u003d new EditStudentCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 10,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindStudentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * Contains unit tests and integration tests (interaction with the Model)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * for {@code FindStudentCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class FindStudentCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        FindStudentCommand findFirstCommand \u003d new FindStudentCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        FindStudentCommand findSecondCommand \u003d new FindStudentCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        FindStudentCommand findFirstCommandCopy \u003d new FindStudentCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        FindStudentCommand command \u003d new FindStudentCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_multipleKeywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        FindStudentCommand command \u003d new FindStudentCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2,
      "weikiat97": 27,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GetStudentGradesCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.GetStudentGradesCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * integration and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * {@code GetStudentGradesComand}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class GetStudentGradesCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        GetStudentGradesCommand getStudentGradesCommand \u003d new GetStudentGradesCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(getStudentGradesCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of classroom list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getNotebook().getCurrentClassroom().getStudentList()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                .size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        GetStudentGradesCommand getStudentGradesCommand \u003d new GetStudentGradesCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(getStudentGradesCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_validIndexFilteredListNoGrades_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        GetStudentGradesCommand getStudentGradesCommand \u003d new GetStudentGradesCommand(INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cAssignment\u003e lastShownAssignmentList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (Assignment assignment : lastShownAssignmentList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Map\u003cString, String\u003e currentAssignmentGrades \u003d assignment.getGrades();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (currentAssignmentGrades.containsKey(student.getName().toString())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                output.append(assignment.getAssignmentName() + \": \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        + currentAssignmentGrades.get(student.getName().toString()) + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, student.getName().toString(), output.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        showStudentAtIndex(expectedModel, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandSuccess(getStudentGradesCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        GetStudentGradesCommand getStudentGradesCommand \u003d new GetStudentGradesCommand(INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cAssignment\u003e lastShownAssignmentList \u003d model.getFilteredAssignmentList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (Assignment assignment : lastShownAssignmentList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Map\u003cString, String\u003e currentAssignmentGrades \u003d assignment.getGrades();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (currentAssignmentGrades.containsKey(student.getName().toString())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                output.append(assignment.getAssignmentName() + \": \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        + currentAssignmentGrades.get(student.getName().toString()) + \"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, student.getName().toString(), output.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandSuccess(getStudentGradesCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        GetStudentGradesCommand gradesFirstCommand \u003d new GetStudentGradesCommand(INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        GetStudentGradesCommand gradesSecondCommand \u003d new GetStudentGradesCommand(INDEX_SECOND_OBJECT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertTrue(gradesFirstCommand.equals(gradesFirstCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        GetStudentGradesCommand gradesFirstCommandCopy \u003d new GetStudentGradesCommand(INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertTrue(gradesFirstCommand.equals(gradesFirstCommandCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertFalse(gradesFirstCommand.equals(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertFalse(gradesFirstCommand.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertFalse(gradesFirstCommand.equals(gradesSecondCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListStudentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListStudentCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class ListStudentCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandSuccess(new ListStudentCommand(), model, ListStudentCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandSuccess(new ListStudentCommand(), model, ListStudentCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 10,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_noNewAction_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_REDO_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_newActionDoesNotChangeState_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.displayAssignments();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_REDO_FAILURE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_newActionChangeState_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment toAdd \u003d new Assignment(new AssignmentName(\"Social Studies Worksheet 1\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new AssignmentDeadline(\"31/12/2019 2020\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.addAssignment(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Notebook(model.getNotebook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(RedoCommand.MESSAGE_REDO_SUCCESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandSuccess(redoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ResetPicCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class ResetPicCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ResetDisplayPictureCommand resetCommand \u003d new ResetDisplayPictureCommand(INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(resetCommand, model, ResetDisplayPictureCommand.MESSAGE_PICTURE_ALREADY_DEFAULT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ResetDisplayPictureCommand editStudentCommand \u003d new ResetDisplayPictureCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 28,
      "weikiat97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetClassroomCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.SetClassroomCommand.MESSAGE_CLASSROOM_BLANK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.SetClassroomCommand.MESSAGE_CLASSROOM_NOT_FOUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.SetClassroomCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.CLASSROOM_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.CLASSROOM_TWO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * {@code SetClassroomCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class SetClassroomCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        SetClassroomCommand classFirstCommand \u003d new SetClassroomCommand(CLASSROOM_ONE.getClassroomName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        SetClassroomCommand classSecondCommand \u003d new SetClassroomCommand(CLASSROOM_TWO.getClassroomName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertTrue(classFirstCommand.equals(classFirstCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        SetClassroomCommand classFirstCommandCopy \u003d new SetClassroomCommand(CLASSROOM_ONE.getClassroomName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertTrue(classFirstCommand.equals(classFirstCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertFalse(classFirstCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertFalse(classFirstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertFalse(classFirstCommand.equals(classSecondCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_classNameNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        SetClassroomCommand setClassroomCommand \u003d new SetClassroomCommand(\"Not in model\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(setClassroomCommand, model, MESSAGE_CLASSROOM_NOT_FOUND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_blankClassName_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String expectedMessage \u003d MESSAGE_CLASSROOM_BLANK;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        SetClassroomCommand command \u003d new SetClassroomCommand(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(command, model, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_setValidClassName_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Classroom classToSet \u003d CLASSROOM_ONE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, classToSet);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        SetClassroomCommand command \u003d new SetClassroomCommand(CLASSROOM_ONE.getClassroomName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_noNewAction_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_UNDO_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_newActionDoesNotChangeState_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.displayAssignments();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_UNDO_FAILURE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void execute_newActionChangeState_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Notebook(model.getNotebook()), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment toAdd \u003d new Assignment(new AssignmentName(\"Social Studies Worksheet 1\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new AssignmentDeadline(\"31/12/2019 2020\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.addAssignment(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        model.saveState();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(UndoCommand.MESSAGE_UNDO_SUCCESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertCommandSuccess(undoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UploadCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class UploadCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNotebook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_uploadCommand_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withDisplayPicture(VALID_FILE_1).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UploadPictureCommand uploadCommand \u003d new UploadPictureCommand(INDEX_FIRST_OBJECT, VALID_FILE_1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String expectedMessage \u003d \"Uploaded \" + editedStudent.getName() + \"\u0027s photo successfully.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Notebook(model.getNotebook()), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandSuccess(uploadCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UploadPictureCommand uploadPictureCommand \u003d new UploadPictureCommand(INDEX_FIRST_OBJECT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                new StudentBuilder(firstStudent).build().getDisplayPictureFilePath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(uploadPictureCommand, model, UploadPictureCommand.MESSAGE_SAME_PICTURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // edit student in filtered list into a duplicate in classroom"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Student studentInList \u003d model.getCurrentClassroom().getStudentList().get(INDEX_FIRST_OBJECT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UploadPictureCommand uploadPictureCommand \u003d new UploadPictureCommand(INDEX_FIRST_OBJECT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                new StudentBuilder(studentInList).build().getDisplayPictureFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(uploadPictureCommand, model, UploadPictureCommand.MESSAGE_SAME_PICTURE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UploadPictureCommand uploadCommand \u003d new UploadPictureCommand(outOfBoundIndex, VALID_FILE_1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(uploadCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_OBJECT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of classroom list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCurrentClassroom().getStudentList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UploadPictureCommand uploadCommand \u003d new UploadPictureCommand(outOfBoundIndex, VALID_FILE_1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertCommandFailure(uploadCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 74,
      "weikiat97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddAssignmentCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGNMENT_DEADLINE_DESC_ENGLISH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGNMENT_DEADLINE_DESC_MATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGNMENT_NAME_DESC_ENGLISH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ASSIGNMENT_NAME_DESC_MATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ASSIGNMENT_DEADLINE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ASSIGNMENT_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ASSIGNMENT_DEADLINE_MATH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ASSIGNMENT_NAME_MATH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.ASSIGNMENT_MATH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.AddAssignmentCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AddAssignmentCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private AddAssignmentCommandParser parser \u003d new AddAssignmentCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment expectedAssignment \u003d new AssignmentBuilder(ASSIGNMENT_MATH).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ASSIGNMENT_NAME_DESC_MATH"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + ASSIGNMENT_DEADLINE_DESC_MATH, new AddAssignmentCommand(expectedAssignment));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // multiple assignment names - last assignment name accepted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseSuccess(parser, ASSIGNMENT_NAME_DESC_ENGLISH + ASSIGNMENT_NAME_DESC_MATH"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        + ASSIGNMENT_DEADLINE_DESC_MATH, new AddAssignmentCommand(expectedAssignment));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // multiple deadlines - last deadline accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseSuccess(parser, ASSIGNMENT_NAME_DESC_MATH + ASSIGNMENT_DEADLINE_DESC_ENGLISH"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + ASSIGNMENT_DEADLINE_DESC_MATH, new AddAssignmentCommand(expectedAssignment));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAssignmentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // missing assignment name prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, VALID_ASSIGNMENT_NAME_MATH + ASSIGNMENT_DEADLINE_DESC_MATH,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // missing assignment deadline prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, ASSIGNMENT_NAME_DESC_MATH + VALID_ASSIGNMENT_NAME_MATH, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, VALID_ASSIGNMENT_NAME_MATH + VALID_ASSIGNMENT_DEADLINE_MATH,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // invalid assignment name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, INVALID_ASSIGNMENT_NAME_DESC + ASSIGNMENT_DEADLINE_DESC_MATH,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                AssignmentName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // invalid assignment deadline"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, ASSIGNMENT_NAME_DESC_MATH + INVALID_ASSIGNMENT_DEADLINE_DESC,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                AssignmentDeadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, INVALID_ASSIGNMENT_NAME_DESC + INVALID_ASSIGNMENT_DEADLINE_DESC,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                AssignmentName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ASSIGNMENT_NAME_DESC_MATH"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        + ASSIGNMENT_DEADLINE_DESC_MATH , String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                AddAssignmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddStudentCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PARENTPHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEDICALCONDITION_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEDICALCONDITION_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARENTPHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARENTPHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARENTPHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.ParentPhone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * contains unit tests for"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * {@code AddStudentCommandParser}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AddStudentCommandParserTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private AddStudentCommandParser parser \u003d new AddStudentCommandParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + PARENTPHONE_DESC_BOB + ADDRESS_DESC_BOB + MEDICALCONDITION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + PARENTPHONE_DESC_BOB + ADDRESS_DESC_BOB + MEDICALCONDITION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + PARENTPHONE_DESC_BOB + ADDRESS_DESC_BOB + MEDICALCONDITION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + PARENTPHONE_DESC_BOB + ADDRESS_DESC_BOB + MEDICALCONDITION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + PARENTPHONE_DESC_BOB + ADDRESS_DESC_BOB + MEDICALCONDITION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + PARENTPHONE_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + ADDRESS_DESC_BOB + MEDICALCONDITION_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new AddStudentCommand(expectedStudentMultipleTags));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + PARENTPHONE_DESC_AMY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + ADDRESS_DESC_AMY + MEDICALCONDITION_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + PARENTPHONE_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + ADDRESS_DESC_BOB + MEDICALCONDITION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + PARENTPHONE_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + ADDRESS_DESC_BOB + MEDICALCONDITION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + PARENTPHONE_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + ADDRESS_DESC_BOB + MEDICALCONDITION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + PARENTPHONE_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + VALID_ADDRESS_BOB + MEDICALCONDITION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_PARENTPHONE_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + VALID_ADDRESS_BOB + MEDICALCONDITION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + PARENTPHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + PARENTPHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + PARENTPHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + PARENTPHONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + PARENTPHONE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // invalid parent phone"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + INVALID_PARENTPHONE_DESC + VALID_TAG_FRIEND, ParentPhone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + PARENTPHONE_DESC_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        + PARENTPHONE_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 4,
      "weikiat97": 62,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteStudentCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * outside of the DeleteStudentCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * same path through the DeleteStudentCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class DeleteStudentCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private DeleteStudentCommandParser parser \u003d new DeleteStudentCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void parse_validArgs_returnsDeleteStudentCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteStudentCommand(INDEX_FIRST_OBJECT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                DeleteStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 10,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditStudentCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_OBJECT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class EditStudentCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private EditStudentCommandParser parser \u003d new EditStudentCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, \"1\", EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_OBJECT;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_OBJECT;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_OBJECT;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 46,
      "-": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindStudentCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.FindStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " *  {@code FindStudentCommandParser}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class FindStudentCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private FindStudentCommandParser parser \u003d new FindStudentCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                FindStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        FindStudentCommand expectedFindStudentCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new FindStudentCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindStudentCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindStudentCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 4,
      "weikiat97": 10,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GetStudentGradesCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.GetStudentGradesCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class GetStudentGradesCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private GetStudentGradesCommandParser parser \u003d new GetStudentGradesCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parse_validArgs_returnsGetStudentGradesCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseSuccess(parser, \"1\", new GetStudentGradesCommand(INDEX_FIRST_OBJECT));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                GetStudentGradesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NotebookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.FindStudentCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.ListStudentCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class NotebookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final NotebookParser parser \u003d new NotebookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        AddStudentCommand command \u003d (AddStudentCommand) parser.parseCommand(StudentUtil.getAddStudentCommand(student));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(new AddStudentCommand(student), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        DeleteStudentCommand command \u003d (DeleteStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                DeleteStudentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_OBJECT.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(new DeleteStudentCommand(INDEX_FIRST_OBJECT), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        EditStudentCommand command \u003d (EditStudentCommand) parser.parseCommand(EditStudentCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                + INDEX_FIRST_OBJECT.getOneBased() + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(new EditStudentCommand(INDEX_FIRST_OBJECT, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        FindStudentCommand command \u003d (FindStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                FindStudentCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(new FindStudentCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(parser.parseCommand(ListStudentCommand.COMMAND_WORD) instanceof ListStudentCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(parser.parseCommand(ListStudentCommand.COMMAND_WORD + \" 3\") instanceof ListStudentCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 30,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static final String INVALID_FILE_1 \u003d \"a\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static final String INVALID_FILE_2 \u003d \"aaaaaaaa/b.pdf\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static final String VALID_FILE_1 \u003d \"path/file.png\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static final String VALID_FILE_2 \u003d \"path/file.jpg\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(INDEX_FIRST_OBJECT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(INDEX_FIRST_OBJECT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parseDisplayPic_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDisplayPicture((String) null));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parseDisplayPic_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDisplayPicture(INVALID_FILE_1));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDisplayPicture(INVALID_FILE_2));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parseDisplayPic_validValueWithoutWhitespace_returnsDisplayPic() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(VALID_FILE_1, ParserUtil.parseDisplayPicture(VALID_FILE_1));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 21,
      "weikiat97": 7,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ResetPicCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.ResetDisplayPictureCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class ResetPicCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ResetDisplayPictureCommandParser parser \u003d new ResetDisplayPictureCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parse_validArgs_returnsResetPicCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ResetDisplayPictureCommand(INDEX_FIRST_OBJECT));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                ResetDisplayPictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 23,
      "weikiat97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetClassroomCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSROOM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.CLASSROOM_ONE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.SetClassroomCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " *  {@code FindStudentCommandParser}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class SetClassroomCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private SetClassroomCommandParser parser \u003d new SetClassroomCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                SetClassroomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parse_noPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseFailure(parser, \"class\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                SetClassroomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parse_validArgs_returnsSetCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String validInput \u003d \" \" + PREFIX_CLASSROOM + CLASSROOM_ONE_NAME;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        SetClassroomCommand expectedSetClassroomCommand \u003d new SetClassroomCommand(CLASSROOM_ONE_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseSuccess(parser, validInput, expectedSetClassroomCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String userInputMultipleSpaces \u003d \" c/ \\n \\t \\n\" + CLASSROOM_ONE_NAME;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseSuccess(parser, userInputMultipleSpaces, expectedSetClassroomCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UploadCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalFiles.FILE_EXAMPLE_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalFiles.FILE_EXAMPLE_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_OBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.logic.commands.UploadPictureCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class UploadCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private UploadPictureCommandParser parser \u003d new UploadPictureCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parse_validArgs_returnsUploadCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // Test both jpg and png files"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseSuccess(parser, \"1 f/path/file.png\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new UploadPictureCommand(INDEX_FIRST_OBJECT, FILE_EXAMPLE_1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseSuccess(parser, \"1 f/path/file.jpg\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new UploadPictureCommand(INDEX_FIRST_OBJECT, FILE_EXAMPLE_2));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // Test with whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseSuccess(parser, \"\\n 1 \\n f/ \\n path/file.png\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new UploadPictureCommand(INDEX_FIRST_OBJECT, FILE_EXAMPLE_1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // empty args"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                UploadPictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // valid index, no prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseFailure(parser, \"1 a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                UploadPictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // valid index, have prefix but filepath empty"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseFailure(parser, \"1 a f/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                UploadPictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // valid index, invalid file type"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertParseFailure(parser, \"1 a f/test.pdf\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                UploadPictureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 41,
      "weikiat97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CaretakerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.CLASSROOM_TWO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class CaretakerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Notebook notebook \u003d new Notebook(getTypicalNotebook());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Caretaker caretaker \u003d new Caretaker(this.notebook);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Caretaker(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void undo_withValidCommand_undo() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.addClassroom(CLASSROOM_TWO);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        caretaker.saveState();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ReadOnlyNotebook previousNotebook \u003d caretaker.undo();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(caretaker.getInitialState(), previousNotebook);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void undo_withNoNewCommand_cannotUndo() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e caretaker.undo());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void undo_withInvalidCommand_cannotUndo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.displayAssignments();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e caretaker.undo());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void redo_withValidCommand_redo() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.addClassroom(CLASSROOM_TWO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        caretaker.saveState();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ReadOnlyNotebook currentNotebook \u003d new Notebook(this.notebook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ReadOnlyNotebook previousNotebook \u003d caretaker.undo();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ReadOnlyNotebook redoneNotebook \u003d caretaker.redo();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(currentNotebook, redoneNotebook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void redo_withNoNewCommand_cannotRedo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e caretaker.redo());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void canRedo_withValidCommand_canUndo() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.addClassroom(CLASSROOM_TWO);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        caretaker.saveState();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        caretaker.undo();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        boolean canRedo \u003d caretaker.canRedo();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(canRedo, true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void canRedo_nothingToRedo_cannotRedo() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        boolean canRedo \u003d caretaker.canRedo();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(canRedo, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/MementoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class MementoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private ReadOnlyNotebook state;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private ReadOnlyNotebook notebook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Memento memento;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Memento(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void getState_assertEqualsState() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        memento \u003d new Memento(notebook);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(notebook, memento.getState());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.getTypicalClassroom;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalLessonLists;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.NotebookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(new Notebook(), new Notebook(modelManager.getNotebook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        userPrefs.setNotebookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        userPrefs.setNotebookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setNotebookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setNotebookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setNotebookFilePath_validPath_setsNotebookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        modelManager.setNotebookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(path, modelManager.getNotebookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void hasStudent_studentNotInNotebook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void hasStudent_studentInNotebook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Notebook notebook \u003d new NotebookBuilder().withClassrooms(getTypicalClassroom())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .withLessonLists(getTypicalLessonLists()).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Notebook differentNotebook \u003d new Notebook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        modelManager \u003d new ModelManager(notebook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(notebook, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different Notebook -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentNotebook, userPrefs)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(notebook, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        differentUserPrefs.setNotebookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(notebook, differentUserPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 3,
      "sheryltay28": 2,
      "weikiat97": 31,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/NotebookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.CLASSROOM_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalStudents;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.exceptions.DuplicateClassroomException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.ClassroomBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class NotebookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final Notebook notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(Collections.emptyList(), notebook.getClassroomList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e notebook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void resetData_withValidReadOnlyNotebook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Notebook newData \u003d getTypicalNotebook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(newData, notebook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void resetData_withDuplicateClassrooms_throwsDuplicateClassroomException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // Two Classrooms with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Classroom editedClassroomOne \u003d new ClassroomBuilder(CLASSROOM_ONE).withClassroomName(\"Classroom One\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withStudents(getTypicalStudents()).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cClassroom\u003e newClassrooms \u003d Arrays.asList(CLASSROOM_ONE, editedClassroomOne);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        NotebookStub newData \u003d new NotebookStub(newClassrooms);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(DuplicateClassroomException.class, () -\u003e notebook.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void hasClassroom_nullClassroom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e notebook.hasClassroom(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void hasClassroom_classroomNotInNotebook_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(notebook.hasClassroom(CLASSROOM_ONE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void hasClassroom_classroomInNotebook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.addClassroom(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(notebook.hasClassroom(CLASSROOM_ONE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void hasClassroom_classroomWithSameIdentityFieldsInNotebook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.addClassroom(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Classroom editedClassroom \u003d new ClassroomBuilder(CLASSROOM_ONE).withClassroomName(\"Classroom Two\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(notebook.hasClassroom(editedClassroom));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void getClassroomList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e notebook.getClassroomList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * A stub ReadOnlyNotebook whose Classrooms list can violate interface constraints."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static class NotebookStub implements ReadOnlyNotebook {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private final ObservableList\u003cClassroom\u003e classrooms \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private final ObservableList\u003cLesson\u003e lessons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private final ObservableList\u003cUniqueLessonList\u003e lessonList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        NotebookStub(Collection\u003cClassroom\u003e classrooms) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.classrooms.setAll(classrooms);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cClassroom\u003e getClassroomList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return classrooms;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public Classroom getCurrentClassroom() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cUniqueLessonList\u003e getLessonWeekList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return lessonList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void setClassroomFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setClassroomFilePath(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 2,
      "weikiat97": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/AssignmentDeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AssignmentDeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AssignmentDeadline(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_invalidAssignmentDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String invalidAssignmentDeadline \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AssignmentDeadline(invalidAssignmentDeadline));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void isValidAssignmentDeadline() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // null AssignmentDeadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AssignmentDeadline.isValidAssignmentDeadline(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // invalid AssignmentDeadline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(AssignmentDeadline.isValidAssignmentDeadline(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(AssignmentDeadline.isValidAssignmentDeadline(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(AssignmentDeadline.isValidAssignmentDeadline(\"peter*\")); // contains non-date formatted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(AssignmentDeadline.isValidAssignmentDeadline(\"30/30/2010 1800\")); // contains non-existent date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(AssignmentDeadline.isValidAssignmentDeadline(\"01/01/2010 3600\")); // contains non-existent time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(AssignmentDeadline.isValidAssignmentDeadline(\"24-07-2019 2300\")); // contains incorrect date format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(AssignmentDeadline.isValidAssignmentDeadline(\"24/07/2019 23:00\")); // contains incorrect time format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // valid AssignmentDeadline"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(AssignmentDeadline.isValidAssignmentDeadline(\"18/08/2019 1800\")); // date and time only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(AssignmentDeadline.isValidAssignmentDeadline(\"23/04/2300 2000\")); // date and time only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/AssignmentNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AssignmentNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AssignmentName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_invalidAssignmentName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String invalidAssignmentName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AssignmentName(invalidAssignmentName"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void isValidAssignmentName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // null AssignmentName"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AssignmentName.isValidAssignmentName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                (null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // invalid AssignmentName"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(AssignmentName.isValidAssignmentName"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                (\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(AssignmentName.isValidAssignmentName"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                (\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(AssignmentName.isValidAssignmentName"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                (\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(AssignmentName.isValidAssignmentName"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                (\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // valid AssignmentName"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(AssignmentName.isValidAssignmentName"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                (\"math assignment\")); // alphabets only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(AssignmentName.isValidAssignmentName"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                (\"12345\")); // numbers only"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(AssignmentName.isValidAssignmentName"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                (\"math assignment 2\")); // alphanumeric characters"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(AssignmentName.isValidAssignmentName"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                (\"English Homework\")); // with capital letters"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(AssignmentName.isValidAssignmentName"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                (\"Social Studies Assignment 2\")); // long AssignmentName// s"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/assignment/UniqueAssignmentListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.model.assignment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.AssignmentBuilder.EDITED_ASSIGNMENT_DEADLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.AssignmentBuilder.EDITED_ASSIGNMENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.ASSIGNMENT_MATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.ASSIGNMENT_SCIENCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.assignment.exceptions.AssignmentNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.assignment.exceptions.DuplicateAssignmentException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.testutil.AssignmentBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class UniqueAssignmentListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final UniqueAssignmentList uniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void contains_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void contains_assignmentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(uniqueAssignmentList.contains(ASSIGNMENT_MATH));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void contains_assignmentInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.add(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(uniqueAssignmentList.contains(ASSIGNMENT_MATH));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void contains_assignmentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.add(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment editedAss \u003d new AssignmentBuilder(ASSIGNMENT_MATH)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                .withAssignmentDeadline(EDITED_ASSIGNMENT_DEADLINE).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertTrue(uniqueAssignmentList.contains(editedAss));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void add_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void add_duplicateAssignment_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.add(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(DuplicateAssignmentException.class, () -\u003e uniqueAssignmentList.add(ASSIGNMENT_MATH));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAssignment_nullTargetAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                uniqueAssignmentList.setAssignment(null, ASSIGNMENT_MATH));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAssignment_nullEditedAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                uniqueAssignmentList.setAssignment(ASSIGNMENT_MATH, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAssignment_targetAssignmentNotInList_throwsAssignmentNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(AssignmentNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                uniqueAssignmentList.setAssignment(ASSIGNMENT_MATH, ASSIGNMENT_MATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAssignment_editedAssignmentIsSameAssignment_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.add(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.setAssignment(ASSIGNMENT_MATH, ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueAssignmentList.add(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAssignment_editedAssignmentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.add(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Assignment editedAss \u003d new AssignmentBuilder(ASSIGNMENT_MATH)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                .withAssignmentName(EDITED_ASSIGNMENT_NAME)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                .withAssignmentDeadline(EDITED_ASSIGNMENT_DEADLINE).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.setAssignment(ASSIGNMENT_MATH, editedAss);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        expectedUniqueAssignmentList.add(editedAss);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAssignment_editedAssignmentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.add(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.setAssignment(ASSIGNMENT_MATH, ASSIGNMENT_SCIENCE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueAssignmentList.add(ASSIGNMENT_SCIENCE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void remove_nullAssignment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.remove(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void remove_assignmentDoesNotExist_throwsAssignmentNotFoundException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(AssignmentNotFoundException.class, () -\u003e uniqueAssignmentList.remove(ASSIGNMENT_MATH));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void remove_existingAssignment_removesAssignment() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.add(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.remove(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAssignments_nullUniqueAssignmentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                uniqueAssignmentList.setAssignments((UniqueAssignmentList) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAssignments_uniqueAssignmentList_replacesOwnListWithProvidedUniqueAssignmentList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.add(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueAssignmentList.add(ASSIGNMENT_SCIENCE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueAssignmentList.setAssignments(expectedUniqueAssignmentList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAssignments_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAssignmentList.setAssignments((List\u003cAssignment\u003e) null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAssignments_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueAssignmentList.add(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cAssignment\u003e assignmentList \u003d Collections.singletonList(ASSIGNMENT_SCIENCE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueAssignmentList.setAssignments(assignmentList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UniqueAssignmentList expectedUniqueAssignmentList \u003d new UniqueAssignmentList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueAssignmentList.add(ASSIGNMENT_SCIENCE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(expectedUniqueAssignmentList, uniqueAssignmentList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAssignments_listWithDuplicateAssignments_throwsDuplicateAssignmentException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cAssignment\u003e listWithDuplicateAssignments \u003d Arrays.asList(ASSIGNMENT_MATH, ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                DuplicateAssignmentException.class, () -\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        uniqueAssignmentList.setAssignments(listWithDuplicateAssignments));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                uniqueAssignmentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 137,
      "weikiat97": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/classroom/ClassroomTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.getTypicalClassroom;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class ClassroomTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private final Classroom classroom \u003d new Classroom();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertEquals(Collections.emptyList(), classroom.getStudentList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e classroom.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void resetData_withValidReadOnlyClassroom_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Classroom newData \u003d getTypicalClassroom().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        classroom.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertEquals(newData, classroom);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        ClassroomStub newData \u003d new ClassroomStub(newStudents);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e classroom.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e classroom.hasStudent(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void hasStudent_studentNotInClassroom_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertFalse(classroom.hasStudent(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void hasStudent_studentInClassroom_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        classroom.addStudent(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertTrue(classroom.hasStudent(ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInClassroom_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        classroom.addStudent(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertTrue(classroom.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e classroom.getStudentList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "     * A stub ReadOnlyClassroom whose students list can violate interface constraints."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static class ClassroomStub implements ReadOnlyClassroom {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        private final ObservableList\u003cAssignment\u003e assignments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        private String classroomName \u003d \"My First Classroom\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        ClassroomStub(Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public String getClassroomName() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return classroomName;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public void setClassroomName(String classroomName) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            this.classroomName \u003d classroomName;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        public ObservableList\u003cAssignment\u003e getAssignmentList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "            return assignments;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        public List\u003cString\u003e getStudentNameList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            for (Student student : students) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                output.add(student.getName().toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 28,
      "sheryltay28": 3,
      "weikiat97": 47,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/classroom/UniqueClassroomListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.classroom;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.CLASSROOM_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.CLASSROOM_TWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalStudents;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.exceptions.ClassroomNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.exceptions.DuplicateClassroomException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.ClassroomBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class UniqueClassroomListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final UniqueClassroomList uniqueClassroomList \u003d new UniqueClassroomList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void contains_nullClassroom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClassroomList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void contains_classroomNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(uniqueClassroomList.contains(CLASSROOM_ONE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void contains_classroomInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.add(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(uniqueClassroomList.contains(CLASSROOM_ONE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void contains_classroomWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.add(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Classroom editedClassroomOne \u003d new ClassroomBuilder(CLASSROOM_ONE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withStudents(getTypicalStudents()).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(uniqueClassroomList.contains(editedClassroomOne));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void add_nullClassroom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClassroomList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void add_duplicateClassroom_throwsDuplicateClassroomException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.add(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(DuplicateClassroomException.class, () -\u003e uniqueClassroomList.add(CLASSROOM_ONE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassroom_nullTargetClassroom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClassroomList.setClassroom(null, CLASSROOM_ONE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassroom_nullEditedClassroom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClassroomList.setClassroom(CLASSROOM_ONE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassroom_targetClassroomNotInList_throwsClassroomNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(ClassroomNotFoundException.class, () -\u003e uniqueClassroomList.setClassroom(CLASSROOM_ONE,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                CLASSROOM_ONE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassroom_editedClassroomIsSameClassroom_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.add(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.setClassroom(CLASSROOM_ONE, CLASSROOM_ONE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueClassroomList expectedUniqueClassroomList \u003d new UniqueClassroomList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueClassroomList.add(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueClassroomList, uniqueClassroomList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassroom_editedClassroomHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.add(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Classroom editedClassroom \u003d new ClassroomBuilder(CLASSROOM_ONE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .withStudents(getTypicalStudents()).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.setClassroom(CLASSROOM_ONE, editedClassroom);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueClassroomList expectedUniqueClassroomList \u003d new UniqueClassroomList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueClassroomList.add(editedClassroom);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueClassroomList, uniqueClassroomList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassroom_editedClassroomHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.add(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.setClassroom(CLASSROOM_ONE, CLASSROOM_TWO);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueClassroomList expectedUniqueClassroomList \u003d new UniqueClassroomList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueClassroomList.add(CLASSROOM_TWO);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueClassroomList, uniqueClassroomList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassroom_editedClassroomHasNonUniqueIdentity_throwsDuplicateClassroomException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.add(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.add(CLASSROOM_TWO);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(DuplicateClassroomException.class, () -\u003e uniqueClassroomList"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .setClassroom(CLASSROOM_ONE, CLASSROOM_TWO));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void remove_nullClassroom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClassroomList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void remove_classroomDoesNotExist_throwsClassroomNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(ClassroomNotFoundException.class, () -\u003e uniqueClassroomList.remove(CLASSROOM_ONE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void remove_existingClassroom_removesClassroom() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.add(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.remove(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueClassroomList expectedUniqueClassroomList \u003d new UniqueClassroomList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueClassroomList, uniqueClassroomList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassrooms_nullUniqueClassroomList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClassroomList.setClassrooms((UniqueClassroomList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassrooms_uniqueClassroomList_replacesOwnListWithProvidedUniqueClassroomList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.add(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueClassroomList expectedUniqueClassroomList \u003d new UniqueClassroomList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueClassroomList.add(CLASSROOM_TWO);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.setClassrooms(expectedUniqueClassroomList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueClassroomList, uniqueClassroomList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassrooms_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClassroomList.setClassrooms((List\u003cClassroom\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassrooms_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.add(CLASSROOM_ONE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cClassroom\u003e classroomList \u003d Collections.singletonList(CLASSROOM_TWO);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueClassroomList.setClassrooms(classroomList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueClassroomList expectedUniqueClassroomList \u003d new UniqueClassroomList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueClassroomList.add(CLASSROOM_TWO);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueClassroomList, uniqueClassroomList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setClassrooms_listWithDuplicateClassrooms_throwsDuplicateClassroomException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cClassroom\u003e listWithDuplicateClassrooms \u003d Arrays.asList(CLASSROOM_ONE, CLASSROOM_ONE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                DuplicateClassroomException.class, () -\u003e uniqueClassroomList"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        .setClassrooms(listWithDuplicateClassrooms));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                ) -\u003e uniqueClassroomList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/ClassNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASSNAME_ENGLISH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASSNAME_MATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class ClassNameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClassName(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ClassName(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void isValidClassName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ClassName.isValidClassName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(ClassName.isValidClassName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(ClassName.isValidClassName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(ClassName.isValidClassName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(ClassName.isValidClassName(\"math*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(ClassName.isValidClassName(\"monday class\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(ClassName.isValidClassName(\"math 4E7\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(ClassName.isValidClassName(\"English\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ClassName eng \u003d new ClassName(VALID_CLASSNAME_ENGLISH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ClassName math \u003d new ClassName(VALID_CLASSNAME_MATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ClassName mon \u003d new ClassName(\"Monday Class\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        ClassName anotherEng \u003d new ClassName(VALID_CLASSNAME_ENGLISH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //null name-\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(eng.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //same object-\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(eng.equals(eng));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(eng.equals(anotherEng));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //different object-\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(eng.equals(\"Hi\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(eng.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //different class name string -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(eng.equals(math));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(eng.equals(mon));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/LessonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDTIME_MON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDTIME_TUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTTIME_MON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTTIME_TUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.ANOTHER_MON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.TUE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void isSameDay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(MON.isSameDay(MON));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //same day -\u003e returns true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(MON.isSameDay(ANOTHER_MON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //different day -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(MON.isSameDay(TUE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //edited to different day -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson editedMon \u003d new LessonBuilder(MON).withStartTime(VALID_STARTTIME_TUE).withEndTime(VALID_ENDTIME_TUE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(MON.isSameDay(editedMon));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void isSameLesson() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(MON.isSameLesson(MON));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //null object -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(MON.isSameLesson(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //different day and class name -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(MON.isSameLesson(TUE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //edited to have same class name, start time, end time -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson editedTue \u003d new LessonBuilder(TUE).withClassName(\"Monday Class\").withStartTime(VALID_STARTTIME_MON)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .withEndTime(VALID_ENDTIME_MON).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(MON.isSameLesson(editedTue));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //edited to only have same class name -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        editedTue \u003d new LessonBuilder(TUE).withClassName(\"Monday Class\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(MON.isSameLesson(editedTue));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(MON.equals(MON));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //null object -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(MON.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //different day and class name -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(MON.equals(TUE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //edited to have same class name, start time, end time -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Lesson editedTue \u003d new LessonBuilder(TUE).withClassName(\"Monday Class\").withStartTime(VALID_STARTTIME_MON)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "                .withEndTime(VALID_ENDTIME_MON).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(MON.equals(editedTue));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //edited to only have same class name -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        editedTue \u003d new LessonBuilder(TUE).withClassName(\"Monday Class\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(MON.equals(editedTue));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //different object -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(MON.equals(\"HI\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        //different object -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(TUE.equals(\"Bye\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/TimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(Time.isValidTime(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(Time.isValidTime(\"1234/5678/1010\")); // incorrect format of time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertFalse(Time.isValidTime(\"12/02/2010 250\")); // incorrect time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        // valid time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(Time.isValidTime(\"12/02/2020 1200\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(Time.isValidTime(\"23/09/2020 1000\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        assertTrue(Time.isValidTime(\"14/02/2020 0000\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/UniqueLessonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.LESSON_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.LESSON_TWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.lesson.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class UniqueLessonListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private final UniqueLessonList uniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void contains_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.contains(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void contains_assignmentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertFalse(uniqueLessonList.contains(LESSON_ONE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void contains_assignmentInList_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.add(LESSON_ONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertTrue(uniqueLessonList.contains(LESSON_ONE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void add_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.add(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void add_duplicateLesson_throwsDuplicateLessonException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.add(LESSON_ONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(seedu.address.model.lesson.exceptions.DuplicateLessonException.class, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                uniqueLessonList.add(LESSON_ONE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setLesson_nullTargetLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                uniqueLessonList.setLesson(null, LESSON_ONE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setLesson_nullEditedLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                uniqueLessonList.setLesson(LESSON_ONE, null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setLesson_targetLessonNotInList_throwsLessonNotFoundException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                uniqueLessonList.setLesson(LESSON_ONE, LESSON_ONE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setLesson_editedLessonIsSameLesson_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.add(LESSON_ONE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.setLesson(LESSON_ONE, LESSON_ONE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UniqueLessonList expectedUniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        expectedUniqueLessonList.add(LESSON_ONE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(expectedUniqueLessonList, uniqueLessonList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setLesson_editedLessonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.add(LESSON_ONE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.setLesson(LESSON_ONE, LESSON_TWO);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UniqueLessonList expectedUniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        expectedUniqueLessonList.add(LESSON_TWO);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(expectedUniqueLessonList, uniqueLessonList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void remove_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.remove(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void remove_assignmentDoesNotExist_throwsLessonNotFoundException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e uniqueLessonList.remove(LESSON_ONE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void remove_existingLesson_removesLesson() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.add(LESSON_ONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.remove(LESSON_ONE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UniqueLessonList expectedUniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(expectedUniqueLessonList, uniqueLessonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setLessons_nullUniqueLessonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                uniqueLessonList.setLessons((UniqueLessonList) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setLessons_uniqueLessonList_replacesOwnListWithProvidedUniqueLessonList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.add(LESSON_ONE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UniqueLessonList expectedUniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        expectedUniqueLessonList.add(LESSON_TWO);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.setLessons(expectedUniqueLessonList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(expectedUniqueLessonList, uniqueLessonList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setLessons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.setLessons((List\u003cLesson\u003e) null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setLessons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.add(LESSON_ONE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cLesson\u003e assignmentList \u003d Collections.singletonList(LESSON_TWO);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        uniqueLessonList.setLessons(assignmentList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        UniqueLessonList expectedUniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        expectedUniqueLessonList.add(LESSON_TWO);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(expectedUniqueLessonList, uniqueLessonList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setLessons_listWithDuplicateLessons_throwsDuplicateLessonException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        List\u003cLesson\u003e listWithDuplicateLessons \u003d Arrays.asList(LESSON_ONE, LESSON_ONE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                DuplicateLessonException.class, () -\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        uniqueLessonList.setLessons(listWithDuplicateLessons));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                uniqueLessonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/DisplayPictureTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class DisplayPictureTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void constructor_invalidDisplayPicture_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String inValidFileName \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DisplayPicture(inValidFileName));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void isValidDisplayPicture() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // null filename"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DisplayPicture.isValidFormat(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // invalid filenames"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(DisplayPicture.isValidFormat(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(DisplayPicture.isValidFormat(\" \")); // spaces only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertFalse(DisplayPicture.isValidFormat(\"asddf\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertFalse(DisplayPicture.isValidFormat(\"asddf234567uio\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(DisplayPicture.isValidFormat(\"D://\")); // file length less than 5"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(DisplayPicture.isValidFormat(\"/Users/file.pdf\")); // file is not jpg or png format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // valid filename"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertTrue(DisplayPicture.isValidFormat(\"/images/themyth.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertTrue(DisplayPicture.isValidFormat(\"file:/D:/IMG-20190206-WA0010.jpg\")); // actual file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 11,
      "weikiat97": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/MedicalConditionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class MedicalConditionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MedicalCondition(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_invalidMedicalCondition_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String invalidMedicalCondition \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MedicalCondition(invalidMedicalCondition));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void isValidMedicalCondition() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // null medical condition"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MedicalCondition.isValidMedicalCondition(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // invalid medical conditions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(MedicalCondition.isValidMedicalCondition(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(MedicalCondition.isValidMedicalCondition(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // valid medical conditions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(MedicalCondition.isValidMedicalCondition(\"Sinus\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(MedicalCondition.isValidMedicalCondition(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(MedicalCondition.isValidMedicalCondition(\"Pneumonoultramicroscopicsilicovocanoconiosis\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // long medical conditions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 10,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/ParentPhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class ParentPhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ParentPhone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void constructor_invalidParentPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String invalidParentPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ParentPhone(invalidParentPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void isValidParentPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // null parent phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParentPhone.isValidParentPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // invalid parent phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(ParentPhone.isValidParentPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(ParentPhone.isValidParentPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(ParentPhone.isValidParentPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(ParentPhone.isValidParentPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(ParentPhone.isValidParentPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(ParentPhone.isValidParentPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // valid parent phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(ParentPhone.isValidParentPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(ParentPhone.isValidParentPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(ParentPhone.isValidParentPhone(\"124293842033123\")); // long parent phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidParentPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(Phone.isValidParentPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(Phone.isValidParentPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(Phone.isValidParentPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(Phone.isValidParentPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(Phone.isValidParentPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(Phone.isValidParentPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(Phone.isValidParentPhone(\"91139548\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(Phone.isValidParentPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(Phone.isValidParentPhone(\"12429384\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 11,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/StudentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e student.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 28,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/UniqueStudentListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.setStudent(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudent(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudents_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((UniqueStudentList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudents_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.setStudents(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        uniqueStudentList.setStudents(studentList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudents(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            -\u003e uniqueStudentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "weikiat97": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAssignmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.storage.JsonAdaptedAssignment.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalAssignments.ASSIGNMENT_MATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class JsonAdaptedAssignmentTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final String INVALID_ASSIGNMENT_NAME \u003d \"M@ath\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final String INVALID_ASSIGNMENT_DEADLINE \u003d \"24/02/200000\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final String VALID_ASSIGNMENT_NAME \u003d ASSIGNMENT_MATH.getAssignmentName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final String VALID_ASSIGNMENT_DEADLINE \u003d ASSIGNMENT_MATH.getAssignmentDeadline().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_validAssignmentDetails_returnsAssignment() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(ASSIGNMENT_MATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(ASSIGNMENT_MATH, assignment.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_invalidAssignmentName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonAdaptedAssignment(INVALID_ASSIGNMENT_NAME, VALID_ASSIGNMENT_DEADLINE, new ArrayList\u003cString\u003e(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        new ArrayList\u003cString\u003e(), false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d AssignmentName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_nullAssignmentName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(null, VALID_ASSIGNMENT_DEADLINE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new ArrayList\u003cString\u003e(), new ArrayList\u003cString\u003e(), false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, AssignmentName.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_invalidAssignmentDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonAdaptedAssignment(VALID_ASSIGNMENT_NAME, INVALID_ASSIGNMENT_DEADLINE, new ArrayList\u003cString\u003e(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        new ArrayList\u003cString\u003e(), false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d AssignmentDeadline.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_nullAssignmentDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedAssignment assignment \u003d new JsonAdaptedAssignment(VALID_ASSIGNMENT_NAME, null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new ArrayList\u003cString\u003e(), new ArrayList\u003cString\u003e(), false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, AssignmentDeadline.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, assignment::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStudentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.UploadPictureCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.DisplayPicture;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.MedicalCondition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.ParentPhone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final String INVALID_PARENTPHONE \u003d \"+656789\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final String INVALID_MEDICALCONDITION \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final String INVALID_DISPLAYPICTURE_PATH \u003d \"/images/themyth.json\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final String VALID_PARENTPHONE \u003d BENSON.getParentPhone().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final String VALID_MEDICALCONDITION \u003d BENSON.getMedicalCondition().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private static final String VALID_DISPLAYPICTURE_PATH \u003d \"/images/themyth.png\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonAdaptedStudent(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        VALID_ADDRESS, VALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(null, VALID_PHONE, VALID_EMAIL, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                VALID_ADDRESS, VALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        VALID_ADDRESS, VALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, null, VALID_EMAIL, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                VALID_ADDRESS, VALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        VALID_ADDRESS, VALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, null, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                VALID_ADDRESS, VALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_invalidParentPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_PARENTPHONE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        VALID_ADDRESS, VALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d ParentPhone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_nullParentPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                VALID_ADDRESS, VALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ParentPhone.class.getSimpleName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_invalidMedicalCondition_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        VALID_ADDRESS, VALID_DISPLAYPICTURE_PATH, INVALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d MedicalCondition.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_invalidDisplayPicturePath_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        VALID_ADDRESS, INVALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d UploadPictureCommand.MESSAGE_WRONG_FORMAT;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_nullDisplayPicturePath_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                VALID_ADDRESS, null, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DisplayPicture.class.getSimpleName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        INVALID_ADDRESS, VALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                null, VALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, VALID_TAGS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_PARENTPHONE,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                        VALID_ADDRESS, VALID_DISPLAYPICTURE_PATH, VALID_MEDICALCONDITION, invalidTags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "weikiat97": 101,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonNotebookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class JsonNotebookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonNotebookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void readNotebook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readNotebook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private java.util.Optional\u003cReadOnlyNotebook\u003e readNotebook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new JsonNotebookStorage(Paths.get(filePath)).readNotebook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertFalse(readNotebook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNotebook(\"notJsonFormatNotebook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void readNotebook_invalidStudentNotebook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNotebook(\"invalidStudentNotebook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void readNotebook_invalidAndValidStudentNotebook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNotebook(\"invalidAndValidStudentNotebook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void readAndSaveNotebook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempNotebook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Notebook original \u003d getTypicalNotebook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        JsonNotebookStorage jsonNotebookStorage \u003d new JsonNotebookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        jsonNotebookStorage.saveNotebook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        ReadOnlyNotebook readBack \u003d jsonNotebookStorage.readNotebook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertEquals(original, new Notebook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        original.deleteStudent(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        jsonNotebookStorage.saveNotebook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        readBack \u003d jsonNotebookStorage.readNotebook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        //assertEquals(original, new Notebook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        jsonNotebookStorage.saveNotebook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        readBack \u003d jsonNotebookStorage.readNotebook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        //assertEquals(original, new Notebook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void saveNotebook_nullNotebook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveNotebook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Saves {@code Notebook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private void saveNotebook(ReadOnlyNotebook notebook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            new JsonNotebookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                    .saveNotebook(notebook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void saveNotebook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveNotebook(new Notebook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableClassroomTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.testutil.TypicalClassrooms;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "public class JsonSerializableClassroomTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableClassroomTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final Path TYPICAL_STUDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsClassroom.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentClassroom.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentClassroom.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_typicalStudentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        JsonSerializableClassroom dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_STUDENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                JsonSerializableClassroom.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        Classroom classroomFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Classroom typicalStudentsClassroom \u003d TypicalClassrooms.getTypicalClassroom().get(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertEquals(classroomFromFile, typicalStudentsClassroom);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        JsonSerializableClassroom dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                JsonSerializableClassroom.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public void toModelType_duplicateStudents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        JsonSerializableClassroom dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "                JsonSerializableClassroom.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableClassroom.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 17,
      "weikiat97": 13,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "        userPrefs.setClassroomFilePath(Paths.get(\"classroom.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 1,
      "weikiat97": 6,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.TypicalNotebook.getTypicalNotebook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.ReadOnlyNotebook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        JsonNotebookStorage notebookStorage \u003d new JsonNotebookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        storageManager \u003d new StorageManager(notebookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void notebookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        //TODO make test work"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "         * {@link JsonClassroomStorage} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonClassroomStorageTest} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "         *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Notebook original \u003d getTypicalNotebook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        storageManager.saveNotebook(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ReadOnlyNotebook retrieved \u003d storageManager.readNotebook().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        //assertEquals(original, new Notebook(retrieved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "    public void getClassroomFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertNotNull(storageManager.getNotebookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 15,
      "Xelyion": 3,
      "weikiat97": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AssignmentBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class to help with building Assignment objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class AssignmentBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String DEFAULT_ASSIGNMENT_NAME \u003d \"Math Assignment 1\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String DEFAULT_ASSIGNMENT_DEADLINE \u003d \"31/12/2019 2359\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String EDITED_ASSIGNMENT_NAME \u003d \"Science Assignment 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String EDITED_ASSIGNMENT_DEADLINE \u003d \"31/10/2019 2359\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private AssignmentName assignmentName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private AssignmentDeadline assignmentDeadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public AssignmentBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assignmentName \u003d new AssignmentName(DEFAULT_ASSIGNMENT_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assignmentDeadline \u003d new AssignmentDeadline(DEFAULT_ASSIGNMENT_DEADLINE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Initializes the Assignment with the data of {@code assignmentToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public AssignmentBuilder(Assignment assignmentToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assignmentName \u003d assignmentToCopy.getAssignmentName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        assignmentDeadline \u003d assignmentToCopy.getAssignmentDeadline();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code AssignmentName} of the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public AssignmentBuilder withAssignmentName(String assignmentName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignmentName \u003d new AssignmentName(assignmentName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code AssignmentDeadline} and set it to the {@code Assignment} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public AssignmentBuilder withAssignmentDeadline(String assignmentDeadline) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.assignmentDeadline \u003d new AssignmentDeadline(assignmentDeadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Assignment build() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new Assignment(assignmentName, assignmentDeadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 3,
      "weikiat97": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClassroomBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xelyion"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xelyion"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "//@@author weikiat97"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class to help with building Classroom objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " *     {@code Classroom ab \u003d new ClassroomBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class ClassroomBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Classroom classroom;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ClassroomBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        classroom \u003d new Classroom();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ClassroomBuilder(Classroom classroom) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.classroom \u003d classroom;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds a classroom name to the {@code Classroom} that we are building."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ClassroomBuilder withClassroomName(String classroomName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        classroom.setClassroomName(classroomName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds a list of new {@code Student} to the {@code Classroom} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ClassroomBuilder withStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        classroom.setStudents(students);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds a list of new {@code Assignment} to the {@code Classroom} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public ClassroomBuilder withAssignments(List\u003cAssignment\u003e assignments) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        classroom.setAssignments(assignments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Classroom build() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return classroom;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xelyion": 4,
      "weikiat97": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditAssignmentDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditAssignmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditAssignmentCommand.EditAssignmentDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentDeadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.AssignmentName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class to help with building EditAssignmentDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class EditAssignmentDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private EditAssignmentCommand.EditAssignmentDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditAssignmentDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor \u003d new EditAssignmentCommand.EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditAssignmentDescriptorBuilder(EditAssignmentDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.descriptor \u003d new EditAssignmentDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns an {@code EditAssignmentDescriptor} with fields containing {@code Assignment}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditAssignmentDescriptorBuilder(Assignment assignment) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor \u003d new EditAssignmentCommand.EditAssignmentDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setAssignmentName(assignment.getAssignmentName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setAssignmentDeadline(assignment.getAssignmentDeadline());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code AssignmentName} of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditAssignmentDescriptorBuilder withAssignmentName(String assignmentName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setAssignmentName(new AssignmentName(assignmentName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code AssignmentDeadline} of the {@code EditAssignmentDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditAssignmentDescriptorBuilder withAssignmentDeadline(String assignmentDeadline) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setAssignmentDeadline(new AssignmentDeadline(assignmentDeadline));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditAssignmentCommand.EditAssignmentDescriptor build() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.MedicalCondition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.ParentPhone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private EditStudentCommand.EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor \u003d new EditStudentCommand.EditStudentDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor \u003d new EditStudentCommand.EditStudentDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setPhone(student.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setAddress(student.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code ParentPhone} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentDescriptorBuilder withParentPhone(String parentPhone) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setParentPhone(new ParentPhone(parentPhone));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code Address} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code MedicalCondition} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentDescriptorBuilder withMedicalCondition(String medicalCondition) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setMedicalCondition(new MedicalCondition(medicalCondition));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public EditStudentCommand.EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LessonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.ClassName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * A utility class to help with building Lesson objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class LessonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final String DEFAULT_CLASSNAME \u003d \"Chemistry 2E6\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private ClassName className;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private Time startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private Time endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public LessonBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        className \u003d new ClassName(DEFAULT_CLASSNAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar start \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        start.set(2020, 1, 12, 12, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        startTime \u003d new Time(start);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        Calendar end \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        end.set(2020, 1, 12, 13, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        endTime \u003d new Time(end);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Initializes the LessonBuilder with the data of {@code lessonToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public LessonBuilder(Lesson lessonToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        className \u003d lessonToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        startTime \u003d lessonToCopy.getStartTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        endTime \u003d lessonToCopy.getEndTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Sets the {@code ClassName} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public LessonBuilder withClassName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        this.className \u003d new ClassName(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Sets the {@code StartTime} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public LessonBuilder withStartTime(String time) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            this.startTime \u003d ParserUtil.parseTime(time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Sets the {@code EndTime} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public LessonBuilder withEndTime(String time) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            this.endTime \u003d ParserUtil.parseTime(time);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public Lesson build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new Lesson(startTime, endTime, className);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 80,
      "weikiat97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NotebookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class to help with building Notebook objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " *     {@code Notebook nb \u003d new NotebookBuilder().withClassrooms(classrooms).withLessons(lessons).build();}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class NotebookBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Notebook notebook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public NotebookBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook \u003d new Notebook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public NotebookBuilder(Notebook notebook) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.notebook \u003d notebook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Adds a list of new {@code Classsrooms} to the {@code Notebook} that we are building."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public NotebookBuilder withClassrooms(List\u003cClassroom\u003e classrooms) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.setClassrooms(classrooms);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Adds a list of new {@code UniqueLessonLists} to the {@code Notebook} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public NotebookBuilder withLessonLists(List\u003cUniqueLessonList\u003e lessons) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        notebook.setAllLessons(lessons);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     * Adds a list of new {@code Lessons} to the {@code Notebook} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public NotebookBuilder withLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        notebook.setLessons(lessons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Notebook build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return notebook;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 11,
      "weikiat97": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import seedu.address.model.student.DisplayPicture;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.MedicalCondition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.ParentPhone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String DEFAULT_PARENTPHONE \u003d \"888776655\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final String DEFAULT_MEDICALCONDITION \u003d \"Sinus\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private ParentPhone parentPhone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private MedicalCondition medicalCondition;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private DisplayPicture displayPicture;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        displayPicture \u003d new DisplayPicture();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        parentPhone \u003d new ParentPhone(DEFAULT_PARENTPHONE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        medicalCondition \u003d new MedicalCondition(DEFAULT_MEDICALCONDITION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        phone \u003d studentToCopy.getPhone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        address \u003d studentToCopy.getAddress();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        displayPicture \u003d new DisplayPicture(studentToCopy.getDisplayPictureFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        parentPhone \u003d studentToCopy.getParentPhone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        medicalCondition \u003d studentToCopy.getMedicalCondition();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code Address} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Sets {@code display picture} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public StudentBuilder withDisplayPicture(String fileName) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.displayPicture \u003d new DisplayPicture(fileName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code Phone} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code ParentPhone} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentBuilder withParentPhone(String parentPhone) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.parentPhone \u003d new ParentPhone(parentPhone);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public StudentBuilder withMedicalCondition(String medicalCondition) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        this.medicalCondition \u003d new MedicalCondition(medicalCondition);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return new Student(name, phone, email, parentPhone, address, displayPicture, medicalCondition, tags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 13,
      "weikiat97": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICALCONDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARENTPHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static String getAddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return AddStudentCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sb.append(PREFIX_PHONE + student.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        sb.append(PREFIX_PARENTPHONE + student.getParentPhone().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sb.append(PREFIX_ADDRESS + student.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sb.append(PREFIX_PARENTPHONE + student.getParentPhone().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        sb.append(PREFIX_MEDICALCONDITION + student.getMedicalCondition().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        student.getTags().stream().forEach("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "weikiat97": 21,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Student getStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAssignments.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.assignment.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class containing a list of {@code Assignment} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class TypicalAssignments {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Assignment ASSIGNMENT_MATH \u003d new AssignmentBuilder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withAssignmentName(\"Math Homework 2\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withAssignmentDeadline(\"12/12/2019 1800\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Assignment ASSIGNMENT_SCIENCE \u003d new AssignmentBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            .withAssignmentName(\"Science Assignment 2\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withAssignmentDeadline(\"08/02/2020 2020\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Assignment ASSIGNMENT_ENGLISH \u003d new AssignmentBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withAssignmentName(\"English Worksheet 1\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withAssignmentDeadline(\"02/12/2024 1029\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private TypicalAssignments() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static List\u003cAssignment\u003e getTypicalAssignments() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ASSIGNMENT_MATH, ASSIGNMENT_SCIENCE, ASSIGNMENT_ENGLISH));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1,
      "weikiat97": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalClassrooms.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.classroom.Classroom;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class containing a list of {@code Classroom} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class TypicalClassrooms {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String CLASSROOM_ONE_NAME \u003d \"Classroom One\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String CLASSROOM_TWO_NAME \u003d \"Classroom Two\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Classroom CLASSROOM_ONE \u003d new ClassroomBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withClassroomName(\"Classroom One\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withStudents(TypicalStudents.getTypicalStudents())"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withAssignments(TypicalAssignments.getTypicalAssignments()).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Classroom CLASSROOM_TWO \u003d new ClassroomBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withClassroomName(\"Classroom Two\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withStudents(TypicalStudents.getTypicalStudents())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withAssignments(TypicalAssignments.getTypicalAssignments()).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private TypicalClassrooms() {};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static List\u003cClassroom\u003e getTypicalClassroom() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CLASSROOM_ONE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2,
      "weikiat97": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFiles.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class containing a list of {@code String} files to be used in tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class TypicalFiles {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String FILE_EXAMPLE_1 \u003d \"path/file.png\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static final String FILE_EXAMPLE_2 \u003d \"path/file.jpg\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 8,
      "weikiat97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Index INDEX_FIRST_OBJECT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Index INDEX_SECOND_OBJECT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Index INDEX_THIRD_OBJECT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLessons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " * A utility class containing a list of {@code Lesson} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "public class TypicalLessons {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final Lesson MON \u003d new LessonBuilder().withClassName(\"Monday Class\").withStartTime(\"06/01/2020 1200\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            .withEndTime(\"06/01/2020 1300\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final Lesson ANOTHER_MON \u003d new LessonBuilder().withClassName(\"Second Mon Class\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            .withStartTime(\"06/01/2020 1400\").withEndTime(\"06/01/2020 1500\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final Lesson TUE \u003d new LessonBuilder().withClassName(\"Tuesday Class\").withStartTime(\"07/01/2020 1200\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            .withEndTime(\"07/01/2020 1300\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final Lesson WED \u003d new LessonBuilder().withClassName(\"Wednesday Class\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            .withStartTime(\"08/01/2020 1200\").withEndTime(\"08/01/2020 1300\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final Lesson THUR \u003d new LessonBuilder().withClassName(\"Thursday Class\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            .withStartTime(\"09/01/2020 1200\").withEndTime(\"09/01/2020 1300\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static final Lesson FRI \u003d new LessonBuilder().withClassName(\"Friday Class\").withStartTime(\"10/01/2020 1200\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            .withEndTime(\"10/01/2020 1300\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Lesson LESSON_ONE \u003d new LessonBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withClassName(\"4C3 Math\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withStartTime(\"16/12/2019 1800\").withEndTime(\"16/12/2019 1900\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Lesson LESSON_TWO \u003d new LessonBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withClassName(\"2C5 English\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withStartTime(\"17/12/2019 1200\").withEndTime(\"20/12/2019 1400\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Lesson LESSON_THREE \u003d new LessonBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withClassName(\"3E Science\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withStartTime(\"18/12/2019 0800\").withEndTime(\"18/12/2019 1000\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    private TypicalLessons() {}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * Makes the lesson list from the list of UniqueLessonList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "     * @param lessonList a list of UniqueLessonList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private static void makeLessonList(List\u003cUniqueLessonList\u003e lessonList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            lessonList.add(new UniqueLessonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        lessonList.get(0).add(LESSON_ONE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        lessonList.get(1).add(LESSON_TWO);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        lessonList.get(2).add(LESSON_THREE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static List\u003cUniqueLessonList\u003e getTypicalLessonLists() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        List\u003cUniqueLessonList\u003e lessonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        makeLessonList(lessonList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(lessonList.get(0), lessonList.get(1), lessonList.get(2),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "                lessonList.get(3), lessonList.get(4), lessonList.get(5), lessonList.get(6)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    public static List\u003cLesson\u003e getTypicalLessons() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LESSON_ONE, LESSON_TWO, LESSON_THREE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 45,
      "weikiat97": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalNotebook.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalClassrooms.getTypicalClassroom;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalLessonLists;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalLessons;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.Notebook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class containing a list of {@code Notebook} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class TypicalNotebook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Notebook NOTEBOOK \u003d new NotebookBuilder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withClassrooms(getTypicalClassroom())"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sheryltay28"
        },
        "content": "            .withLessonLists(getTypicalLessonLists())"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withLessons(getTypicalLessons()).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public TypicalNotebook() {};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "weikiat97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static Notebook getTypicalNotebook() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "        return new Notebook(NOTEBOOK);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sheryltay28": 2,
      "weikiat97": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStudents.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICALCONDITION_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARENTPHONE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARENTPHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "weikiat97"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\").withPhone(\"94822243\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withMedicalCondition(\"HIV\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\").withPhone(\"94824527\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\").withPhone(\"94824423\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withMedicalCondition((\"Sinus\")).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withPhone(\"84824246\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withPhone(\"84821312\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withParentPhone(VALID_PARENTPHONE_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withMedicalCondition(VALID_MEDICALCONDITION_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withParentPhone(VALID_PARENTPHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "weikiat97"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "weikiat97": 26,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class HistoryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void testHistoryFunctionality() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        History historyTest \u003d new History();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // test history when empty"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e historyTest.getNextCommand());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e historyTest.getPastCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // test when there is history"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        historyTest.sendToHistory(\"test\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(historyTest.getPastCommand(), historyTest.getNextCommand());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        historyTest.sendToHistory(\"test2\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"test2\", historyTest.getPastCommand());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"test\", historyTest.getPastCommand());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"test\", historyTest.getNextCommand());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"test2\", historyTest.getNextCommand());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StylesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class StylesTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void inValidTextFlowArgs() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Styles.buildTextFlow(null, \"hi\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Styles.buildTextFlow(\"hi\", null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Styles.buildTextFlow(\"\", \"\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 15
    }
  }
]
