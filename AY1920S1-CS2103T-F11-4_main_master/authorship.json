[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103T-F11-4/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103T-F11-4/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* \u003c\u003cUserGuide#, User guide\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer guide\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* \u003c\u003cAboutUs#, About\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* \u003c\u003cContactUs#, Contact\u003e\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*NUStudy* is an application for managing your lecture notes and flash cards,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "so you can _study and play at the same time_. All university members – students,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "lecturers, tutors, even research staff – can come together and share the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "foundation of their existence for the greater good."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* AddressBook-Level3, which this application is a fork of, was created by the National University of Singapore (NUS) https://se-education.org[SE-EDU]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* link:LICENSE[MIT licence]"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 12,
      "-": 18
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    archiveBaseName \u003d \u0027nustudy\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    destinationDirectory \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        \u0027site-name\u0027: \u0027NUStudy\u0027,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F11-4/main\u0027,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 5,
      "-": 123
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "NUStudy was developed by the following students. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "We are a team based in https://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Jeremy Tan Jie Rui"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "image::parcly-taxel.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "{empty}[https://github.com/Parcly-Taxel[github]] [\u003c\u003cparcly-taxel#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Role: Main integrator, scheduling and tracking manager, Git expert +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Responsibilities: Implementing `Note` module (lecture notes)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Lee Li Ying Irene"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::irene-lly.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "{empty}[https://github.com/irene-lly[github]] [\u003c\u003cirene-lly#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Responsibilities: Implementing the report feature"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Shui Yao"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::shuiyao-sg.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "{empty}[https://github.com/shuiyao-sg[github]] [\u003c\u003cshuiyao-sg#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Role: Team lead +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Responsibilities: Implementing the revision feature"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Wang Xueting"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::shirleywangxt.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "{empty}[https://github.com/ShirleyWangxt[github]][\u003c\u003cshirleywangxt#, protfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Role: Testing, Co-maintainer of documentation +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Responsibilities: Implementing question management feature"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Zhang Dongjun"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::auxinnn.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "{empty}[https://github.com/Auxinnn[github]] [\u003c\u003cauxinnn#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Role: Deliverables and deadlines +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Responsibilities: Implementing the quiz feature"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 7,
      "shuiyao-sg": 17,
      "Auxinnn": 1,
      "irene-lly": 1,
      "ShirleyWangxt": 1,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* *Bug reports, suggestions*: Post in our https://github.com/AY1920S1-CS2103T-F11-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing*: We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* *Email us* at `e0191785 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy DevOps"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Build automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Continuous integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "We use https://travis-ci.org/[Travis] to perform _continuous integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Documentation previews"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Making a release"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".  Generate a jar file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Managing dependencies"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "A project often depends on third-party libraries. For example,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "this project depends on the https://github.com/FasterXML/jackson[Jackson library]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "for JSON parsing. Managing these dependencies can be automated using Gradle."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 12,
      "-": 30
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy developer guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The architecture diagram below gives an overall view of NUStudy\u0027s structure. Each component"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "will be explained in more detail in the coming sections."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "It is responsible for initializing and shutting down the application, linking and cleaning up where necessary."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The `commons` package contains classes used by multiple other components, of which `LogsCenter` is important"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "as it is used for logging. The rest of NUStudy consists of four primary components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of NUStudy."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds application data in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads and writes data to disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Each of the four components defines its _API_ in an `interface` with the same name as the component"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and exposes the API using a `{Component Name}Manager` class. For example, the `Logic` component"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "(see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "using the `LogicManager.java` class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Inter-component interaction"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The sequence diagram below shows how the components interact with each other for the scenario where the user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "issues the command `deletenote 1`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d `UI`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".Class diagram of the `UI` component"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ".Detailed class diagram for `Panels` package"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::PanelPackageClassDiagram.png[]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "_API:_ link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "`NoteListPanel`, `StatusBarFooter`, etc. All these, including the `MainWindow`, inherit from the abstract"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "`UiPart` class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The `UI` component uses JavaFX. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "This component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d `Logic`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".Class diagram of the `Logic` component"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "_API:_ link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".  `Logic` uses the `AppDataParser` class to parse the user command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Given below is the sequence diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The lifeline for `DeleteCommandParser` should end at the destroy marker × but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".Interactions inside the `Logic` component for the `deletenote 1` command"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d `Model`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".Class diagram of the `Model` component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "_API:_ link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The `Model` component is independent of the other three primary components of NUStudy."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "It stores application data – notes, questions and revision tasks – as well as a `UserPrefs` object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "representing the user\u0027s preferences. It also exposes an unmodifiable `ObservableList\u003cNote\u003e` that is bound to the UI,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "so any data changes are immediately user-visible."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d `Storage`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".Class diagram of the `Storage` component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "_API:_ link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The `Storage` component reads and writes `UserPrefs` objects and NUStudy data in JSON format."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "This section describes some finer details on how certain features are implemented."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// tag::lecimage[]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Image support for lecture notes"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Usually, we do not learn best from just text; we rely on images that our minds can process more easily."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "As such, implementing images in lecture notes was considered very important. Although some lecture notes"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "have multiple images, it is always possible to combine them using basic image editing software like the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "GNU Image Manipulation Program (GIMP) and Paint, so the implementation was limited to at most image per note."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Instead of a custom class to represent an image, JavaFX\u0027s `scene.image.Image` is used instead."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "This is out of necessity, since an `ImageView` is needed to display an image in the GUI and it requires"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "an `Image` object, not just a `String` path to the image. No significant coupling is introduced"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "by this choice because `Image` objects can exist without a GUI to display them."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The dialog brought up to let the user choose a file returns `null` if the dialog is closed"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "_without_ choosing a file (i.e. clicking the close button). Treating `null` as \"no image\" would surprise the user who"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "decides to edit a lecture note\u0027s image but then decides not to – the image would simply disappear without"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "warning. Therefore the value `i/none` has to be explicitly provided to remove the image, and `EditNoteDescriptor`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "has an additional field `isImageRemoved` to track this. If the image comes out as `null` but `i/none` was"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "not provided, the image is unchanged."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The static method `selectImage()` in `AppUtil` opens up a dialog allowing the user to choose the necessary image."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "This is possible because `FileChooser#showOpenDialog()`, which shows the dialog, can be fed an argument of `null`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "instead of having to rely on a `Window` object, which is the domain of the `UI` module."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".Sequence diagram for the execution of `EditNoteCommandParser`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "image::ImageSelectionSequenceDiagram.png[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The diagram above shows how `EditNoteCommandParser` creates an `EditNoteCommand`. It first"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "creates an `EditNoteDescriptor` to hold details of what changes in the note, setting the new"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "title (provided by the `t/` argument) and content (`c/`) as necessary. If `i/none` is present,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "the `EditNoteDescriptor` is set to remove the image and no dialog is shown. If `i/` is"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "otherwise provided, `EditNoteCommandParser` calls the static method `AppUtil#selectImage()`,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "opening up the image selection dialog; the returned `Image` object is then set in the `EditNoteDescriptor`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "An `EditNoteCommand` containing the `EditNoteDescriptor` is finally returned for execution."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Images are only referenced, not embedded, in the JSON file holding application data. These references are"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Uniform Resource Identifiers (URIs) of system files, e.g. `file:data/picture.png`. Since NUStudy is meant to be portable,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "we cannot use absolute paths, since they would break when the images are moved or deleted. Instead we copy images"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "into its data folder, side-by-side with the JSON file, upon execution of any `addnote` or `editnote` command with"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "an image. The references are then changed to point to these local copies, becoming relative URIs."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// end::lecimage[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// tag::lecimagedesignconsiderations[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations: where to place the image?"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* _Alternative 1 (current choice):_ Images are shown within each lecture note in the first column, and each lecture note"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "shows all of its title, content and image"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Pros: Easier to implement (FXML does not have to reach into other places)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Cons: Scrolling through lecture notes, all with images, takes time, but this downside is alleviated"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "by the `findnote` command"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* _Alternative 2:_ Place the images in the second column, below their corresponding title and content"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Pros: More visually appealing, since by keeping just one note in the second column it becomes a kind of flash card"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Cons: Harder to implement (FXML must reach into the object representing the second column),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "need to have a separate `NotePreview` JavaFX object since images are only going to be displayed"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "in the second column"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations: when to copy images into the local folder"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* _Alternative 1 (current choice):_ Images are copied when the command is executed, i.e. `Command#execute()`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Pros: Effects a better separation of concerns (image selection is not execution of the command, image"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "copying may be thought of as a side effect of command execution)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Cons: Need to adapt the file copying code to each command"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* _Alternative 2:_ Images are copied when the image is selected, i.e. `AppUtil#selectImage()`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Pros: Compared to alternative 1, has less time between initial image selection and the copy into"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "application data. There is a potential application risk if"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Cons: `selectImage()` has two only loosely related responsibilities (worse separation of concerns),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "impossible to take into account user preferences for where the application data is stored"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// end::lecimagedesignconsiderations[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "// tag::questiond[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d Question management feature"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The question management feature is facilitated by `Model`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The question-related commands extend `Command` with the question object if necessary."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The commands update the `Model` which is implemented by `ModelManager`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "This in turn updates `AppData` which stores all the questions internally as `UniqueQuestionList`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Local data will be updated in the end by `LogicManager`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The commands include:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `AddQuestionCommand` -- Adds a new question to the app."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `DeleteQuestionCommand` -- Deletes an existing question in the app."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `ListQuestionCommand` -- Views the list of all questions available."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `EditQuestionCommand` -- Edits an existing question in the app. (to be implemented)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `FindQuestionCommand` -- Finds a question with a specified keyword. (to be implemented)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#addQuestion(Question question)`,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "`Model#deleteQuestion(Question question)`, `Model#getFilteredQuestionList()` and"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "`Model#setQuestion(Question target, Question editedQuestion)` respectively."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Given below is an example usage scenario and how the question mechanism behaves at each step."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Step 1. The user launches the application for the first time. The app will load all existing information from storage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Step 2. The user executes `addq q/QUESTION a/ANSWER s/SUBJECT d/DIFFICULTY` command to add a new question to the app."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The `addq` command calls `Model#addQuestion(Question question)`, causing the `AppData` to be updated with the new question."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Step 3. The user executes `deleteq 5` command to delete the 5th question in the app. The `deleteq` command calls `Model#deleteQuestion(Question target)`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "and `Model#updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate)`, causing the `AppData` to be updated with the"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "target question removed."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Step 4. The user executes `editq 2 a/NEW_ANSWER` command to edit the answer of the 2nd question in the app."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The `editq` command calls `Model#setQuestion(Question target, Question editedQuestion)` and"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "`Model#updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate)`, causing the `AppData` to be updated with the original"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "question being replaced by the edited question."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The following sequence diagram shows how the `addq` operation works:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::AddQuestionSequenceDiagram.png[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::AddQuestionActivityDiagram.png[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design considerations: How `addq`/`deleteq`/`editq` commands execute"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* _Alternative 1 (current choice):_ Update the internal storage `UniqueQuestionList` in `AppData` first, then save the updated appData"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "in local storage when the command finishes executing."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Cons: Need the extra step to ensure that the internal list is correctly maintained."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* _Alternative 2:_ Update the local storage directly when the command is executing."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Pros: No need to implement the internal list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Cons: Will access local memory more frequently. May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design considerations: Data structure to support the question commands"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* _Alternative 1 (current choice):_ Use a `UniqueQuestionList` to store questions in `AppData`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Pros: Cater to the question model specifically. Question list operations are encapsulated in one class."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Cons: Logic is duplicated as other models also implement similar list structure."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* _Alternative 2:_ Use Java list to store the questions."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Pros: Do not need to maintain a separate list class."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Cons: Violates Single Responsibility Principle and Separation of Concerns as the model needs to maintain various"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "list operations."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "// end::questiond[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d Quiz mode for revision"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "The quiz mode feature is facilitated by `Model`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "The quiz-related commands extend `Command` with specific question object."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "The commands update the `Model` which is implemented by `ModelManager`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "This in turn updates `AppData` which stores filtered specific questions internally as `QuizQuestionList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Local data will be updated in the end by `LogicManager`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "The commands include:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* `QuizModeCommand` -- Enters the quiz mode with questions selected by user."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* `QuizCheckAnswer` -- Checks the correctness of answer entered by user."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* `QuizShowAnswerCommand` -- Shows the answer for current question."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* `QuitQuizModeCommand` -- Quits the quiz mode."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#getQuizQuestions(int numOfQuestions, Subject subject"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Difficulty difficulty)`, `Model#setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList)`,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "`Model#showQuizAnswer(int index)`, `Model#getFilteredQuizQuestionList()`, `Model#getFilteredQuizResultList()`,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "`Model#checkQuizAnswer(int index, Answer answer)`, `Model#addQuizResult(QuizResult quizResult)`,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "`Model#getFilteredQuizResultList()` and `Model#clearQuizQuestionList()` respectively."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Given below is an example usage scenario and how the question mechanism behaves at each step."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Step 1. The user launches the application for the first time. The app will load all existing information from storage."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Step 2. The user executes `quiz n/NUMBER OF QUESTIONS d/DIFFICULTY s/SUBJECT` command to enter quiz mode of the app."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "The `quiz` command calls `Model#getQuizQuestions(int numOfQuestions, Subject subject Difficulty difficulty)` and"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "`Model#setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList)`, causing the `AppData` to be updated with"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "a list of specific question selected by user for quiz."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Step 3. The user executes `INDEX:ANSWER` to answer the question. It calls `Model#checkQuizAnswer(int index,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Answer answer)` and `Model#addQuizResult(QuizResult quizResult)`, causing the `AppData` to be updated with the result"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "of the answer."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Step 4. The user executes `show 2` command to show the answer of 2nd quiz question in the app. The `show` command calls"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "`Model#showQuizAnswer(int index)`, causing the `AppData` to display the answer on the Ui."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Step 5. The user executes `quit` command to exit from the quiz mode. The `quit` command calls"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "`Model#clearQuizQuestionList()`, causing the `AppData` to clear all quiz question list and return to normal mode."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "The following sequence diagram shows how the `quiz` operation works:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "image::QuizModeSequenceDiagram.png[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command for quiz:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "image::QuizModeActivityDiagram.png[width\u003d400]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store the quiz results"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* **Alternative 1 (current choice):** Update the internal storage `QuizResultList` in `AppData` first, then save the"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "updated appData in local storage when the command finishes executing."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** Cons: Need the extra step to ensure that the internal list is correctly maintained."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* **Alternative 2:** Update the local storage directly when the command is executing."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** Pros: No need to implement the internal list."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** Cons: Will access local memory more frequently. May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the quiz commands"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* **Alternative 1 (current choice):** Use `QuizQuestionList` and `QuizResultList` to store data in `AppData`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** Pros: Cater to the quiz model specifically. Quiz question and result list operations are encapsulated in one class."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** Cons: Logic is duplicated as other models also implement similar list structure."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* **Alternative 2:** Use Java list to store the quiz questions and results."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** Pros: Do not need to maintain a separate list class."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** Cons: Violates Single Responsibility Principle and Separation of Concerns as the model needs to maintain various"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "list operations."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d Statistics feature"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "The statistics feature gathers data stored from quizzes done in NUStudy to analyse and return an output."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "The different commands supported by the statistics feature are used to filter the type of statistics the user wants."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "These commands include:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* `GetQnsCommand` -- Gets all questions answered correctly/incorrectly."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* `GetReportCommand` -- Returns a report of the specified question."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* `GetStatisticsCommand` -- Returns a general overview of how well the user has answered quiz questions."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Given below is an example usage scenario and how the statistics mechanism behaves at each step."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "The app will attempt to read past data from any quizzes done and store it internally to a `quizResults` list."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Step 2. The user executes `stats s/CS2103T` command to get the statistics of all quiz questions done for CS2103T."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "The `stats` command creates a new `commandResult` setting the type of command to `CHART`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "The following class diagram shows how the `GetStatisticsCommand` and `CommandResult` class are related."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "image::StatisticsClassDiagram.png[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Step 3. The `commandResult` will call the relevant methods to filter the `quizResults` list and create the relevant outputs."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "It will then show a statistics panel, hiding all notes and tasks."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "The following sequence diagram shows how the statistics operation works:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "image::StatisticsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Step 4. The user now decides to stop viewing statistics and decides to view all notes and tasks again using the `listnote` command."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "The statistics panel will now be hidden."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the statistics command:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "image::StatisticsActivityDiagram.png[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How statistics are shown"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* **Alternative 1 (current choice):** Hide all other panels and only show statistics."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** Pros: Less scrolling needed, more information can be shown in one panel."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** Cons: More methods are needed to deal with hiding and showing the different panels leading to more room for errors."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* **Alternative 2:** Place statistics in the main window with notes and tasks."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** Cons: The number of notes and tasks that can be seen without scrolling will be decreased."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "The charts will be small and condensed making it difficult to see the data at first glance."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Add revision task"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "`AddTaskForNoteCommand` is implemented to add a task for lecture notes revision with the command `radd`. It extends `Command` class and adds a"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "`Task` for lecture notes revision to the `TaskList` kept in `AppData` model, which wraps all application data."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The `TaskList` is essentially a list of `Task`. `TaskList` supports the `add(Task)` operation and this operation is"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "exposed to `AppData#addTask(Task)`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The following sequence diagram illustrates how `radd` command is executed:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::AddTaskSequenceDiagram.png[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Design of `Task`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* **Alternative 1 (current implementation):** implement `Task` as abstract class with two subclasses to support task for"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "notes and questions respectively."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Pros: It allows polymorphism to support different behaviours of task for `Note` and task for `Question`. Fields and"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "methods in common are concretely implemented to reduce duplicate code snippets."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Cons: We need to implement two different `AddTask` commands to support addition of the two different types of tasks."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The class diagram below illustrates how `Task` class is designed:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::TaskClassDiagram.png[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* **Alternative 2:** design `Task` as an interface to be implemented by two different classes."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Pros: More flexible design. Less exposure of internal properties of Task to client."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Cons: We need to implement all methods in the interface and hence more code snippets are needed. Both implementing"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "classes have to include the field in common such as `isDone`, which results in duplicate code snippets."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* **Alternative 3:** wrap everything in one concrete `Task` class to support both lecture notes and questions."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Pros: Less code to write."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Cons: It violates the principle of Separation of Concern. Hard to maintain or extend in the future if more types of"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "tasks are needed."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "We use `java.util.logging` for logging. The `LogsCenter` class is used to manage the logging levels and destinations."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (see \u003c\u003cImplementation-Configuration\u003e\u003e)."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)`,"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "which will log messages according to the specified logging level."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Log messages are written to the console and to a `.log` file."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*Logging levels*"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `SEVERE`: Indicates a critical (potentially fatal) problem with NUStudy."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `WARNING`: After this incident NUStudy may continue, but with caution."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `INFO`: Informational reports about actions taken by NUStudy."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `FINE`: Strictly only useful for debugging purposes, records all data processed by NUStudy."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The user preferences file location and logging level can be set through the configuration file,"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "by default `config.json`."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d DevOps"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* has a need to manage a significant number of notes"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* has a need to test contents of notes"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*Value proposition*: Revise more efficiently with spaced repetition and active recall"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "compared to a typical note-taking app"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Priorities:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* High (must have) – `* * *`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Medium (nice to have) – `* *`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Low (unlikely to have) – `*`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|Priority|As a/an...|I want to...|So that I can...|Author"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|`* *`|student|share and receive lecture content from others|my friends can share in the common knowledge, and my family can understand what I am studying|Jeremy"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|`*`|student|annotate my lecture notes|I can go beyond the curriculum|Jeremy"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|`* *`|module coordinator|brief my subordinates about study materials|the tutors/lecturers under my charge are teaching what they are supposed to teach|Jeremy"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|`* *`|tutor|discuss the key points to remember from a tutorial|my students get as much out of their tutorials as possible|Jeremy"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|`*`|quizmaster|quiz contestants about their knowledge using the app|the contestants can have as much fun as possible|Jeremy"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* * *`|student|view my revision plan| be more clear on the big picture of my revision and check whatever is left to do when I forget|Shui Yao"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* * *`|student|set a revision plan|I can be more organised in my revision and will not lose my focus|Shui Yao"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* * *`|student|remove a revision task|I can remove accidentally added revision task or remove a revision task should there be a change of plan|Shui Yao"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* *`|student|edit the revision task|I can modify the details of a particular revision task|Shui Yao"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* *`|student|mark a task as done|I can update the status of my revision plan and have greater motivation to move on|Shui Yao"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* *`|student|view unfinished tasks|I can have a easy overview of what I need to to next|Shui Yao"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`*`|student|view overdue tasks|I can re-schedule my revision and be more careful with the workload in my next planning|Shui Yao"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* *`|student|get notified when a revision task is about to start|I can finish up whatever stuff at hand and get ready for revision|Shui Yao"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "|`* *`|student|disable notification|I will not be bothered in some important events|Shui Yao"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`* * *`|student|change the difficulty level of questions|I can customize the difficulty level of the questions as I progress along the time|Xueting"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`* * *`|student|find all the questions at a particular difficulty level|I can see how well I understand the subject content|Xueting"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`* *`|student|set a mix of different difficulty levels at exam mode|I can better simulate the real-time exams conditions|Xueting"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`* *`|student|get a statistics of the number of questions I have attempted at a difficulty level|I can see how often I have practiced for this subject|Xueting"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`* *`|student|get statistics of the accuracy level of the specific difficulty|I can visualise how well I have practiced for this subject|Xueting"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "|`*`|student|get statistics of the change of difficulty levels I have made to a question|I can understand my improvement in understanding the content|Xueting"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "|`* * *`|student|see how well I am able to answer questions for different topics/subjects|focus more on topics/subjects that I need to improve on|Irene"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "|`* * *`|student|check my past responses to different questions|compare with my current response and improve on it if necessary/check if I am making the same mistakes twice|Irene"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "|`* *`|student|have a graphical report of my progress|get an overview of my progress with a glimpse|Irene"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "|`* *`|student|check the questions that I have attempted for a specific time period|I can skip questions that I have already done during that time period|Irene"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "|`*`|student|get an overview to see the number of notes added for each topic/subject|I can see which topic/subject I need to make more notes on|Irene"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "|`* * *`|student|mark and store the questions I have made mistakes on|I can get a better understanding of which part I need to put more time to study|Dongjun"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "|`* * *`|student|take a series questions as a mock test before exam|I can refresh my memory on different modules before exam|Dongjun"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "|`* *`|student|find specific questions according to the keywords|I can filter the questions I want for different purposes|Dongjun"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "|`* *`|student|change the difficulty of my test|I can be better prepared for actual exam|Dongjun"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "|`*`|student|view all questions and answers stored|I can refer them as revision guide according to different subjects|Dongjun"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "(For all use cases below, the system is `NUStudy` and the actor is the `student`)"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// tag::usecase[]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Use case: Create lecture note (Jeremy)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "1. Student gives the command to add a lecture note – `addnote -t TITLE -c CONTENT`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "2. Application shows a lecture note with the given title and contents to the user"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "3. Application also updates the lecture note list with the new note"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* 1a. Student also gives `-i` in the command"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a1. Application brings up a file selection dialog"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a2. Student selects the image they wish to include in the lecture note"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a3. Application accepts the image"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* 1a2a. The selected file is not an image (.png, .jpg, .gif)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a2a1. Application displays message about the supported file formats"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a2a2. Student selects a file again"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Repeat 1a2a1, 1a2a2 until a supported file format is selected"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Use case resumes from step 1a3"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Use case: Delete lecture note (Jeremy)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "1. Student gives the command to delete a lecture note – `deletenote INDEX`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "2. Application deletes the note from the note list"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* 1a. Student gives an out-of-range or non-numeric index"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a1. Application displays message showing in-range indices"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** 1a2. Student re-enters the command"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Repeat 1a1 and 1a2 until a valid index is provided"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// end::usecase[]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Use case: Add a revision task to revision plan (Shui Yao)"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*Preconditions:* notes collections and question collections are not both empty"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "1. Student keys in revision task command and specifies the note set name or question set name he/she wants to add to revision plan, with starting date and starting time"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "2. NUStudy adds the task to revision plan"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "3. NUStudy informs the Student about successful addition of the task"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 1a. NUStudy detects that neither a note set or a question set is entered by Student"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1a1. NUStudy requests for the correct input with a note set name or a question set name"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1a2. Student enters correct input"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Steps 1a1 - 1a2 are repeated until the input is correct"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case resumes from Step 2"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 1b. NUStudy detects missing starting date or time"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1b1. NUStudy requests for correct input with starting date and time"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1b2. Student enters correct input following the format"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Steps 1b1 - 1b2 are repeated until getting a correct input with valid starting date and time"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case resumes from Step 2"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 1c. NUStudy detects invalid date or time"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1c1. NUStudy requests for valid date and time"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1c2. Student enters correct input with valid date and time"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Steps 1c1 - 1c2 are repeated until getting a correct input with valid date and time"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case resumes from Step 2"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a task from revision plan (Shui Yao)"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "1. Student requests to list revision plan"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "2. NUStudy lists the revision plan"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "3. Student specifies the index of the task in the revision plan list"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "4. NUStudy removes the task from the revision plan"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "5. NUStudy informs the Student about the successful removal of the task"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 1a. NUStudy detects that the revision plan has no tasks"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 1a1. NUStudy informs the Student that the revision plan is empty"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case ends"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 3a. NUStudy detects an index that is not in the revision plan"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 3a1. NUStudy requests for correct input with valid index"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 3a2. Student enters correct input with valid index"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Steps 3a1 - 3a2 are repeated until getting a valid index"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case resumes from Step 2"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Use case: Clear the revision plan (Shui Yao)"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "1. Student clears the revision plan"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "2. NUStudy requests for confirmation"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "3. Student confirms the clear operation"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "4. NUStudy clears the revision plan"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "5. NUStudy informs the Student that the revision plan is successfully cleared"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* 2a. Student disapprove the clear operation"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** 2a1. NUStudy informs the Student of the cancellation of clear operation"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case ends"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d Use case: get statistics for subjects (Irene)"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "1. Student gives the command to get the statistics for a subject `stats s/SUBJECT [s/SUBJECT1] [s/SUBJECT2]...`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "2. Application returns a piechart with number of questions answered correctly and incorrectly"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* 1a. Student provides an invalid subject"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** 1a1. Application will return a list of subjects that are in the database"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** 1a2. Student will re-enter the command with a valid subject"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* 1b. Student provides more than one subject"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** 1b1. Application returns a piechart totaling the statistics of question answered correctly and incorrectly for all subjects as well as a list of the individual statistics for each subject"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Use case ends"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d Use case: get statistics for individual questions (Irene)"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "1. Student gives the command to get statistics for a question `stats INDEX`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "2. Application returns past responses to the question, the subject and/or topic associated with the question and statistics of how well the question has been answered"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* 1a. Student gives an out-of-range index"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** 1a1. Application displays the range of questions available"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** 1a2. Student re-enters the command"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "** Repeat 1a1 and 1a2 until a valid index is provided"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "// tag::usecasew[]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Use case: Specify difficulty level of questions (Xueting)"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "1. Student specifies the difficulty level as the last tag while adding a questions - `add q/QUESTION a/ANSWER s/SUBJECT d/DIFFICULTY`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "2. Application shows and stores the question with its difficulty level"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1a. Student does not specify the difficulty level"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a1. Application shows an error message to require difficulty level input"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a2. Student inputs the difficulty level following the previous tags"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Repeat 1a1 and 1a2 until a difficulty level is provided"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d Use case: Edit difficulty level of a specific question (Xueting)"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "1. Student changes the difficulty level of a question - edit `-dif id/INDEX d/DIFFICULTY`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "2. Application shows and stores the question with the updated difficulty level"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1a. Student does not provide the updated difficulty level"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a1. Application shows an error message to require difficulty level update"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a2. Student inputs the new difficulty level"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Repeat 1a1 and 1a2 until a difficulty level is provided"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes at step 2"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1b. Student provides the same difficulty level as the previous one"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1b1. Application shows a warning message indicating that the difficulty level is not updated and ask whether the user would like to proceed"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1b2. Student chooses either to proceed with the original difficulty level or re-edit the difficulty level"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes at step 2"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1c. Student inputs an invalid (out of range or non-numeric) questions index"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1c1. Application displays the range of valid question indices"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1c2. Student re-enters the question index"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Repeat 1c1 and 1c2 until a valid index is provided"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes at step 1"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d Use case: Get statistics for a difficulty level (Xueting)"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "1. Student gives the command to get the statistics of the number of questions attempted at the specific difficulty level for a subject stats - `-dif d/DIFFICULTY s/SUBJECT`"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "2. Application returns a bar chart which consists of the questions index and the number of attempts for this difficulty level"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1a. Student does not provide the difficulty level or the subject after the -dif flag"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a1. Application shows an error message requesting the corresponding inputs"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1a2. Student re-enter the necessary fields"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Repeat 1a1 and 1a2 until valid inputs are provided"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes at step 2"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* 1b. Student inputs invalid difficulty level or subject"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1b1. Application displays a list of difficulty levels and subjects available"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** 1b2. Student re-enter the necessary fields by choosing from the list"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Repeat 1b1 and 1b2 until valid inputs are provided"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Use case resumes at step 2"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "// end::usecasew[]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "// tag::quizUseCase[]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d Use case: Delete an existing question (Dongjun)"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "1. Student gives the command to delete an existing question `delete INDEX`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "2. Application shows the question being deleted"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "3. Application deletes the question indicated by the student from the database"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* 1a. The index given by student is out of the range"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 1a1. Application shows the error and displays the number of questions stored"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 1a2. Student enters the valid index"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case resumes from step 1"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d Use case: Take a test (Dongjun)"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "1. Student gives the command to enter the test mode `test [n/NUMBER_OF_QUESTIONS] [d/DIFFICULTY] [s/SUBJECT]`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "2. Application shows a question with difficulty and subject indicated"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "3. Application waits for the student to key in the answer"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "4. Student enters the answer"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "5. Application displays whether the input answer is correct or wrong"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "6. Repeat 2 - 5 until all questions are answered"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "// end::quizUseCase[]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* 1a. Student inputs the invalid test commands"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 1a1. Application returns the correct format for test command"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 1a2. Students enter the correct test command"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case resumes from step 1"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* 2a. Student chooses to change the difficulty of questions by giving `change -dif DIFFICULTY`"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 2a1. The question set will change to a new difficulty"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* 3a. Student chooses to skip current questions by giving `skip`"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** Application skips this question and display the next question"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* 3b. Student chooses to get the answer for current question by giving `show`"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** 3b1. Application displays the answer and go to next question"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case resumes from step 2"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* a. At any time, Student chooses to exit from the test"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** a1. Student gives the command `quit`"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** a2. Application exits from the test mode"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Use case ends"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// tag::nfrglossary[]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Non-functional requirements"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Images must be copied into the application data, residing in a dedicated folder,"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "rather than merely linking to somewhere on the filesystem"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Export format of lecture notes and flash cards must be human-readable text"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Images must be referenced by pathnames with respect to the image folder"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[[lecture-note]] Lecture note::"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "An object stored in the application model that includes a title, text content and optionally an image."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "It is not quizzable."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// end::nfrglossary[]"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Manual testing"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "A few ways of manually testing NUStudy are listed below. Of course, any tester"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "should explore more than just these."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Opening and closing"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. Download the JAR file and copy into an empty folder."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. Open the jar file. _The GUI with some initial application data should be visible._"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. Change the position and size of the window and close it."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. Re-launch NUStudy. _It should look just like when it was closed._"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Image support"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Adding a lecture note with an image"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. Type `addnote t/t c/c i/` in the command line. _An image dialog should be brought up._"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. Select any image. _It should appear in the lecture note panel, as a new lecture note with"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "title \"t\" and content \"c\"._"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Modifying an image"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. After adding one lecture note with an image, type `editnote i i/` where `i` is its index."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. _The same image dialog should be brought up_; select a different image."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "_This image should appear in place of the old image, if any, even if the filename is the same._"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Local copy of images"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. Close the application and move the JAR file and its associated application data to another location."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. Relaunch the application. _Images should display as before."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Silent ignoring of broken images"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. Once lecture notes with images have been added, close NUStudy and delete all images"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "in its data folder."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. Relaunch the application. _The app should not throw an exception, merely not display any images._"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".. Add back the images to the lecture notes using `editnote`. _This operation should succeed._"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 230,
      "shuiyao-sg": 144,
      "Auxinnn": 117,
      "irene-lly": 74,
      "ShirleyWangxt": 131,
      "-": 232
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d Documenting NUStudy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "-": 118
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy setup"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "IntelliJ by default has Gradle and JavaFX plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to 999 to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure IntelliJ to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Set up Travis to perform continuous integration for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, our architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 7,
      "-": 57
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d Testing NUStudy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "-": 50
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy user guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "By: `AY1920S1-CS2103T-F11-4`  Since: `September 2019`  Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "NUStudy is an application for managing two kinds of informational material:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "lecture notes and flash cards. Their primary purpose is preparing for exams"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and tests in universities, but they can also be useful for refreshing memory,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "particularly after a module has ended (the reliance of some computing modules"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "on prior knowledge is rather heavy)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Most of the work is done through a command line; the GUI merely displays"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "the results. The overall appearance is similar to a simple note-taking client."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Quickstart"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".  Ensure you have Java 11+ installed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".  Download the latest `nustudy.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. Some commands you can try are"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `listnote`: lists all lecture notes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `addnote t/Title c/Content`: adds a lecture note with title \"Title\" and content \"Content\"."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `deletenote 1`: deletes the first lecture note"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `help`: open the help window"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* `exit`: exits the app"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "This section helps you navigate through the features and commands."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Words in `UPPERCASE` are parameters you supply e.g. in `addnote t/TITLE`, `TITLE` is a parameter"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "which can be used as `addnote t/TITLE`. Parameters can be provided in any order."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Items in square brackets are optional."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Items with `…`​ after them can be used zero or more times."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// tag::lecnote[]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Lecture notes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Adding lecture notes: `addnote`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "This is the basic command for getting your lecture notes into NUStudy. The `i/` field, if provided, brings up a"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "dialog where you can choose an image from your computer\u0027s file system; such an image will be displayed at the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "bottom of the note. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `addnote t/TITLE c/CONTENT [i/]`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Suppose you want to remember what the order-7 triangular tiling looks like and its Schläfli symbol."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Type `addnote t/Order-7 triangular tiling c/{3,7} i/` into the command line. The file selection dialog"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "will pop up, and you can select the image from your file system. Once done, you will see the lecture note:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "image::screenshots/addnote.png[]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Your images are copied into the local application data folder of NUStudy, so don\u0027t worry about losing track of"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "your images – you can always take them along with the application."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Editing lecture notes: `editnote`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "If your lecture notes need updating, use this command, providing arguments `t/`, `c/` and `i/` (at least one)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "as you would do with `addnote`, but only those arguments you want to change. Providing `i/` brings up the same image"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "selection dialog like in `addnote`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Images can explain a lot, but if you want to remove them, use `i/none` in your command, and the dialog"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "will not appear. Otherwise, if you back off from choosing an image (e.g. by clicking the dialog\u0027s"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "close button), nothing will happen and your images will remain safe and sound."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Multiple notes can share the same image, and you can overwrite existing images currently"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "in NUStudy with new ones sharing the same filename."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The index must be between 1 and the number of lecture notes inclusive. It is listed before the title of"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "each lecture note:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "image::screenshots/index.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `editnote INDEX [t/TITLE] [c/CONTENT] [i/[none]]`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing lecture notes: `findnote`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Of course, what use are virtual lecture notes if you can\u0027t search through them? This command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "displays those notes whose titles contain every word (space-separated, ignoring case) you provide"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "as arguments. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `findnote WORD [WORD]…`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all lecture notes: `listnote`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "This is like running `findnote` but with no arguments. It shows all your lecture notes in their unabashed glory. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `listnote`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting lecture notes: `deletenote`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "When your semester ends, surely you want to free up space on your computer so you can accept new notes"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "for the coming semester? This command deletes the lecture note with the index you provide. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `deletenote INDEX`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all lecture notes: `clearnote`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Finally, if you ever find a better application than NUStudy for your lecture notes, you can clear"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "them all. Your quiz questions and revision tasks will not be affected. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Format: `clearnote`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// end::lecnote[]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "// tag::question[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Questions"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "NUStudy can also store different sets of questions and answers;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "at your command, the system will prompt you to answer those questions."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Adding Questions : `addq`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "You can add a question and its answer together with the necessary fields to the app. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `addq q/QUESTION a/ANSWER s/SUBJECT d/DIFFICULTY`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* You can define any type of difficulty level that is customized to your understanding of the question."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `addq q/How to represent 85 in binary? a/1010101 s/CS2100 d/medium`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/addqcommand.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The new question will be added to your question bank."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/addqresult.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all questions: `listq`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "This command allows you to view the list of all questions. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `listq`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/listqcommand.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/listqresult.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a question: `editq`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "You can edit the fields of an existing question by providing the fields you want to change. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `editq INDEX [q/QUESTION] [a/ANSWER] [d/DIFFICULTY] [s/SUBJECT]`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Edits the question at the specified `INDEX`. The index refers to the index number shown in the displayed question list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* When editing tags, the existing tags of the question will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `editq 7 a/16 d/easy`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/editqcommand.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Edits the answer and difficulty of the 2nd question to be `16` and `easy` respectively."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/editqresult.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Locating questions by keyword: `findq`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "This command will give you a list of questions containing the keyword(s) you specified. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `findq KEYWORD [MORE KEYWORDS]`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* The search is case insensitive."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* The order of the keywords does not matter."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Only full words will be matched."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `findq UDP`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/findqcommand.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Finds the question whose body contains the keyword `UDP`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/findqresult.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a question: `deleteq`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "You can delete a question at its specified INDEX together with its relevant fields from the list. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `deleteq INDEX`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Deletes the question at the specified `INDEX`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* The index refers to the index number shown in the displayed question list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `listq` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "`deleteq 3`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/deleteqcommand.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Deletes the 2nd question from the question list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/deleteqresult.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `findq character` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "`deleteq 1`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Deletes the 1st question in the results of `findq` command."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Filter by difficulty: `difficulty`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "You can view the list of all questions filtered by the specific difficulty. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `difficulty DIFFICULTY`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "****"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* The search is case insensitive."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Only full difficulty will be matched."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "****"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `difficulty hard`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/difficultycommand.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Returns a list of `hard` questions."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/difficultyresult.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Filter by subject: `subject`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "You can view the list of all questions from a specific subject. +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `subject SUBJECT`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "****"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* The search is case insensitive."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Only full subject will be matched."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "****"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* `subject CS2103T`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/subjectcommand.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Returns a list of questions of `CS2103T`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/subjectresult.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Clear all questions: `clearq`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "You can delete all questions from the app. +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Format: `clearq`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/clearcommand.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "image::questionCommandsDemo/clearresult.png[width \u003d \"600\"]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "// end::question[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d Quiz mode"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "There is a built-in quiz mode in NUStudy for you to take a revision quiz."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Enter quiz mode : `quiz`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Enters quiz mode for you to answer questions. +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `quiz n/NUMBER_OF_QUESTIONS d/DIFFICULTY s/SUBJECT`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Answer the quiz question : `type answer` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Answers the displayed question. +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `ANSWER`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Show an answer : `show`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Shows an answer for the displayed quiz question. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `show`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Skip a question : `skip`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Skips current question and displays the next one. +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `skip`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d\u003d\u003d Exit test mode : `quit`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Exits from the quiz mode. +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Format: `quit`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Get statistics"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d\u003d Get statistics for subjects : `stats`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Returns a panel containing a break down of the questions by its results."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "You can choose to get the statistics for a difficulty level by adding `d/` or"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "get the statistics of different subjects by adding `s/`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Typing any other non-statistics command will close this panel. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Format: `stats [d/DIFFICULTY] [s/SUBJECT1] [s/SUBJECT2]...`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d\u003d Get questions with correct/incorrect answers: `question`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Get a panel containing all questions that have been answered correctly/incorrectly by using `-c/-i` respectively."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Either one of `-c` or `-i` must be used. You can also filter by subjects by adding `s/`."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Typing any other non-statistics command will close this panel. +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Format: `question [-c] [-i] [s/SUBJECT1] [s/SUBJECT2]...`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d\u003d Get a report for individual questions: `report`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Returns a panel containing a report of how well you have answered a particular question,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "the number of times the question has been attempted and the past answers to the question."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Typing any other non-statistics command will close this panel. +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Format: `report INDEX`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d\u003d\u003d Get overview of questions attempted: `overview`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Get an overview of the types of questions that have been attempted overall."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "A panel containing a stacked bar graph, sorted by subjects will be returned."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "You can also add a `dt/` field to get questions that you have done within that time period."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Typing any other non-statistics command will close this panel. +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Format: `overview [dt/START_DATE] [dt/END_DATE]`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d\u003d Revision tasks"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "This section provides instructions to manipulate revision tasks. The revision tasks help you plan your revision of notes"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "and questions."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The diagram below shows how a revision task looks like:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::UserGuideRes/TaskUI.png[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "NOTE: The revision tasks are not synchronised with the note and the question. Once created, the task content will not"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "change if you modify the corresponding note or question. For example, if you have added a task for note \"An AVL Tree\""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "and then you delete the note or change the title of the note, the task still exist with the heading unchanged. We adopt"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "this approach because we would like to allow you to customise the task headings in *version v2.0* of the app. Therefore,"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "we disassociate the task from notes and questions once created."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Add a revision task for a note: `rn`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "You can add a revision task for a note to the current revision task list with this command. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The heading will copy the title. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The GUI will display all tasks upon completing the command. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rn t/TITLE_OF_NOTE dt/START_DATE tm/START_TIME` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "1. Type `rn t/CS2103T UML diagram dt/01/11/2019 tm/0900` in the command input box, and press `Enter` to execute it"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "+"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::UserGuideRes/TaskCommands/AddTaskForNote_command.png[]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "+"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "2. The result box will display the message \"Revision task added: [N] NOTE : CS2103T UML diagram by: 01 November 2019 09:00\"."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The task is added to the task list shown in the middle panel."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "+"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "image::UserGuideRes/TaskCommands/AddTaskForNote_success.png[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "NOTE: You need to follow the format \"dd/MM/yyyy\" for START_DATE input and \"HHmm\" with 24-hour format for START_TIME"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "input. For example: \"31/12/2019\" to represent \"31st December 2019\", \"0900\" to represent \"9am\", \"1400\" to represent \"2pm\"."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Add a revision task for a question: `rq`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "You can add a revision task for a question to the current revision task list with this command. +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The heading will copy the question body. +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The GUI will display all tasks upon completing the command. +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rq i/INDEX_OF_QUESTION dt/START_DATE tm/START_TIME` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "`rq 1 dt/11/11/2019 tm/1500`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Remove revision task: `rdelete`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "You can remove a particular revision task from current list with this command. +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The GUI will display the current list (all-task, done-task, not-done-task or overdue-task) view. +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rdelete INDEX_OF_TASK` +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "`rdelete 2`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Mark the revision task as done: `rdone`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "You can mark a task as done once you finished it."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The GUI will display the current list (all-task, done-task, not-done-task or overdue-task) view. +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rdone INDEX` +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Example: +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "`rdone 1`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d View revision tasks: `rlist`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "This command displays the whole revision task list. +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rlist`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Clear current revision plan: `rclear`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "You can remove all revision tasks with this command. +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `rclear`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d View completed revision tasks: `finished`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "This command displays the list of revision tasks that you have completed. +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `finished`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d View uncompleted revision task: `unfinished`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "This command displays the list of revision tasks that you have not completed. +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `unfinished`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d View overdue revision tasks: `overdue`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "This task displays the revision tasks which you have not done but having passed the start time. +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `overdue`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Enable push notification: `notify -e` `[coming in v2.0]`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "You can enable the push notification feature to send a desktop reminder when the task is about to start. +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `notify -e [-A]`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Disable push notification: `notify -d` `[coming in v2.0]`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "You can disable the push notification with this command. +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Format: `notify -d [-A]`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "// tag::v2.0[]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d Other features coming in v2.0"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Auto-complete feature"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Returns suggestions when you are typing commands."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "// tag::quizFuture[]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Set a timer for test mode"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The student sets a time limit for the test mode. The app will exit test mode once the time ends."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "// end::quizFuture[]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Share notes and questions with other users"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The student shares notes and questions with other students with Internet connection."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Login using email and password"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "The student can register and login to the application using their email and password."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "// end::v2.0[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// tag::lngroup[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d\u003d\u003d Lecture note grouping suggestions"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "NUStudy will intelligently suggest groupings of lecture notes based on their content."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "// end::lngroup[]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 85,
      "shuiyao-sg": 89,
      "Auxinnn": 29,
      "irene-lly": 23,
      "ShirleyWangxt": 116,
      "-": 101
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ". Enter an arbitrary description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 41
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean test`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean test`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` and `test`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Creates `nustudy.jar` in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`** +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew test` -- Runs all tests"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean test` -- Cleans the project and runs tests"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "-": 97
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* Runs the `./gradlew clean test -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit. You should see your `README` file displayed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "-": 130
    }
  },
  {
    "path": "docs/diagrams/AddQuestionActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ":User executes addq command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ":Check input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "if () then ([input is valid])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    :Add question to AppData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    :Save AppData to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    local storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    :Display command result;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    :Exception thrown;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 15
    }
  },
  {
    "path": "docs/diagrams/AddQuestionSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "participant \":AppDataParser\" as AppDataParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "participant \":AddQuestionCommandParser\" as AddQuestionCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "participant \"d:AddQuestionCommand\" as AddQuestionCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[-\u003e LogicManager : execute(\"addq q/Q a/A s/S d/D\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "LogicManager -\u003e AppDataParser : parseCommand(\"addq q/Q a/A s/S d/D\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "activate AppDataParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "create AddQuestionCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "AppDataParser -\u003e AddQuestionCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "activate AddQuestionCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "AddQuestionCommandParser --\u003e AppDataParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "deactivate AddQuestionCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "AppDataParser -\u003e AddQuestionCommandParser : parse(\"q/Q a/A s/S d/D\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "activate AddQuestionCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "create AddQuestionCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "AddQuestionCommandParser -\u003e AddQuestionCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "activate AddQuestionCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "AddQuestionCommand --\u003e AddQuestionCommandParser : q"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "deactivate AddQuestionCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "AddQuestionCommandParser --\u003e AppDataParser : q"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "deactivate AddQuestionCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "AddQuestionCommandParser -[hidden]-\u003e AppDataParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "destroy AddQuestionCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "AppDataParser --\u003e LogicManager : q"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "deactivate AppDataParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "LogicManager -\u003e AddQuestionCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "activate AddQuestionCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "AddQuestionCommand -\u003e Model : addQuestion(toAdd)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Model --\u003e AddQuestionCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "AddQuestionCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "CommandResult --\u003e AddQuestionCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "AddQuestionCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "deactivate AddQuestionCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "ShirleyWangxt": 68
    }
  },
  {
    "path": "docs/diagrams/AddTaskSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "participant \":AppDataParser\" as AppDataParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "participant \":AddTaskForNoteCommandParser\" as AddTaskForNoteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "participant \"a:AddTaskForNoteCommand\" as AddTaskForNoteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "participant \":AppData\" as AppData MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "participant \":TaskList\" as TaskList MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[-\u003e LogicManager : execute(\"radd t/CS2103T dt/22/10/2019 tm/1400\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "LogicManager -\u003e AppDataParser : parseCommand(\"radd t/CS2103T dt/22/10/2019 tm/1400\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "activate AppDataParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "create AddTaskForNoteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AppDataParser -\u003e AddTaskForNoteCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "activate AddTaskForNoteCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AddTaskForNoteCommandParser --\u003e AppDataParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "deactivate AddTaskForNoteCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AppDataParser -\u003e AddTaskForNoteCommandParser : parse(\"t/CS2103T dt/22/10/2019 tm/1400\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "activate AddTaskForNoteCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AddTaskForNoteCommandParser -\u003e AddTaskForNoteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "activate AddTaskForNoteCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AddTaskForNoteCommand --\u003e AddTaskForNoteCommandParser : a"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "deactivate AddTaskForNoteCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AddTaskForNoteCommandParser --\u003e AppDataParser : a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "deactivate AddTaskForNoteCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AddTaskForNoteCommandParser -[hidden]-\u003e AppDataParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "destroy AddTaskForNoteCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AppDataParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "deactivate AppDataParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "LogicManager -\u003e AddTaskForNoteCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "activate AddTaskForNoteCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AddTaskForNoteCommand -\u003e Model : addTask(toAdd)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Model -\u003e AppData : addTask(toAdd)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "activate AppData"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AppData -\u003e TaskList : add(toAdd)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "activate TaskList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "TaskList --\u003e AppData"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "deactivate TaskList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AppData --\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "deactivate AppData"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Model --\u003e AddTaskForNoteCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AddTaskForNoteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "CommandResult --\u003e AddTaskForNoteCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AddTaskForNoteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "deactivate AddTaskForNoteCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "shuiyao-sg": 82
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"deletenote 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"deletenote 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteNote(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAppData(appData)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 4,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/ClassDiagramStyle.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    AttributeFontColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027hide members"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 76
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "participant \":AppDataParser\" as AppDataParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "participant \":DeleteNoteCommandParser\" as DeleteNoteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "participant \"d:DeleteNoteCommand\" as DeleteNoteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[-\u003e LogicManager : execute(\"deletenote 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "LogicManager -\u003e AppDataParser : parseCommand(\"deletenote 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "activate AppDataParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "create DeleteNoteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "AppDataParser -\u003e DeleteNoteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "activate DeleteNoteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "DeleteNoteCommandParser --\u003e AppDataParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "deactivate DeleteNoteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "AppDataParser -\u003e DeleteNoteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "activate DeleteNoteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "create DeleteNoteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "DeleteNoteCommandParser -\u003e DeleteNoteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "activate DeleteNoteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "DeleteNoteCommand --\u003e DeleteNoteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "deactivate DeleteNoteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "DeleteNoteCommandParser --\u003e AppDataParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "deactivate DeleteNoteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "DeleteNoteCommandParser -[hidden]-\u003e AppDataParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "destroy DeleteNoteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "AppDataParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "deactivate AppDataParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "LogicManager -\u003e DeleteNoteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "activate DeleteNoteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "DeleteNoteCommand -\u003e Model : deleteNote(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Model --\u003e DeleteNoteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "DeleteNoteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "CommandResult --\u003e DeleteNoteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "DeleteNoteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "deactivate DeleteNoteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 33,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/ImageSelectionSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "participant \":EditNoteCommandParser\" as ENCP LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "participant \":EditNoteDescriptor\" as END LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "participant \":AppUtil\" as NIS LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Actor User as U USER_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[-\u003e ENCP: parse()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "activate ENCP"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "create END"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "ENCP -\u003e END: new"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "activate END"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "END --\u003e ENCP"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "deactivate END"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "opt t/ present"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    ENCP -\u003e END: setTitle()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "end"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "opt c/ present"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    ENCP -\u003e END: setContent()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "end"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "opt i/ present"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    alt i/none"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ENCP -\u003e END: setImageRemoved(true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    else else"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ENCP -\u003e NIS: selectImage()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        activate NIS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        NIS -\u003e U: open file dialog"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        NIS \u003c-- U: image"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        NIS --\u003e ENCP: image"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        deactivate NIS"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ENCP -\u003e END: setImage(image)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    end"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "end"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "[\u003c-- ENCP: editNoteCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "deactivate ENCP"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "ENCP -[hidden]-\u003e END"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "destroy ENCP"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "||10||"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 40
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Class AppDataParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "LogicManager --\u003e\"1\" AppDataParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "AppDataParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "note right of XYZCommand: Represents AddNoteCommand, \\nQuizModeCommand, etc."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 4,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Interface ReadOnlyAppData \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Class AppData"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Class ReadOnlyAppData"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Package Note {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Class Note"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Class Content"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Class Title"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Class Image"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Class UniqueNoteList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Package Question {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class Question"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class QuestionBody"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class Answer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class Difficulty"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class Subject"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class UniqueQuestionList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Package Quiz {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class QuizQuestionList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class QuizResult"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class QuizResultList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuizQuestionList -[hidden]left- QuizResultList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Package Task {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class Heading"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class TaskList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Note -[hidden]left- Question"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Question -[hidden]left- Quiz"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027Quiz -[hidden]left- Question"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Quiz -[hidden]left- Task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027Question -[hidden]left- Task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "AppData .up.|\u003e ReadOnlyAppData"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "ModelManager o--\u003e \"1\" AppData"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AppData *---\u003e \"1\" UniqueNoteList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "UniqueNoteList o--\u003e \"*\" Note"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Note *--\u003e Title"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Note *--\u003e Content"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Note *--\u003e\"0..1\" Image"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AppData *---\u003e \"1\" UniqueQuestionList"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "UniqueQuestionList o--\u003e \"*\" Question"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Question *--\u003e QuestionBody"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Question *--\u003e Answer"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Question *--\u003e Difficulty"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Question *--\u003e Subject"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AppData *---\u003e \"1\" QuizQuestionList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AppData *---\u003e \"1\" QuizResultList"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuizQuestionList o--\u003e \"*\" Question"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuizResultList o--\u003e \"*\" QuizResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "AppData *---\u003e \"1\" TaskList"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "TaskList o--\u003e  \"*\" Task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Task *-down-\u003e Heading"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 15,
      "shuiyao-sg": 43,
      "-": 32
    }
  },
  {
    "path": "docs/diagrams/PanelPackageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package Panels \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class \"{abstract}\\nPanelComponent\" as PanelComponent"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class NoteListPanel"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class NoteCard"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class QuestionListPanel"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class QuestionListCard"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class QuizQuestionListPanel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class QuizQuestionListCard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class TaskListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class TaskListCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "NoteListPanel -[hidden]left- QuestionListPanel"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuestionListPanel -[hidden]left- QuizQuestionListPanel"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuizQuestionListPanel -[hidden]left- TaskListPanel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "NoteListPanel -down-\u003e NoteCard"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuestionListPanel -down-\u003e QuestionListCard"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuizQuestionListPanel -down-\u003e QuizQuestionListCard"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "TaskListPanel -down-\u003e TaskListCard"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "MainWindow *-down-\u003e NoteListPanel"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "MainWindow *-down-\u003e QuestionListPanel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "MainWindow *-down-\u003e QuizQuestionListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "MainWindow *-down-\u003e TaskListPanel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "NoteListPanel ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuestionListPanel ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuizQuestionListPanel ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "TaskListPanel ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "NoteCard ----|\u003e PanelComponent"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuestionListCard ----|\u003e PanelComponent"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuizQuestionListCard ----|\u003e PanelComponent"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "TaskListCard ----|\u003e PanelComponent"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "NoteCard ....\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuestionListCard ....\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "QuizQuestionListCard ....\u003e Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "TaskListCard ....\u003e Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 54
    }
  },
  {
    "path": "docs/diagrams/QuizModeActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ":User executes quiz command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ":Check input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "if() then ([input is valid])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    :Select quiz questions from question list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    :Add quiz questions to AppData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    :Display command result;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    :Exception thrown;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 14
    }
  },
  {
    "path": "docs/diagrams/QuizModeSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "participant \":AppDataParser\" as AppDataParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "participant \":QuizModeCommandParser\" as QuizModeCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "participant \"d:QuizModeCommand\" as QuizModeCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[-\u003e LogicManager : execute(\"quiz n/N d/D s/S\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "LogicManager -\u003e AppDataParser : parseCommand(\"quiz n/N d/D s/S\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "activate AppDataParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "create QuizModeCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "AppDataParser -\u003e QuizModeCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "activate QuizModeCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "QuizModeCommandParser -\u003e AppDataParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "deactivate QuizModeCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "AppDataParser -\u003e QuizModeCommandParser : parse(\"n/N d/D s/S\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "activate QuizModeCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "create QuizModeCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "QuizModeCommandParser -\u003e QuizModeCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "activate QuizModeCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "QuizModeCommand --\u003e QuizModeCommandParser : q"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "deactivate QuizModeCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "QuizModeCommandParser --\u003e AppDataParser : q"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "deactivate QuizModeCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "QuizModeCommandParser -[hidden]-\u003e AppDataParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "destroy QuizModeCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "AppDataParser --\u003e LogicManager : q"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "deactivate AppDataParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "LogicManager -\u003e QuizModeCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "activate QuizModeCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "QuizModeCommand -\u003e Model : model.setQuizQuestionList(quizQuestionList)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Model --\u003e QuizModeCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "QuizModeCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "CommandResult --\u003e QuizModeCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "QuizModeCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "deactivate QuizModeCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "Auxinnn": 68
    }
  },
  {
    "path": "docs/diagrams/StatisticsActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ":User executes stats command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ":Check input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "if () then ([input is valid])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    :filters quizResults list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    :hides notes and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    tasks panels;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    :Display statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    :Exception thrown;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 15
    }
  },
  {
    "path": "docs/diagrams/StatisticsClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "abstract class Command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "Command \u003c|-- GetStatisticsCommand"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "GetStatisticsCommand -- CommandResult"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "class GetStatisticsCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "execute(model : Model) : CommandResult"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "showStats : boolean"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "isShowStats() : boolean"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "setType(type : Type)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "getType() : Type"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "enum Type {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "CHART"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "QUESTIONS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 24
    }
  },
  {
    "path": "docs/diagrams/StatisticsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "participant \":AppDataParser\" as AppDataParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "participant \":GetStatisticsCommandParser\" as GetStatisticsCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "participant \":GetStatisticsCommand\" as GetStatisticsCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "participant \"c:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[-\u003e LogicManager : execute(\"stats s/CS2103T\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "LogicManager -\u003e AppDataParser : parseCommand(\"stats s/CS2103T\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "activate AppDataParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "create GetStatisticsCommandParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "AppDataParser -\u003e GetStatisticsCommandParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "activate GetStatisticsCommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "GetStatisticsCommandParser --\u003e AppDataParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "deactivate GetStatisticsCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "AppDataParser -\u003e GetStatisticsCommandParser : parse(\"stats s/CS2103T\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "activate GetStatisticsCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "create GetStatisticsCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "GetStatisticsCommandParser -\u003e GetStatisticsCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "activate GetStatisticsCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "GetStatisticsCommand --\u003e GetStatisticsCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "deactivate GetStatisticsCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "GetStatisticsCommandParser --\u003e AppDataParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "deactivate GetStatisticsCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "GetStatisticsCommandParser -[hidden]-\u003e AppDataParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "destroy GetStatisticsCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "AppDataParser --\u003e LogicManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "deactivate AppDataParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "LogicManager -\u003e GetStatisticsCommand : execute()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "activate GetStatisticsCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "GetStatisticsCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "CommandResult --\u003e GetStatisticsCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "GetStatisticsCommand -\u003e CommandResult : setType(CHART)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "CommandResult --\u003e GetStatisticsCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "GetStatisticsCommand --\u003e LogicManager : c"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "deactivate GetStatisticsCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "irene-lly": 64
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Interface AppDataStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Class JsonAppDataStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "StorageManager o--\u003e AppDataStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "JsonAppDataStorage .left.|\u003e AppDataStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/TaskClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "!include ClassDiagramStyle.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "class TaskForNote"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "class TaskForQuestion"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    - isDone : boolean \u003d false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    - date : LocalDate"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    - time : LocalTime"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    + {abstract} toString() : String"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "class TaskForNote {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    - note : Note"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    + toString() : String"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "class TaskForQuestion {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    - question : Question"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    + toString() : String"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Task \u003c|-- TaskForNote"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Task \u003c|-- TaskForQuestion"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 32
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package Panels \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Class \"{abstract}\\nPanelComponent\" as PanelComponent"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027Class NoteListPanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027Class NoteCard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027Class QuestionListPanel"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027Class QuestionListCard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027Class QuizQuestionListPanel"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027Class QuizQuestionListCard"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027Class TaskListPanel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027Class TaskListCard"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "MainWindow *-down-\u003e HelpWindow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "MainWindow *-down--\u003e Panels"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027MainWindow *-down-\u003e NoteListPanel"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027MainWindow *-down-\u003e QuestionListPanel"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027MainWindow *-down-\u003e QuizQuestionListPanel"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027MainWindow *-down-\u003e TaskListPanel"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027NoteListPanel -down-\u003e NoteCard"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027QuestionListPanel -down-\u003e QuestionListCard"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027QuizQuestionListPanel -down-\u003e QuizQuestionListCard"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027TaskListPanel -down-\u003e TaskListCard"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "MainWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "HelpWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "PanelComponent --|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027NoteListPanel ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027NoteCard ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027QuestionListPanel ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027QuestionListCard ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027QuizQuestionListPanel ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027QuizQuestionListCard ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027TaskListPanel ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027TaskListCard ---|\u003e PanelComponent"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027NoteCard ...\u003e Model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027QuestionListCard ...\u003e Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027QuizQuestionListCard ...\u003e Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u0027TaskListCard ...\u003e Model"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Panels ..\u003e Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "StatusBarFooter -[hidden]left- Panels"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 41,
      "-": 49
    }
  },
  {
    "path": "docs/team/auxinnn.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d NUStudy project portfolio for Zhang Dongjun (Auxinnn)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "My team of 5 software engineering students and I were tasked with enhancing a basic command line interface desktop"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "Addressbook application for our Software Engineering project. We chose to morph it into a learning management"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "application called NUStudy which is targeted to university students. This enhanced applications allows students to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "easily manage their lecture notes, test questions and revision tasks; and take a mock quiz as revision if they need."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "This is what our project looks like:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "image::../images/Ui.png[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "This portfolio showcases my contributions to the development of NUStudy. My role was to design and write codes for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "the `quiz` features. The following sections illustrate these enhancements in more details, as well as the relevant"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "documentation I have added to the user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "In this portfolio, a grey highlight `term` indicates that this is a command that can be inputted into the command line"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "and executed by the application and _italics_ implies a component, class or object in the architecture of the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "The pull requests and issues are represented by a # and its number (e.g. [#1])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "This sections shows a brief summary of my contributions to NUStudy, including coding, documentation and other relevant"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "helpful contributions to the team project."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "*Enhancement added:* I added the quiz feature of the application (Starting from"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F11-4/main/pull/36[#36])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* What it does: The `quiz` command allows the users to enter the quiz mode of the application. Users can type answer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "on command line and the correctness will be checked to display the result. The result of each quiz will be stored and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "used to supports the report feature."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Justification: In the event that users want to choose a set of questions from the application, the `quiz` command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "will randomly select questions from the storage according to the difficulty and subject specified by users. It will"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "act like an actual online quiz which the question will be displayed one at a time and users need to type answer to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "receive the feedback from the application to know whether it is correct or wrong."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Highlights: This enhancement works with commands implemented with my teammates. The result of each question from a"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "quiz will be store and my teammate will use it for another feature. The implementation was challenging on how to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "override the question panel and displaying quiz questions one after another. I solve it by using a boolean to set the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "_QuestionListPanel_ in the _MainWindow_ class and adding a list containing one quiz question in _QuizQuestionList_"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "class (https://github.com/AY1920S1-CS2103T-F11-4/main/pull/49[#49]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F11-4/main/pull/70[#70]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F11-4/main/pull/76[#76])."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "*Other contributions:*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "* Basic design of Question feature:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "** During the development of quiz feature, I helped to design a basic model of question feature so that my teammate"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "could refer to the template for modification and further development (https://github.com/AY1920S1-CS2103T-F11-4/main/pull/39[#39])."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d User guide contributions"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "We had to update the original addressbook User Guide with instructions for the enhancements that we had added. The"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "following is an excerpt from our *NUStudy User Guide*, showing additions that I have made for the quiz features."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquiz]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquizFuture]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003d\u003d Developer guide contributions"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "The following section shows my additions to the *NUStudy Developer Guide* for the quiz features."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquiz]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquizUseCase]"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 78
    }
  },
  {
    "path": "docs/team/irene-lly.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d NUStudy project portfolio for Irene Lee (irene-lly)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d About the project"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d User guide contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003d\u003d Developer guide contributions"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 15
    }
  },
  {
    "path": "docs/team/parcly-taxel.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d NUStudy – portfolio for Jeremy Tan (Parcly Taxel)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "As part of the CS2103 Software Engineering module at the National University of Singapore,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "I was part of a team of five tasked to develop an application from https://github.com/nus-cs2103-AY1920S1/addressbook-level3[a given Java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "address book application], which will be called AB3 in the rest of the portfolio."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "We chose to morph it into NUStudy, an application for"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "managing lecture notes, questions and revision tasks -- all three things pertinent to the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "average university student, regardless of location. Like the original, it has a command line"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "as its main method of interaction and a JavaFX GUI for display. It has around 5000 lines of code."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "This portfolio showcases my contributions to NUStudy: implementing the lecture notes by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "retooling the existing _Person_ class, related documentation in the user and developer guides"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and management of the Git repository surrounding NUStudy. It also showcases my technical writing skills"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and my ability to explain complicated enhancements or modifications to the uninitiated person."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "In this portfolio `monospace` indicates command-line input (commands, parameters, etc.)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and _italics_ mark class names. Pull requests and issues will be marked solely"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "by their numbers and a # sign (e.g. https://github.com/AY1920S1-CS2103T-F11-4/main/issues/1[#1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "unless otherwise specified they refer to NUStudy."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "This is a brief description of my contributions to NUStudy – to code, documentation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "and project management. These contributions show my ability to not only write good code,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "but also manage and synthesise team members\u0027 varying output into a coherent whole."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* I was responsible for **implementing lecture notes** (starting from https://github.com/AY1920S1-CS2103T-F11-4/main/pull/34[#34])."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "These are simple items with a title, some content and optionally an image. For this I modified the existing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "_Person_ class in the original address book application and its associated commands (_AddCommand_, _EditCommand_, etc.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "-- I did not have to make any new classes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Lecture notes are the primary source of a student\u0027s acquired knowledge in university, yet they come in many formats."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Having a unified appearance helps the student understand the content of lecture notes better, by removing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "unnecessary markup and distracting styles."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** While adding this feature I also refactored all other code throughout the application to use names relevant to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "lecture notes. This helped my teammates add their own features, setting an example for them to follow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Image support was implemented starting from https://github.com/AY1920S1-CS2103T-F11-4/main/pull/67[#67]. Instead of a custom class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "I used JavaFX\u0027s _scene.image.Image_, which reduced the additional code I had to write on top of the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "_Title_ and _Content_ classes by avoiding an unnecessary wrapper."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* As my fellow team members added their features to the code, one of the constructors of _CommandResult_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "grew to have four boolean variables representing command side effects. In https://github.com/AY1920S1-CS2103T-F11-4/main/pull/71[#71]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "I replaced the boolean arguments of this constructor with a single integer argument acting as a bit field."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** This serves two purposes: to avoid unnecessary use of the boolean literals and to allow easy extension"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "to more side effects by increasing the range of the integer argument."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* I enforced a style for the user and developer guides and wrote several of their key sections,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "such as the user guide\u0027s introduction and the developer guide\u0027s non-functional requirements."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "See https://github.com/AY1920S1-CS2103T-F11-4/main/pull/21[#21] and https://github.com/AY1920S1-CS2103T-F11-4/main/pull/22[#22]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "for examples."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* I was the **lead integrator** for NUStudy:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Managed all four releases (v1.1 to v1.4) on GitHub"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Set up Travis and Netlify for the project, enabling continuous integration and previews of documentation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Resolved merge conflicts for teammates\u0027 pull requests (see https://github.com/AY1920S1-CS2103T-F11-4/main/pull/44[#44] for an example)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Attached milestones and labels to issues and pull requests where the original authors failed to specify them"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "** Before v1.2, the only person who could merge pull requests"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* I contributed to https://github.com/nus-cs2103-AY1920S1/forum[forum] discussions, both as a receiver"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "(https://github.com/nus-cs2103-AY1920S1/forum/issues/88[#88], https://github.com/nus-cs2103-AY1920S1/forum/issues/106[#106]) and source"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "(https://github.com/nus-cs2103-AY1920S1/forum/issues/68[#68], https://github.com/nus-cs2103-AY1920S1/forum/issues/100[#100]) of information."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* I reviewed the following pull requests non-trivially, among others: https://github.com/AY1920S1-CS2103T-F11-4/main/pull/40[#40],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F11-4/main/pull/49[#49], https://github.com/AY1920S1-CS2103T-F11-4/main/pull/53[#53],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F11-4/main/pull/70[#70]."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "* A detailed exposition of all code I contributed to NUStudy can be found"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dParcly-Taxel[here]."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d User guide contributions"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Our application\u0027s user guide had to be updated with the new features we added in code."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The sections below are what I wrote for my features, demonstrating my ability to write"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "clear, concise end-user documentation."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlecnote]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlngroup]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "In addition, I also harmonised the layout of the user guide and"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "formatted other team members\u0027 contributions to said guide in a common manner."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003d\u003d Developer guide contributions"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Like other projects in CS2103, there is the expectation that future developers could"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "build on NUStudy. Thus we also updated the developer guide; below are my principal contributions to it,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "showcasing three aspects: my ability to write technical documentation, the complexity of what"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "I contributed in code and my proficiency in using diagrams to explain my work."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlecimage]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "Both the use of a JavaFX built-in object for images and the system-dependent implementation of"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "graphics-related objects required me to make certain critical decisions on the implementation of image support."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlecimagedesignconsiderations]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "The remaining documentation, shown below, is my contribution to the developer guide concerning aspects"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "not directly related to source code – use cases, non-functional requirements and a glossary."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dusecase]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnfrglossary]"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 112
    }
  },
  {
    "path": "docs/team/shirleywangxt.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d NUStudy project portfolio for Wang Xueting (ShirleyWangxt)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "This project portfolio serves the purpose to showcase my contribution to NUStudy as our software engineering project"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "and the various skills I have acquired and utilised in the process of development."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d Project Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "My team of 4 software engineering students and I were tasked with enhancing a basic command line interface desktop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "https://github.com/nus-cs2103-AY1920S1/addressbook-level3[address book application] for our Software Engineering project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "We chose to morph it into a revision flashcard desktop application called *NUStudy*."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "This enhanced application enables NUS students to store and manage lecture notes,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "practice questions under exam conditions and plan revision tasks effectively."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "This is what our project looks like: (todo: graphical user interface)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "My role is to design and write the code for question management features. The following sections illustrate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "these enhancements in more detail, as well as the relevant documentation I have added to the user and developer guides"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "in relation to these enhancements."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "In this portfolio `monospace` indicates command-line input (commands, parameters, etc.)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "and _italics_ mark class names."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d Enhancement added:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d What it does"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* I was responsible for **implementing question management features**. A question includes a question body, an answer,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "a subject and a difficulty level. I have modified the existing _Person_ model to _Question_ model, as well as"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "some of its relevant fields in the original address book application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* The question management commands are modified by the original person management commands as well."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The commands include: _AddQuestionCommand_, _EditQuestionCommand_, _DeleteQuestionCommand_, _ClearQuestionCommand_,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "_FindQuestionCommand_, _FindDifficultyCommand_, _FindSubjectCommand_, _ListQuestionCommand_."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "It is important for students to constantly practice questions to test their understanding as well as get familiarize"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "with the concepts they have learned. This question management system allows students to store questions easily."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "They are able to use this app as a question bank for them to revise. Furthermore, by defining difficulty levels for"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "each question, student can have a better sense of how well they have learned from this topic or this subject in general."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The question bank can also support other features such as quiz mode and various statistics for attempts."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d Code Contributed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "Please click this link to see a sample of my code:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dShirleyWangxt\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[link]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d\u003d Other contributions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Testing: As I am responsible for testing, I have added a significant number of test classes which increased"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "coverage to a large extent."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Documentation: I modified the user guide from a draft version to the standardised formal version. I have also"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "standardised the command format for most of the features."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Reviewed Pull Requests"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "** Reported bugs and offered suggestions for other teams in the class"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d User guide contributions"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "We had to update the original addressbook User Guide with instructions for the enhancements that we had added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The following is an excerpt from our NUStudy User Guide, showing additions that I have made for the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "question management features."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquestion]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "include::../UserGuide.adoc[tag\u003dv2.0]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003d\u003d Developer guide contributions"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "The following section shows my additions to the NUStudy Developer Guide for the question management features."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquestiond]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dusecasew]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 90
    }
  },
  {
    "path": "docs/team/shuiyao-sg.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d Shui Yao - Project Portfolio for NUStudy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "This portfolio is to document my contributions to project NUStudy, which is a software engineering project under Module"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "CS2103T at National University of Singapore. Our team consists of five students majoring in Computer Science. We decided"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "to morph an existing Java application https://github.com/nus-cs2103-AY1920S1/addressbook-level3[Address Book 3] into"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "NUStudy, which is a desktop application with command line for user input and a JavaFX GUI for display. NUStudy supports"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "notes management, quiz practice, revision task records, and usage statistics to help with revision."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "You may take note of the following symbols and formatting used in this portfolio: +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "`overdue` - The monospaced text indicates that it is a user input. +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "_Task_ - An italicised word indicates that it is a class name. +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "#11 - A number with # sign indicates the Pull Request or Issue number. +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "PR - Abbreviation for \"Pull Request\"."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "This section is to summarise my contributions to the project, including feature enhancements, documentation and project"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "management."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Major Enhancement: I implemented revision tasks, which have attributes of a heading, a starting date and time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "(starting from PR https://github.com/AY1920S1-CS2103T-F11-4/main/pull/37[#37])."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** What it does: This feature supports tasks for revision of a note or a question at a particular point of time. It is"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "implemented as _Task_ class stored in a revision list which is implemented as _TaskList_ class. I also implemented"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "commands (_AddTaskForNoteCommand_, _DoneTaskCommand_ etc.) to support operations on tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Justification: This feature allows users to set their revision plans and goals. It makes the revision more structured"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "and organised. It helps to stop procrastination to some extent. In the future release *v2.0*, this feature will also"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "support desktop push notification to remind the users to start their revision."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "** Highlights: This enhancement is dependent on _Note_ and _Question_ classes implemented by my teammates. There might"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "be regressions of my task features if my teammates decide to change their implementations of _Note_ or _Question_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "Therefore, I did a thorough analysis of the design pattern and the project architecture to use as least information as"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "possible from their classes in order to reduce coupling."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Minor Enhancement"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Code Contributed: You may feel free to check my code https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dshuiyao-sg\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dshuiyao-sg\u0026tabRepo\u003dAY1920S1-CS2103T-F11-4%2Fmain%5Bmaster%5D[here]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "* Other Contributions"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.storage.AppDataStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.storage.JsonAppDataStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing NUStudy ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppDataStorage appDataStorage \u003d new JsonAppDataStorage(userPrefs.getAppDataFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        storage \u003d new StorageManager(appDataStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns a {@code ModelManager} with {@code storage} and {@code userPrefs} data. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Sample data will be used instead if {@code storage}\u0027s data is not found;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * nothing will be used instead if errors occur when reading."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Optional\u003cReadOnlyAppData\u003e appDataOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ReadOnlyAppData initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            appDataOptional \u003d storage.readAppData();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            if (!appDataOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with sample data\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            initialData \u003d appDataOptional.orElseGet(SampleDataUtil::getSampleAppData);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting from empty\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            initialData \u003d new AppData();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting from empty\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            initialData \u003d new AppData();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting from empty\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        logger.info(\"Starting NUStudy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping NUStudy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 24,
      "-": 159
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String LOG_FILE \u003d \"nustudy.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Container for user-visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_INVALID_NOTE_DISPLAYED_INDEX \u003d \"The lecture note index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_NOTES_LISTED_OVERVIEW \u003d \"%1$d notes listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX \u003d \"The question index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_QUESTIONS_LISTED_OVERVIEW \u003d \"%1$d questions listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_INVALID_QUIZ_QUESTION_DISPLAYED_INDEX \u003d \"The question index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_NOTE_NOT_FOUND \u003d \"Sorry. The note is not found in the note list. We cannot add a\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \" revision task for it.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_TASK_ALREADY_DONE \u003d \"This task has already been marked as done\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "shuiyao-sg": 5,
      "Auxinnn": 1,
      "ShirleyWangxt": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Brings up a file chooser dialog for the user to select an image (.png, .jpg, .jpeg, .gif)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the image chosen."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @return the image chosen by the user, which is null iff the dialog was closed without choosing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static Image selectImage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FileChooser dialogue \u003d new FileChooser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        dialogue.getExtensionFilters().add(new FileChooser.ExtensionFilter(\"Image Files\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \"*.png\", \"*.jpg\", \"*.jpeg\", \"*.gif\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        File file \u003d dialogue.showOpenDialog(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return file !\u003d null ? new Image(\"file:\" + file) : null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 17,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.StackBarChartModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the AppData."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @see seedu.address.model.Model#getAppData()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    ReadOnlyAppData getAppData();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of lecture notes */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNoteList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of the pie chart data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cPieChart.Data\u003e getStatsPieChartData();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cPieChart.Data\u003e getQnsPieChartData();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cStackBarChartModel\u003e getStackBarChartData();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cSubject\u003e getUniqueSubjectList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cQuizResult\u003e getQuizResultList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns the total number of quiz questions done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    int getTotalQuestionsDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of questions */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuestionList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of quiz questions."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuizQuestionList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Gets the first question from the list and return a new list contains this question."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuestion\u003e getOneQuizQuestionAsList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    void removeOneQuizQuestion();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the user prefs\u0027 application data file path."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    Path getAppDataFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 9,
      "shuiyao-sg": 3,
      "Auxinnn": 12,
      "irene-lly": 20,
      "ShirleyWangxt": 4,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.AppDataParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.quiz.QuizParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.StackBarChartModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static boolean isQuiz \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final AppDataParser appDataParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final QuizParser quizParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appDataParser \u003d new AppDataParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizParser \u003d new QuizParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (!isQuiz) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            Command command \u003d appDataParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            if (commandResult.isShowStats()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            logger.info(\"----------------[USER INPUT][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            Command command \u003d quizParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            storage.saveAppData(model.getAppData());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public ReadOnlyAppData getAppData() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return model.getAppData();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return model.getFilteredNoteList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getStatsPieChartData() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return model.getStatsPieChartData();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getQnsPieChartData() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return model.getQnsPieChartData();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cStackBarChartModel\u003e getStackBarChartData() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return model.getStackBarChartData();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cSubject\u003e getUniqueSubjectList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return model.getUniqueSubjectList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e getQuizResultList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return model.getQuizResultList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsDone() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return model.getTotalQuestionsDone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Path getAppDataFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return model.getAppDataFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static void setIsQuiz(boolean isQuiz) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        LogicManager.isQuiz \u003d isQuiz;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean getIsQuiz() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return isQuiz;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuizQuestionList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return model.getFilteredQuizQuestionList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getOneQuizQuestionAsList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return model.getOneQuizQuestionAsList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void removeOneQuizQuestion() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        model.removeOneQuizQuestion();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 13,
      "shuiyao-sg": 6,
      "Auxinnn": 29,
      "irene-lly": 35,
      "ShirleyWangxt": 6,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final boolean isQuiz;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final boolean showStats;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Constructs a {@code CommandResult} with fields specified by flags, an integer variable acting"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * as a bit field for four boolean variables."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param flags a non-negative integer whose last four bits represent showHelp (1), exit (2),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *         isQuiz (4) and showStats (8)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public CommandResult(String feedbackToUser, int flags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assert flags \u003e\u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.showHelp \u003d (flags \u0026 1) \u003e 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.exit \u003d (flags \u0026 2) \u003e 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.isQuiz \u003d (flags \u0026 4) \u003e 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.showStats \u003d (flags \u0026 8) \u003e 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * and other fields set to their default value of \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this(feedbackToUser, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean isQuiz() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return isQuiz;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean isShowStats() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return showStats;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void setType(Type type) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 14,
      "Auxinnn": 12,
      "irene-lly": 18,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting NUStudy as requested...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, 2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/AddNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static java.util.Objects.nonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Adds a lecture note to NUStudy."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addnote\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lecture note to NUStudy.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_CONTENT + \"CONTENT [\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_IMAGE + \"]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_TITLE + \"Lecture 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_CONTENT + \"Write once debug everywhere\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"Using /i will open up a file dialog to select the image\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Lecture note added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TITLE \u003d \"This title already exists\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final Note toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Creates an AddNoteCommand to add the specified {@code Note}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AddNoteCommand(Note note) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        toAdd \u003d note;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (model.hasNote(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note added \u003d toAdd;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Defensively copy images to data folder"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (nonNull(toAdd.getImage())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            Path sourcePath \u003d Paths.get(toAdd.getImageUrl().substring(5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            Path destPath \u003d model.getAppDataFilePath().getParent().resolve(sourcePath.getFileName().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                Files.copy(sourcePath, destPath, StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                added \u003d new Note(toAdd.getTitle(), toAdd.getContent(), new Image(\"file:\" + destPath));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.addNote(added);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, added));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof AddNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddNoteCommand) other).toAdd));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 50,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/ClearNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Command to clear all lecture notes. Other application data is unaffected."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class ClearNoteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearnote\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Lecture notes have been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.clearNotes();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 8,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/DeleteNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Deletes a lecture note by index number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class DeleteNoteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletenote\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \": Deletes the lecture note with the specified index number.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 5\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted lecture note: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public DeleteNoteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof DeleteNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteNoteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 18,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/EditNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static java.util.Objects.nonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Edits the details of an existing lecture note."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editnote\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the lecture note identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"by the index number used in the displayed lecture note list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"[\" + PREFIX_CONTENT + \"CONTENT] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"[\" + PREFIX_IMAGE + \"]\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_TITLE + \"Linked lists \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + PREFIX_CONTENT + \"A linked list may be singly or doubly linked.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"Using /i will open up a file dialog to select the image\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_EDIT_NOTE_SUCCESS \u003d \"Edited lecture note: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This title already exists\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final EditNoteDescriptor editNoteDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param index of the lecture note in the filtered note list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param editNoteDescriptor details to edit the note with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteCommand(Index index, EditNoteDescriptor editNoteDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(editNoteDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.editNoteDescriptor \u003d new EditNoteDescriptor(editNoteDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e lastShownList \u003d model.getFilteredNoteList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedNote \u003d createEditedNote(noteToEdit, editNoteDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!noteToEdit.isSameNote(editedNote) \u0026\u0026 model.hasNote(editedNote)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note replaced \u003d editedNote;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Defensively copy images to data folder"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (nonNull(editedNote.getImage())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            Path sourcePath \u003d Paths.get(editedNote.getImageUrl().substring(5));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            Path destPath \u003d model.getAppDataFilePath().getParent().resolve(sourcePath.getFileName().toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                Files.copy(sourcePath, destPath, StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                replaced \u003d new Note(editedNote.getTitle(), editedNote.getContent(), new Image(\"file:\" + destPath));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.setNote(noteToEdit, replaced);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_NOTE_SUCCESS, replaced));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Creates and returns a {@code Note} with the details of {@code noteToEdit}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * edited with {@code editNoteDescriptor}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static Note createEditedNote(Note noteToEdit, EditNoteDescriptor editNoteDescriptor) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assert noteToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Title updatedTitle \u003d editNoteDescriptor.getTitle().orElse(noteToEdit.getTitle());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Content updatedContent \u003d editNoteDescriptor.getContent().orElse(noteToEdit.getContent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (editNoteDescriptor.getImageRemoved()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new Note(updatedTitle, updatedContent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Note(updatedTitle, updatedContent, editNoteDescriptor.getImage().orElse(noteToEdit.getImage()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!(other instanceof EditNoteCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand e \u003d (EditNoteCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 editNoteDescriptor.equals(e.editNoteDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Stores the details to edit the lecture note with."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * A non-empty title or content will replace the corresponding field value of the note;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * the image field is considered edited if \u003ccode\u003eisImageRemoved\u003c/code\u003e is true or image is non-null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static class EditNoteDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        private Content content;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        private Image image;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        private boolean isImageRemoved \u003d false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public EditNoteDescriptor() {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public EditNoteDescriptor(EditNoteDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            setContent(toCopy.content);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            setImage(toCopy.image);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            setImageRemoved(toCopy.isImageRemoved);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, content) || isImageRemoved || image !\u003d null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void setContent(Content content) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            this.content \u003d content;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public Optional\u003cContent\u003e getContent() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return Optional.ofNullable(content);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void setImage(Image image) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            this.image \u003d image;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public Optional\u003cImage\u003e getImage() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return Optional.ofNullable(image);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void setImageRemoved(boolean isImageRemoved) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            this.isImageRemoved \u003d isImageRemoved;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        boolean getImageRemoved() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return isImageRemoved;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            if (!(other instanceof EditNoteDescriptor)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            EditNoteDescriptor e \u003d (EditNoteDescriptor) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    \u0026\u0026 getContent().equals(e.getContent())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    \u0026\u0026 getImage().equals(e.getImage())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    \u0026\u0026 isImageRemoved \u003d\u003d e.isImageRemoved;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 118,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/FindNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Finds and lists all lecture notes whose title contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class FindNoteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findnote\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all lecture notes whose titles contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"the specified words (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"Parameters: WORD [WORD]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" important fact\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final TitleContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public FindNoteCommand(TitleContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                String.format(Messages.MESSAGE_NOTES_LISTED_OVERVIEW, model.getFilteredNoteList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof FindNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindNoteCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 17,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/ListNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Lists all lecture notes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class ListNoteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listnote\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all lecture notes\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 9,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/questioncommands/AddQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Adds a question to NUStudy."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class AddQuestionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addq\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a question to NUStudy. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_QUESTION + \"1 + 1 \u003d  \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_ANSWER + \"2 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_SUBJECT + \"Math \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_DIFFICULTY + \"easy \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New question added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"This question already exists in NUStudy\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final Question toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Creates an AddQuestionCommand to add the specified {@code Question}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public AddQuestionCommand(Question question) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        toAdd \u003d question;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (model.hasQuestion(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.addQuestion(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof AddQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddQuestionCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/questioncommands/ClearQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Command to clear all questions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class ClearQuestionCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearq\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Questions have been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.clearQuestions();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/questioncommands/DeleteQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Deletes a question by index number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class DeleteQuestionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteq\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \": Deletes the question with the specified index number.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_DELETE_QUESTION_SUCCESS \u003d \"Deleted question: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public DeleteQuestionCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        List\u003cQuestion\u003e lastShownList \u003d model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question questionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.deleteQuestion(questionToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_QUESTION_SUCCESS, questionToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof DeleteQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteQuestionCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/questioncommands/EditQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_QUESTIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Edits the details of an existing question."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class EditQuestionCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editq\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the question identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"by the index number used in the displayed question list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"[\" + PREFIX_ANSWER + \"ANSWER] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"[\" + PREFIX_SUBJECT + \"SUBJECT] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"[\" + PREFIX_DIFFICULTY + \"DIFFICULTY] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 + 1 \u003d \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_ANSWER + \"2\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + PREFIX_SUBJECT + \"Math\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_EDIT_QUESTION_SUCCESS \u003d \"Edited Question: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"This question already exists in NUStudy.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final EditQuestionDescriptor editQuestionDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @param index of the question in the filtered question list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @param editQuestionDescriptor details to edit the question with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public EditQuestionCommand(Index index, EditQuestionDescriptor editQuestionDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(editQuestionDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.editQuestionDescriptor \u003d new EditQuestionDescriptor(editQuestionDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        List\u003cQuestion\u003e lastShownList \u003d model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question questionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question editedQuestion \u003d createEditedQuestion(questionToEdit, editQuestionDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!questionToEdit.isSameQuestion(editedQuestion) \u0026\u0026 model.hasQuestion(editedQuestion)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.setQuestion(questionToEdit, editedQuestion);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.updateFilteredQuestionList(PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_QUESTION_SUCCESS, editedQuestion));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Creates and returns a {@code Question} with the details of {@code questionToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * edited with {@code editQuestionDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private static Question createEditedQuestion(Question questionToEdit,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                                                 EditQuestionDescriptor editQuestionDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assert questionToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        QuestionBody updatedQuestionBody \u003d editQuestionDescriptor.getQuestionBody()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .orElse(questionToEdit.getQuestionBody());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Answer updatedAnswer \u003d editQuestionDescriptor.getAnswer().orElse(questionToEdit.getAnswer());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Subject updatedSubject \u003d editQuestionDescriptor.getSubject().orElse(questionToEdit.getSubject());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Difficulty updatedDifficulty \u003d editQuestionDescriptor.getDifficulty().orElse(questionToEdit.getDifficulty());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new Question(updatedQuestionBody, updatedAnswer, updatedSubject, updatedDifficulty);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!(other instanceof EditQuestionCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand e \u003d (EditQuestionCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 editQuestionDescriptor.equals(e.editQuestionDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Stores the details to edit the question with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * corresponding field value of the question."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static class EditQuestionDescriptor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        private QuestionBody questionBody;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        private Answer answer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        private Subject subject;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        private Difficulty address;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public EditQuestionDescriptor() {}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public EditQuestionDescriptor(EditQuestionDescriptor toCopy) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            setQuestionBody(toCopy.questionBody);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            setAnswer(toCopy.answer);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            setSubject(toCopy.subject);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            setDifficulty(toCopy.address);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return CollectionUtil.isAnyNonNull(questionBody, answer, subject, address);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public void setQuestionBody(QuestionBody questionBody) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            this.questionBody \u003d questionBody;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public Optional\u003cQuestionBody\u003e getQuestionBody() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return Optional.ofNullable(questionBody);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public void setAnswer(Answer answer) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public Optional\u003cAnswer\u003e getAnswer() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public void setSubject(Subject subject) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            this.subject \u003d subject;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public Optional\u003cSubject\u003e getSubject() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return Optional.ofNullable(subject);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public void setDifficulty(Difficulty address) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public Optional\u003cDifficulty\u003e getDifficulty() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            if (!(other instanceof EditQuestionDescriptor)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            EditQuestionDescriptor e \u003d (EditQuestionDescriptor) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return getQuestionBody().equals(e.getQuestionBody())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    \u0026\u0026 getAnswer().equals(e.getAnswer())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    \u0026\u0026 getSubject().equals(e.getSubject())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    \u0026\u0026 getDifficulty().equals(e.getDifficulty());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/questioncommands/FindDifficultyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.DifficultyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Finds and lists all questions in address book whose difficulty contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class FindDifficultyCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"difficulty\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all questions whose bodies contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"the specified difficulty (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 + 1 \u003d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final DifficultyContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public FindDifficultyCommand(DifficultyContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.updateFilteredQuestionList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                String.format(Messages.MESSAGE_QUESTIONS_LISTED_OVERVIEW, model.getFilteredQuestionList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof FindDifficultyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindDifficultyCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/questioncommands/FindQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.BodyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Finds and lists all questions in address book whose bodies contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class FindQuestionCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findq\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all questions whose bodies contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 + 1 \u003d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final BodyContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public FindQuestionCommand(BodyContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.updateFilteredQuestionList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                String.format(Messages.MESSAGE_QUESTIONS_LISTED_OVERVIEW, model.getFilteredQuestionList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof FindQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindQuestionCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/questioncommands/FindSubjectCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.SubjectContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Finds and lists all questions in address book whose subject contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class FindSubjectCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"subject\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all questions whose subject contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"the specified subject (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 + 1 \u003d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final SubjectContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public FindSubjectCommand(SubjectContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.updateFilteredQuestionList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                String.format(Messages.MESSAGE_QUESTIONS_LISTED_OVERVIEW, model.getFilteredQuestionList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof FindSubjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindSubjectCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/questioncommands/ListQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_QUESTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Lists all questions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class ListQuestionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listq\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all questions.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.updateFilteredQuestionList(PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuitQuizModeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Quits the quiz mode."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuitQuizModeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have exited from the quiz mode!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        model.clearQuizQuestionList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        LogicManager.setIsQuiz(false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizCheckAnswer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Checks the quiz answer input by users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizCheckAnswer extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String ANSWER_CORRECT \u003d \"The answer is correct! Well done!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String ANSWER_WRONG \u003d \"The answer is wrong! Please try again.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String EMPTY_QUESTION \u003d \"You have answered all questions!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param answer of the question input by user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizCheckAnswer(Answer answer) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public String getQuizTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return simpleDateFormat.format(now);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            boolean result \u003d model.checkQuizAnswer(answer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            Question question \u003d model.getOneQuizQuestion();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            QuestionBody questionBody \u003d question.getQuestionBody();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            Subject subject \u003d question.getSubject();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            Difficulty difficulty \u003d question.getDifficulty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            QuizResult quizResult \u003d new QuizResult(answer, questionBody, subject, difficulty, getQuizTime(), result);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            model.addQuizResult(quizResult);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            if (result) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                model.removeOneQuizQuestion();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                return new CommandResult(ANSWER_CORRECT, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                return new CommandResult(ANSWER_WRONG, 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new CommandException(EMPTY_QUESTION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "Auxinnn": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizModeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Enters the quiz mode of NUStudy."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizModeCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiz\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters quiz mode where questions will be displayed \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + \" and answer input is required to check the accuracy.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_NUMBER + \"NUMBER OF QUESTIONS (a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_NUMBER + \"8 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_DIFFICULTY + \"Easy \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + PREFIX_SUBJECT + \"Maths \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have successfully entered quiz mode!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String INSUFFICIENT_QUESTION \u003d \"There are insufficient questions to do the quiz!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final int numOfQuestions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Subject subject;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Difficulty difficulty;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the quiz question with specific {@code subject} and {@code difficulty}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizModeCommand(int numOfQuestions, Subject subject, Difficulty difficulty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.numOfQuestions \u003d numOfQuestions;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            ObservableList\u003cQuestion\u003e quizQuestionList \u003d model.getQuizQuestions(numOfQuestions, subject, difficulty);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            model.setQuizQuestionList(quizQuestionList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            LogicManager.setIsQuiz(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new CommandException(INSUFFICIENT_QUESTION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "Auxinnn": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizShowAnswerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Shows an answer for the question in quiz."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizShowAnswerCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The answer is: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String EMPTY_QUESTION \u003d \"There is no more question!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            Answer answer \u003d model.showQuizAnswer();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, answer.toString()), 4);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new CommandException(EMPTY_QUESTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "Auxinnn": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/quiz/QuizSkipQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Skips current quiz question."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizSkipQuestion extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"skip\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Next question is displayed\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String EMPTY_QUESTION \u003d \"There is no more question. Please quit the mode.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String LAST_QUESTION \u003d \"All questions have been answered\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String NO_ANSWER \u003d \"This question is not answered.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public String getQuizTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return simpleDateFormat.format(now);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (model.getSize() \u003c 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new CommandException(EMPTY_QUESTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Question question \u003d model.getOneQuizQuestion();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Answer answer \u003d new Answer(NO_ANSWER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        QuizResult quizResult \u003d new QuizResult(answer, question.getQuestionBody(), question.getSubject(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                question.getDifficulty(), getQuizTime(), false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        model.addQuizResult(quizResult);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        model.removeOneQuizQuestion();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (model.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new CommandResult(LAST_QUESTION, 4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, 4);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/GetOverviewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.Type.OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.exceptions.EmptyQuizResultListException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Gets an overview of the types of questions that have been attempted overall."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetOverviewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"overview\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets an overview of the types of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"questions that have been attempted overall.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"An optional time period can be included.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"A stacked bar chart, sorted by subjects, will be returned.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"START_DATE] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"END_DATE]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"dt/08/09/2019 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"dt/10/09/2019\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is an overview of the questions: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"The format of date is incorrect.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"The format of the command is incorrect.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_NO_STATISTICS \u003d \"There are no questions done, try doing some questions.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private QuizResultFilter quizResultFilter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Creates a GetOverviewCommand to get the specified quiz"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * results filtered by the {@code QuizResultFilter}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param quizResultFilter The filter to be applied to the quiz results."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetOverviewCommand(QuizResultFilter quizResultFilter) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(quizResultFilter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.quizResultFilter \u003d quizResultFilter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            model.updateQuizResultFilter(quizResultFilter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } catch (EmptyQuizResultListException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new CommandException(MESSAGE_NO_STATISTICS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        CommandResult c \u003d new CommandResult(MESSAGE_SUCCESS, 8);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        c.setType(OVERVIEW);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                || (other instanceof GetOverviewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 quizResultFilter.equals(((GetOverviewCommand) other).quizResultFilter)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/GetQnsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.Type.QUESTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.exceptions.EmptyQuizResultListException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Gets all questions that have been answered correctly/incorrectly by subject."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetQnsCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets all questions that have been answered \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"correctly/incorrectly for a particular subject by using either -c/-i respectively.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"[-c] [-i] [\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT1]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -c \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + PREFIX_SUBJECT + \"CS2103T\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the questions: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_NO_QNS \u003d \"There are no correctly/incorrectly answered questions, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"try doing some questions.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private QuizResultFilter quizResultFilter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Creates a GetQnsCommand to get the specified questions filtered by the {@code QuizResultFilter}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param quizResultFilter The filter to be applied to the quiz results."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetQnsCommand(QuizResultFilter quizResultFilter) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(quizResultFilter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.quizResultFilter \u003d quizResultFilter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            model.filterQuizResult(quizResultFilter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            model.updateQuizResultFilter(quizResultFilter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } catch (EmptyQuizResultListException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new CommandException(MESSAGE_NO_QNS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        CommandResult c \u003d new CommandResult(MESSAGE_SUCCESS, 8);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        c.setType(QUESTIONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                || (other instanceof GetQnsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 quizResultFilter.equals(((GetQnsCommand) other).quizResultFilter)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "irene-lly": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/GetReportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.Type.REPORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.exceptions.EmptyQuizResultListException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Returns a report for the questions done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetReportCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Returns a report of how well you have \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"answered a particular question,\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"the number of times the question has been attempted and the past answers to the question.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Parameters: INDEX\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here is a report of the question:\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_NO_REPORT \u003d \"There is no data available for this question. \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Creates a GetReportCommand to get the specified {@code QuizResult}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * for a question."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param index The index of the question."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetReportCommand(Index index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cQuestion\u003e lastShownList \u003d model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Question question \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            model.generateQnsReport(question);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } catch (EmptyQuizResultListException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new CommandException(MESSAGE_NO_REPORT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        CommandResult c \u003d new CommandResult(MESSAGE_SUCCESS, 8);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        c.setType(REPORT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                || (other instanceof GetReportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 index.equals(((GetReportCommand) other).index)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/GetStatisticsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.Type.STATS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.exceptions.EmptyQuizResultListException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Gets statistics of how well the user has attempted the questions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetStatisticsCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gets the statistics of how well \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"a question has been answered for a subject. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"A pie chart will be returned.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"[\" + PREFIX_SUBJECT + \"SUBJECT]... \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + PREFIX_SUBJECT + \"CS2103T\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are the statistics: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static final String MESSAGE_NO_STATISTICS \u003d \"There is no available data for computation of \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            + \"statistics, try doing some questions.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private QuizResultFilter quizResultFilter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Creates a GetStatisticsCommand to get the specified statistics"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * filtered by the {@code QuizResultFilter}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param quizResultFilter The filter to be applied to the quiz results."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetStatisticsCommand(QuizResultFilter quizResultFilter) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(quizResultFilter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.quizResultFilter \u003d quizResultFilter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            model.filterQuizResult(quizResultFilter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } catch (EmptyQuizResultListException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new CommandException(MESSAGE_NO_STATISTICS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        CommandResult c \u003d new CommandResult(MESSAGE_SUCCESS, 8);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        c.setType(STATS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                || (other instanceof GetStatisticsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 quizResultFilter.equals(((GetStatisticsCommand) other).quizResultFilter)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statistics/Type.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * This documents the type of statistics available."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public enum Type {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    STATS,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    QUESTIONS,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    REPORT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    OVERVIEW"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/AddTaskForNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Adds a revision task for lecture note to the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class AddTaskForNoteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rn\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note revision task to NUStudy. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_TITLE + \"Lecture 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_DATE + \"15/10/2019 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_TIME + \"1500\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Revision task added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Creates an AddTaskForNoteCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public AddTaskForNoteCommand(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!hasValidNoteForTask(model)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOTE_NOT_FOUND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private boolean hasValidNoteForTask(Model model) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Note note \u003d new Note (new Title(toAdd.getHeading().toString()), new Content(\"Dummy entry\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return model.hasNote(note);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || (other instanceof AddTaskForNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTaskForNoteCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/AddTaskForQuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.TaskForQuestion;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Adds a revision task for question to the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class AddTaskForQuestionCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rq\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a question revision task to NUStudy. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_INDEX + \"INDEX \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_DATE + \"15/10/2019 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + PREFIX_TIME + \"1500\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Revision task added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUND \u003d \"Index out of bound. Please key in an index within the\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \" range of 1 and size of question list\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Task toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Creates an AddTaskForQuestionCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public AddTaskForQuestionCommand(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        toAdd \u003d getQuestionTask(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Task getQuestionTask(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Index targetIndex \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            targetIndex \u003d ParserUtil.parseIndex(toAdd.getHeading().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        List\u003cQuestion\u003e lastShownList \u003d model.getFilteredQuestionList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new CommandException(MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Question question \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalDate date \u003d toAdd.getDate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalTime time \u003d toAdd.getTime();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new TaskForQuestion(question, date, time);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || (other instanceof AddTaskForQuestionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTaskForQuestionCommand) other).toAdd));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/ClearTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Clears all tasks in the revision task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class ClearTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rclear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All tasks have been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.clearTaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Deletes a task from the revision task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rdelete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \": Deletes the task with the specified index number.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted task: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/DoneTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Marks a task in the task list as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class DoneTaskCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rdone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \": Marks the task with the specified index number as done.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Revision task marked as done: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public DoneTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Task taskDone \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (taskDone.getStatus()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_TASK_ALREADY_DONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.markTaskAsDone(taskDone);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, taskDone));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || (other instanceof DoneTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/ListAllTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Displays all tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class ListAllTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rlist\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/ListDoneTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Displays all tasks that have been done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class ListDoneTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"finished\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks that have been done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_DONE_TASKS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/ListNotDoneTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Displays all tasks that are yet to complete."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class ListNotDoneTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unfinished\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks that are yet to be done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_NOT_DONE_TASKS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/ListOverdueTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Displays all tasks that are not finished on time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class ListOverdueTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"overdue\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all overdue tasks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_NO_TASKS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_OVERDUE_TASKS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AppDataParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.ClearNoteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.FindNoteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.AddQuestionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.ClearQuestionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.EditQuestionCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.FindDifficultyCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.FindQuestionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.FindSubjectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.ListQuestionCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizModeCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetOverviewCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetQnsCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetReportCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetStatisticsCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskForNoteCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskForQuestionCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.ClearTaskCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.DoneTaskCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.ListAllTaskCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.ListDoneTaskCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.ListNotDoneTaskCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.ListOverdueTaskCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.note.AddNoteCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.note.DeleteNoteCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.note.EditNoteCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.note.FindNoteCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.questionparser.AddQuestionCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.questionparser.DeleteQuestionCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.questionparser.EditQuestionCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.questionparser.FindDifficultyCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.questionparser.FindQuestionCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.questionparser.FindSubjectCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.quiz.QuizModeCommandParser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.statistics.GetOverviewCommandParser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.statistics.GetQnsCommandParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.statistics.GetReportCommandParser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.statistics.GetStatisticsCommandParser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.task.AddTaskForNoteCommandParser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.task.AddTaskForQuestionCommandParser;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.task.DeleteTaskCommandParser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.task.DoneTaskCommandParser;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AppDataParser {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case AddNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new AddNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case EditNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new EditNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case DeleteNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new DeleteNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case ClearNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new ClearNoteCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case FindNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new FindNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        case ListNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new ListNoteCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        case QuizModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new QuizModeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case GetStatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return new GetStatisticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case GetQnsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return new GetQnsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case GetReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return new GetReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case GetOverviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return new GetOverviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        case AddQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new AddQuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        case DeleteQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new DeleteQuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        case ListQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new ListQuestionCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        case EditQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new EditQuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        case FindQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new FindQuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        case FindDifficultyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new FindDifficultyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        case FindSubjectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new FindSubjectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        case ClearQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new ClearQuestionCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case AddTaskForNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new AddTaskForNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case AddTaskForQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new AddTaskForQuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case DoneTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new DoneTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case ClearTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new ClearTaskCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case ListDoneTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new ListDoneTaskCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case ListNotDoneTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new ListNotDoneTaskCommand();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case ListAllTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new ListAllTaskCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        case ListOverdueTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new ListOverdueTaskCommand();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 23,
      "shuiyao-sg": 40,
      "Auxinnn": 5,
      "irene-lly": 20,
      "ShirleyWangxt": 38,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Prefix PREFIX_IMAGE \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final Prefix PREFIX_NUMBER \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final Prefix PREFIX_DIFFICULTY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"tm/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "shuiyao-sg": 3,
      "Auxinnn": 3,
      "ShirleyWangxt": 3,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String trimmedName \u003d title.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!Title.isValidTitle(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Title(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses a {@code String content} into an {@code Content}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws ParseException if the given {@code content} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static Content parseContent(String content) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String trimmedAddress \u003d content.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!Content.isValidContent(trimmedAddress)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new ParseException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Content(trimmedAddress);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses a {@code String number} into an {@code Integer}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static int parseNumber(String number) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(number);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return Integer.parseInt(number);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses a {@code String questionBody} into a {@code QuestionBody}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the given {@code questionBody} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static QuestionBody parseQuestionBody(String questionBody) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(questionBody);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String trimmedBody \u003d questionBody.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!QuestionBody.isValidQuestionBody(trimmedBody)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(QuestionBody.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new QuestionBody(trimmedBody);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new Answer(answer);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses a {@code String subject} into an {@code Subject}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @throws ParseException if the given {@code subject} is invalid."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static Subject parseSubject(String subject) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        String trimmedSubject \u003d subject.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (!Subject.isValidSubject(trimmedSubject)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(Subject.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new Subject(trimmedSubject);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses a {@code String difficulty} into an {@code Difficulty}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @throws ParseException if the given {@code difficulty} is invalid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static Difficulty parseDifficulty(String difficulty) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        String trimmedDifficulty \u003d difficulty.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (!Difficulty.isValidDifficulty(trimmedDifficulty)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new Difficulty((trimmedDifficulty));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Parses a {@code String date} into an {@code LocalDate}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            DateTimeFormatter dateFormat \u003d Task.FORMAT_USER_INPUT_DATE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return LocalDate.parse(trimmedDate, dateFormat);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new ParseException(Task.MESSAGE_DATE_CONSTRAINT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Parses a {@code String time} into an {@code LocalTime}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static LocalTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            DateTimeFormatter timeFormat \u003d Task.FORMAT_USER_INPUT_TIME;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return LocalTime.parse(trimmedTime, timeFormat);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new ParseException(Task.MESSAGE_TIME_CONSTRAINT);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 18,
      "shuiyao-sg": 27,
      "Auxinnn": 26,
      "ShirleyWangxt": 21,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/note/AddNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Parses input arguments and creates a new AddNoteCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AddNoteCommandParser implements Parser\u003cAddNoteCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddNoteCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * and returns an AddNoteCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AddNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CONTENT, PREFIX_IMAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note note;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_CONTENT) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Content content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IMAGE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            note \u003d new Note(title, content, AppUtil.selectImage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            note \u003d new Note(title, content);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new AddNoteCommand(note);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 33,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/note/DeleteNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Parses input arguments and creates a new DeleteNoteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class DeleteNoteCommandParser implements Parser\u003cDeleteNoteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteNoteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * and returns a DeleteNoteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public DeleteNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new DeleteNoteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 11,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/note/EditNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.commons.util.AppUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Parses input arguments and creates a new EditNoteCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteCommandParser implements Parser\u003cEditNoteCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditNoteCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * and returns an EditNoteCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CONTENT, PREFIX_IMAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor editNoteDescriptor \u003d new EditNoteDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            editNoteDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTENT).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            editNoteDescriptor.setContent(ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IMAGE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            if (argMultimap.getValue(PREFIX_IMAGE).get().equals(\"none\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                editNoteDescriptor.setImageRemoved(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                editNoteDescriptor.setImage(AppUtil.selectImage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!editNoteDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new ParseException(EditNoteCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new EditNoteCommand(index, editNoteDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 34,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/note/FindNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.FindNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Parses input arguments and creates a new FindNoteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class FindNoteCommandParser implements Parser\u003cFindNoteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindNoteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * and returns a FindNoteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public FindNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new FindNoteCommand(new TitleContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 11,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/questionparser/AddQuestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.parser.questionparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.AddQuestionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Parses input arguments and creates a new AddQuestionCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class AddQuestionCommandParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddQuestionCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * and returns an AddQuestionCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public AddQuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_SUBJECT, PREFIX_DIFFICULTY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_SUBJECT, PREFIX_DIFFICULTY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        QuestionBody questionBody \u003d ParserUtil.parseQuestionBody(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Difficulty difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question question \u003d new Question(questionBody, answer, subject, difficulty);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new AddQuestionCommand(question);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/questionparser/DeleteQuestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.parser.questionparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Parses input arguments and creates a new DeleteQuestionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class DeleteQuestionCommandParser implements Parser\u003cDeleteQuestionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteQuestionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * and returns a DeleteQuestionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public DeleteQuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new DeleteQuestionCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteQuestionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/questionparser/EditQuestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.parser.questionparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.EditQuestionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.EditQuestionCommand.EditQuestionDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Parses input arguments and creates a new EditQuestionCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class EditQuestionCommandParser implements Parser\u003cEditQuestionCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditQuestionCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public EditQuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_SUBJECT, PREFIX_DIFFICULTY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditQuestionCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionDescriptor editQuestionDescriptor \u003d new EditQuestionDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            editQuestionDescriptor.setQuestionBody(ParserUtil.parseQuestionBody(argMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    .getValue(PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            editQuestionDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    .getValue(PREFIX_ANSWER).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SUBJECT).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            editQuestionDescriptor.setSubject(ParserUtil.parseSubject(argMultimap"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    .getValue(PREFIX_SUBJECT).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            editQuestionDescriptor.setDifficulty(ParserUtil.parseDifficulty(argMultimap"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    .getValue(PREFIX_DIFFICULTY).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!editQuestionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException(EditQuestionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new EditQuestionCommand(index, editQuestionDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/questionparser/FindDifficultyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.parser.questionparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.FindDifficultyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.DifficultyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Parses input arguments and creates a new FindDifficultyCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class FindDifficultyCommandParser implements Parser\u003cFindDifficultyCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindDifficultyCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * and returns a FindDifficultyCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public FindDifficultyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindDifficultyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new FindDifficultyCommand(new DifficultyContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/questionparser/FindQuestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.parser.questionparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.FindQuestionCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.BodyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Parses input arguments and creates a new FindQuestionCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class FindQuestionCommandParser implements Parser\u003cFindQuestionCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindQuestionCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * and returns a FindQuestionCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public FindQuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new FindQuestionCommand(new BodyContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/questionparser/FindSubjectCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.parser.questionparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.FindSubjectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.SubjectContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Parses input arguments and creates a new FindSubjectCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class FindSubjectCommandParser implements Parser\u003cFindSubjectCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindSubjectCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * and returns a FindSubjectCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public FindSubjectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindSubjectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new FindSubjectCommand(new SubjectContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/quiz/QuizAnswerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizCheckAnswer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Parses user input for quiz."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizAnswerParser implements Parser\u003cQuizCheckAnswer\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses the given {@code String} of user input in the context of the quiz answer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * and returns an QuizCheckAnswer object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizCheckAnswer parse(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final Answer answer \u003d new Answer(userInput.trim());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new QuizCheckAnswer(answer);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/quiz/QuizModeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizModeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Parses input arguments and creates a new QuizModeCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizModeCommandParser implements Parser\u003cQuizModeCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static final String INVALID_NUMBER \u003d \"The number input should be a positive integer!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the QuizModeCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * and returns an QuizModeCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizModeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NUMBER, PREFIX_DIFFICULTY, PREFIX_SUBJECT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        int numOfQuestions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Subject subject;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Difficulty difficulty;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DIFFICULTY, PREFIX_SUBJECT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                || (!argMultimap.getPreamble().isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, QuizModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            numOfQuestions \u003d ParserUtil.parseNumber(argMultimap.getValue(PREFIX_NUMBER).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new ParseException(INVALID_NUMBER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new QuizModeCommand(numOfQuestions, subject, difficulty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/quiz/QuizParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuitQuizModeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizShowAnswerCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.logic.commands.quiz.QuizSkipQuestion;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Parses user input in the quiz mode."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Parses user input into command for execution or answer of questions to check correctness."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @return the command or answer based on the user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final String commandWord \u003d userInput.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        case QuitQuizModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new QuitQuizModeCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        case QuizShowAnswerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new QuizShowAnswerCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        case QuizSkipQuestion.COMMAND_WORD:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new QuizSkipQuestion();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return new QuizAnswerParser().parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/GetOverviewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.GetOverviewCommand.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.GetOverviewCommand.MESSAGE_INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetOverviewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Parses input arguments and creates a new GetOverviewCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetOverviewCommandParser implements Parser\u003cGetOverviewCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GetOverviewCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * and returns a GetOverviewCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetOverviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilter();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cString\u003e dates;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Date startDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Date endDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            dates \u003d argMultimap.getAllValues(PREFIX_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            if (dates.size() !\u003d 2) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        GetOverviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                startDate \u003d formatter.parse(dates.get(0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                endDate \u003d formatter.parse(dates.get(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_DATE_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        GetOverviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            if (startDate.after(endDate)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                Date temp \u003d startDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                startDate \u003d endDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                endDate \u003d temp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            quizResultFilter \u003d new QuizResultFilter(startDate, endDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new GetOverviewCommand(quizResultFilter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/GetQnsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetQnsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Parses input arguments and creates a new GetQnsCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetQnsCommandParser implements Parser\u003cGetQnsCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GetQnsCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * and returns a GetQnsCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetQnsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilter();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        boolean getCorrectQns;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SUBJECT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (String subject : argMultimap.getAllValues(PREFIX_SUBJECT)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            subjects.add(ParserUtil.parseSubject(subject));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (!(args.contains(\"-c\") ^ args.contains(\"-i\"))) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    GetQnsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        getCorrectQns \u003d args.contains(\"-c\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResultFilter \u003d new QuizResultFilter(subjects, getCorrectQns);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new GetQnsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/GetReportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.commons.core.index.Index.fromOneBased;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetReportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Parses input arguments and creates a new GetReportCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetReportCommandParser implements Parser\u003cGetReportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GetReportCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * and returns an GetReportCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetReportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            index \u003d fromOneBased(Integer.parseInt(args.trim()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    GetReportCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    GetReportCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new GetReportCommand(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/statistics/GetStatisticsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetStatisticsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Parses input arguments and creates a new GetStatisticsCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetStatisticsCommandParser implements Parser\u003cGetStatisticsCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GetStatisticsCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * and returns a GetStatisticsCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public GetStatisticsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Difficulty difficulty;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SUBJECT, PREFIX_DIFFICULTY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (String subject : argMultimap.getAllValues(PREFIX_SUBJECT)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            subjects.add(ParserUtil.parseSubject(subject));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Optional\u003cString\u003e d \u003d argMultimap.getValue(PREFIX_DIFFICULTY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DIFFICULTY).size() \u003e 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (d.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            difficulty \u003d ParserUtil.parseDifficulty(d.get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            quizResultFilter \u003d new QuizResultFilter(subjects, difficulty);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            quizResultFilter \u003d new QuizResultFilter(subjects);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new GetStatisticsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/AddTaskForNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskForNoteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.TaskForNote;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Parses input arguments and creates a new AddTaskForNoteCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class AddTaskForNoteCommandParser implements Parser\u003cAddTaskForNoteCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskForNoteCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * and returns an AddTaskForNoteCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public AddTaskForNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE, PREFIX_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DATE, PREFIX_TIME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    AddTaskForNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Note note \u003d new Note(title, new Content(\"dummy entry\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Task task \u003d new TaskForNote(note, date, time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new AddTaskForNoteCommand(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/AddTaskForQuestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskForQuestionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Heading;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Parses input arguments and creates a new AddTaskForQuestionCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class AddTaskForQuestionCommandParser implements Parser\u003cAddTaskForQuestionCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskForQuestionCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * and returns an AddTaskForQuestionCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public AddTaskForQuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_DATE, PREFIX_TIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_DATE, PREFIX_TIME)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    AddTaskForQuestionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Heading heading \u003d new Heading(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Task task \u003d new Task(heading, date, time, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new AddTaskForQuestionCommand(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/DeleteTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/DoneTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.commands.task.DoneTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Parses input arguments and creates a new DeleteNoteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class DoneTaskCommandParser implements Parser\u003cDoneTaskCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneTaskCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * and returns a DoneTaskCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public DoneTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return new DoneTaskCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 11,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AppData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.UniqueNoteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.UniqueQuestionList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizQuestionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.exceptions.EmptyQuizResultListException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Wraps all application data. Duplicates of lecture notes, questions, tasks, etc. are not allowed by key comparisons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AppData implements ReadOnlyAppData {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final UniqueNoteList notes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final UniqueQuestionList questions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final QuizQuestionList quiz;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final QuizResultList quizResults;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * among constructors."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        notes \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questions \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quiz \u003d new QuizQuestionList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizResults \u003d new QuizResultList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AppData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Creates an AppData using the Notes in {@code toBeCopied}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AppData(ReadOnlyAppData toBeCopied) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    // list overwrite operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Replaces the contents of the note list with {@code notes}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * {@code notes} must not contain duplicate titles."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.notes.setNotes(notes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Replaces the contents of the question list with {@code questions}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code questions} must not contain duplicate questions."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.questions.setQuestions(questions);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Resets the existing data of this {@code AppData} with {@code newData}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void resetData(ReadOnlyAppData newData) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        setNotes(newData.getNoteList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        setQuestions(newData.getQuestionList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        setQuizResults(newData.getQuizResultList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    // note-level operations"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if a lecture note with the same title as {@code note} exists."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return notes.contains(note);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Adds a lecture note; its title must not already exist."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void addNote(Note p) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        notes.add(p);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Replaces the given lecture note {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * {@code target} must exist beforehand and titles must remain unique."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(editedNote);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        notes.setNote(target, editedNote);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Retrieves {@code title} from the note list. The note must exists."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @param title The note with the same title to be retrieved."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @return The note with the same title as specified in input."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Note getNote(Note title) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return notes.get(title);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Removes {@code title} from the lecture note list. This title must exist."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void removeNote(Note title) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        notes.remove(title);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Clears all lecture notes."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void clearNotes() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        notes.setNotes(new UniqueNoteList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    //// question operations"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if a question with the same identity as {@code question} exists in this set"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * of application data."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return questions.contains(question);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Adds a question to NUStudy."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question must not already exist in NUStudy."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void addQuestion(Question q) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questions.add(q);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Replaces the given question {@code target} in the list with {@code editedQuestion}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code target} must exist in NUStudy."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question body of {@code editedQuestion} must not be the same as another existing question in NUStudy."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(editedQuestion);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questions.setQuestion(target, editedQuestion);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Removes {@code key} from this {@code AppData}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * {@code key} must exist in the application data."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void removeQuestion(Question key) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questions.remove(key);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Clears all questions."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void clearQuestions() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questions.setQuestions(new UniqueQuestionList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    // quiz operations"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns a list with questions for quiz with {@code numOfQuestions}, {@code subject} and {@code difficulty}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuizQuestions(int numOfQuestions, Subject subject, Difficulty difficulty) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        ObservableList\u003cQuestion\u003e quizQuestions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        List\u003cQuestion\u003e filteredQuestions \u003d getQuestionList()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                .filter(question -\u003e subject.equals(question.getSubject())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                        \u0026\u0026 difficulty.equals(question.getDifficulty()))"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfQuestions; i++) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            int randomIndex \u003d random.nextInt(filteredQuestions.size());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            Question question \u003d filteredQuestions.get(randomIndex);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            quizQuestions.add(question);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            filteredQuestions.remove(randomIndex);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return quizQuestions;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the question list in quiz as {@code quizQuestionList}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quiz.setQuizQuestionList(quizQuestionList);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Gets one question from the list and return a new list contains this question."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getOneQuizQuestionAsList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return quiz.getOneQuizQuestionAsList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Question getOneQuizQuestion() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return quiz.getOneQuizQuestion();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void removeOneQuizQuestion() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quiz.removeOneQuizQuestion();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return quiz.getSize();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an answer for the question in quiz with specific {@code index}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Answer showQuizAnswer() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return quiz.showAnswer();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Checks the answer input by user and return a boolean value as the result."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean checkQuizAnswer(Answer answer) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return quiz.checkQuizAnswer(answer);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Clears the quiz question list."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void clearQuizQuestionList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quiz.clearQuizQuestionList();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    // Quiz Result operations"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void setQuizResults(List\u003cQuizResult\u003e quizResults) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.quizResults.setQuizResults(quizResults);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void addQuizResult(QuizResult quizResult) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResults.add(quizResult);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean hasQuizResult(QuizResult quizResult) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.contains(quizResult);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e filterQuizResult(QuizResultFilter quizResultFilter)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throws EmptyQuizResultListException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.filterQuizResult(quizResultFilter);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cSubject\u003e getUniqueSubjectList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.getUniqueSubjectList();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cDifficulty\u003e getUniqueDifficultyList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.getUniqueDifficultyList();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e getQnsReport(Question question) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.getQnsReport(question);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return notes.asUnmodifiableObservableList().size() + \" lecture notes\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public ObservableList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return notes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestionList() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return questions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuizQuestionList() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return quiz.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e getQuizResultList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof AppData // instanceof handles nulls"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 notes.equals(((AppData) other).notes)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 questions.equals(((AppData) other).questions)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 quizResults.equals(((AppData) other).quizResults)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 tasks.equals(((AppData) other).tasks));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return Objects.hash(notes, quiz, questions, tasks);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    // note-level operations"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns true if a revision task with the same note / question, same date and time, and same status"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * as {@code task} exists."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Adds a revision task."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * {@code target} must exist beforehand."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Removes {@code toRemove} from the revision task list. This task must exist."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void removeTask(Task toRemove) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.remove(toRemove);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void markTaskAsDone(Task taskDone) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.markTaskAsDone(taskDone);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void clearTaskList() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 53,
      "shuiyao-sg": 66,
      "Auxinnn": 89,
      "irene-lly": 41,
      "ShirleyWangxt": 61,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.StackBarChartModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    Predicate\u003cNote\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_NO_TASKS \u003d task -\u003e false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_DONE_TASKS \u003d Task::getStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_NOT_DONE_TASKS \u003d task -\u003e !task.getStatus();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_OVERDUE_TASKS \u003d task -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalDateTime taskDateTime \u003d LocalDateTime.of(task.getDate(), task.getTime());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return !task.getStatus() \u0026\u0026 taskDateTime.isBefore(now);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    Predicate\u003cQuestion\u003e PREDICATE_SHOW_ALL_QUESTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the user prefs\u0027 application data file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    Path getAppDataFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Sets the user prefs\u0027 application data file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void setAppDataFilePath(Path appDataFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Replaces current application data with the data in {@code appData}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void setAppData(ReadOnlyAppData appData);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the AppData"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    ReadOnlyAppData getAppData();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if a note with the same identity as {@code note} exists in the current application data."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    boolean hasNote(Note note);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Deletes the given existing lecture note."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void deleteNote(Note target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Clears all lecture notes."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void clearNotes();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Adds the given (not yet existing) lecture note."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void addNote(Note note);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Replaces the given lecture note {@code target} with {@code editedNote}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * {@code target} must exist, while the title of {@code editedNote} must not be the same as another"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * existing lecture note."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void setNote(Note target, Note editedNote);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the filtered note list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNoteList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns an unmodifiable view of the filtered task list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Updates the filter of the filtered note list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void updateFilteredNoteList(Predicate\u003cNote\u003e predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    Note getNote(Note note);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if a question with the same identity as {@code question} exists in NUStudy."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    boolean hasQuestion(Question question);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Adds the given question."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code question} must not already exist in NUStudy."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void addQuestion(Question question);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Deletes the given question."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question must exist in NUStudy."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void deleteQuestion(Question target);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Clears all questions."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void clearQuestions();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Replaces the given question {@code target} with {@code editedQuestion}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code target} must exist in NUStudy."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question body of {@code editedQuestion} must not be the same as another existing question in NUStudy."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void setQuestion(Question target, Question editedQuestion);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the filtered question list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuestionList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Updates the filter of the filtered question list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns a question list with specific {@code numOfQuestions}, {@code subject} and {@code difficulty}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuizQuestions(int numOfQuestions, Subject subject, Difficulty difficulty);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the question list in quiz as {@code quizQuestionList}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    void setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Gets one question from the list and return a new list contains this question."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuestion\u003e getOneQuizQuestionAsList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Return the number of remaining quiz questions."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    int getSize();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    Question getOneQuizQuestion();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    void removeOneQuizQuestion();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the filtered quiz question list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuestion\u003e getFilteredQuizQuestionList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Filters the quiz result list with {@code QuizResultFilter}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param quizResultFilter The filter to be applied."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    void filterQuizResult(QuizResultFilter quizResultFilter);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Updates the existing {@code QuizResultFilter}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param quizResultFilter The filter to update with."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    void updateQuizResultFilter(QuizResultFilter quizResultFilter);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of the filtered quiz result list."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cQuizResult\u003e getFilteredQuizResultList();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Checks the an answer input by user and return the boolean value as the result."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    boolean checkQuizAnswer(Answer answer);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Adds the quiz result to the quiz result list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param quizResult The quiz result to be added."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    void addQuizResult(QuizResult quizResult);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Clears the quiz question list."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    void clearQuizQuestionList();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void markTaskAsDone(Task taskDone);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    void clearTaskList();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an answer for question in quiz with specific {@code index}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    Answer showQuizAnswer();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns the total number of questions answered."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    int getTotalQuestionsDone();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of the pie chart data."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cPieChart.Data\u003e getStatsPieChartData();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of the quiz result list."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cQuizResult\u003e getQuizResultList();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Filters the quiz result list by the question."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param question The question to filter by."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    void generateQnsReport(Question question);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of a list of unique subjects."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cSubject\u003e getUniqueSubjectList();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of the series list of a bar chart."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cStackBarChartModel\u003e getStackBarChartData();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns an unmodifiable view of the data list for a pie chart."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    ObservableList\u003cPieChart.Data\u003e getQnsPieChartData();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 28,
      "shuiyao-sg": 32,
      "Auxinnn": 55,
      "irene-lly": 63,
      "ShirleyWangxt": 40,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.exceptions.EmptyQuizResultListException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.StackBarChartModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Represents the in-memory model of application data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final AppData appData;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final FilteredList\u003cNote\u003e filteredNotes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final FilteredList\u003cQuestion\u003e filteredQuestions;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final FilteredList\u003cQuestion\u003e filteredQuizQuestions;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final FilteredList\u003cQuizResult\u003e filteredQuizResults;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private QuizResultFilter quizResultFilter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private ObservableList\u003cQuizResult\u003e quizResults;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Initializes a ModelManager with the given appData and userPrefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public ModelManager(ReadOnlyAppData appData, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireAllNonNull(appData, userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        logger.fine(\"Initializing with application data: \" + appData + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.appData \u003d new AppData(appData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        filteredNotes \u003d new FilteredList\u003c\u003e(this.appData.getNoteList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        filteredQuestions \u003d new FilteredList\u003c\u003e(this.appData.getQuestionList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        filteredQuizQuestions \u003d new FilteredList\u003c\u003e(this.appData.getQuizQuestionList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        filteredQuizResults \u003d new FilteredList\u003c\u003e(this.appData.getQuizResultList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.appData.getTaskList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this(new AppData(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Path getAppDataFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return userPrefs.getAppDataFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setAppDataFilePath(Path appDataFilePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(appDataFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        userPrefs.setAppDataFilePath(appDataFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppData \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setAppData(ReadOnlyAppData appData) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.appData.resetData(appData);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public ReadOnlyAppData getAppData() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appData;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    // note"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appData.hasNote(note);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.removeNote(target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void clearNotes() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.clearNotes();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.addNote(note);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.setNote(target, editedNote);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    // question"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appData.hasQuestion(question);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void deleteQuestion(Question target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.removeQuestion(target);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void clearQuestions() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        appData.clearQuestions();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.addQuestion(question);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        updateFilteredQuestionList(PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireAllNonNull(target, editedQuestion);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.setQuestion(target, editedQuestion);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Note getNote(Note note) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appData.getNote(note);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    //quiz"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuizQuestions(int numOfQuestions, Subject subject, Difficulty difficulty) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireAllNonNull(subject, difficulty);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appData.getQuizQuestions(numOfQuestions, subject, difficulty);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(quizQuestionList);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.setQuizQuestionList(quizQuestionList);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getOneQuizQuestionAsList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return appData.getOneQuizQuestionAsList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Question getOneQuizQuestion() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return appData.getOneQuizQuestion();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void removeOneQuizQuestion() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        appData.removeOneQuizQuestion();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return appData.getSize();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Answer showQuizAnswer() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return appData.showQuizAnswer();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean checkQuizAnswer(Answer answer) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return appData.checkQuizAnswer(answer);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void addQuizResult(QuizResult quizResult) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(quizResult);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.addQuizResult(quizResult);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void clearQuizQuestionList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.clearQuizQuestionList();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void filterQuizResult(QuizResultFilter quizResultFilter) throws EmptyQuizResultListException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.quizResults \u003d appData.filterQuizResult(quizResultFilter);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (quizResults.isEmpty()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new EmptyQuizResultListException();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private ObservableList\u003cQuizResult\u003e filterQuizResultAndReturn(QuizResultFilter quizResultFilter) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return appData.filterQuizResult(quizResultFilter);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void updateQuizResultFilter(QuizResultFilter quizResultFilter) throws EmptyQuizResultListException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (filteredQuizResults.isEmpty()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new EmptyQuizResultListException();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.quizResultFilter \u003d quizResultFilter;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Note List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Note}s backed by the internal list of"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * {@code versionedAppData}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return filteredNotes;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        filteredNotes.setPredicate(predicate);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Question List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Question} backed by the internal list of"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * {@code versionedAppData}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionList() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return filteredQuestions;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        filteredQuestions.setPredicate(predicate);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Quiz Question List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuizQuestionList() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return filteredQuizQuestions;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e getFilteredQuizResultList() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return filteredQuizResults;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appData.hasTask(task);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.removeTask(target);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.addTask(task);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.setTask(target, editedTask);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void markTaskAsDone(Task taskDone) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.markTaskAsDone(taskDone);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task}s backed by the internal list of"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * {@code versionedAppData}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void clearTaskList() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.clearTaskList();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appData.equals(other.appData)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 filteredNotes.equals(other.filteredNotes)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 filteredQuestions.equals(other.filteredQuestions)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e getQuizResultList() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int getTotalQuestionsDone() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults.size();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void generateQnsReport(Question question) throws EmptyQuizResultListException {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResults \u003d appData.getQnsReport(question);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (quizResults.isEmpty()) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new EmptyQuizResultListException();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private int getTotalQuestionsCorrect() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        int totalCorrectQns \u003d 0;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (QuizResult q : quizResults) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            if (q.getResult()) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                totalCorrectQns++;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return totalCorrectQns;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private int getTotalQuestionsIncorrect() {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        int totalIncorrectQns \u003d 0;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (QuizResult q : quizResults) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            if (!q.getResult()) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                totalIncorrectQns++;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return totalIncorrectQns;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getStatsPieChartData() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        pieChartData.add(new PieChart.Data(\"Correct\", getTotalQuestionsCorrect()));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        pieChartData.add(new PieChart.Data(\"Incorrect\", getTotalQuestionsIncorrect()));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return pieChartData;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getQnsPieChartData() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cDifficulty\u003e uniqueDifficultyList \u003d appData.getUniqueDifficultyList();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (Difficulty d : uniqueDifficultyList) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            quizResultFilter.setOperation(d);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            ObservableList\u003cQuizResult\u003e results \u003d filterQuizResultAndReturn(quizResultFilter);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            pieChartData.add(new PieChart.Data(d.difficulty, results.size()));"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return pieChartData;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cSubject\u003e getUniqueSubjectList() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return appData.getUniqueSubjectList();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cStackBarChartModel\u003e getStackBarChartData() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cDifficulty\u003e uniqueDifficultyList \u003d appData.getUniqueDifficultyList();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cSubject\u003e uniqueSubjectList \u003d getUniqueSubjectList();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cStackBarChartModel\u003e barChartData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (Difficulty d : uniqueDifficultyList) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            List\u003cXYChart.Data\u003cString, Number\u003e\u003e dataListPerDifficulty \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            for (Subject s : uniqueSubjectList) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                quizResultFilter.setOperation(s, d);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                int n \u003d filterQuizResultAndReturn(quizResultFilter).size();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                dataListPerDifficulty.add(new XYChart.Data\u003c\u003e(s.toString(), n));"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            barChartData.add(new StackBarChartModel(d, dataListPerDifficulty));"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return FXCollections.observableArrayList(barChartData);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 64,
      "shuiyao-sg": 40,
      "Auxinnn": 56,
      "irene-lly": 124,
      "ShirleyWangxt": 46,
      "-": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAppData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Unmodifiable view of a lecture note list and a question list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public interface ReadOnlyAppData {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns an unmodifiable view of the lecture note list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * This list will not contain any duplicate titles."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    ObservableList\u003cNote\u003e getNoteList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns an unmodifiable view of the questions list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * This list will not contain any duplicate questions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuestionList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the quiz question list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuestion\u003e getQuizQuestionList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an unmodifiable view of the quiz result list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    ObservableList\u003cQuizResult\u003e getQuizResultList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns an unmodifiable view of the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    List\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 6,
      "shuiyao-sg": 7,
      "Auxinnn": 11,
      "ShirleyWangxt": 8,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    Path getAppDataFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Path appDataFilePath \u003d Paths.get(\"data\" , \"data.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        setAppDataFilePath(newUserPrefs.getAppDataFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Path getAppDataFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appDataFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setAppDataFilePath(Path appDataFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(appDataFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.appDataFilePath \u003d appDataFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 appDataFilePath.equals(o.appDataFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return Objects.hash(guiSettings, appDataFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + appDataFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Content.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Represents a lecture note\u0027s contents. They are only guaranteed immutable and non-blank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * in particular there can be duplicates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The contents can take any non-blank value\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Constructs a {@code Content} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param content Valid content."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Content(String content) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        checkArgument(isValidContent(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if a given string represents valid content."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof Content // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 content.equals(((Content) other).content)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return content.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Represents an NUStudy lecture note. Its title and content are guaranteed non-null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * its associated picture \u003ci\u003emay\u003c/i\u003e be null."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final Content content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final Image image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Constructs a new lecture note. Both fields must be present and non-null. The image field is set to null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param title The lecture note\u0027s title, which must be unique among all lecture notes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param content The lecture note\u0027s content (newlines are supported), which do not have to be unique."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Note(Title title, Content content) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireAllNonNull(title, content);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.image \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Constructs a new lecture note with an image. The image may be null, in which case NUStudy proceeds as with"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * the two-argument constructor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param image The image associated with this lecture note."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @see Note#Note(Title, Content)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Note(Title title, Content content, Image image) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireAllNonNull(title, content);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.image \u003d image;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Content getContent() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Image getImage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public String getImageUrl() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return image !\u003d null ? image.getUrl() : \"none\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if both lecture notes have the same title."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * This defines a weaker notion of equality."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean isSameNote(Note other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return other !\u003d null \u0026\u0026 other.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if both lecture notes have the same title, content and image."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * This defines a stronger notion of equality."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!(other instanceof Note)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note otherNote \u003d (Note) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return otherNote.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 otherNote.getContent().equals(getContent())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 otherNote.getImageUrl().equals(getImageUrl());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return Objects.hash(title, content, getImageUrl());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return getTitle() + \"\\n\" + getContent() + \"\\n[\" + getImageUrl() + \"]\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 58,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Represents a lecture note\u0027s title. Titles are guaranteed to be unique among lecture notes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * They are also immutable and guaranteed to be valid as declared in {@link #isValidTitle(String)}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Titles should begin with a non-whitespace character \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            + \"and not contain newlines or tabs, but are otherwise unrestricted\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"\\\\S[ \\\\S]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 title.equals(((Title) other).title)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/TitleContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Tests that a {@code Note}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cNote\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean test(Note note) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(note.getTitle().title, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 8,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/UniqueNoteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.exceptions.DuplicateTitleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.exceptions.NoteNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A list of lecture notes that enforces uniqueness between their titles, using {@code Note#isSameNote(Note)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * for adding/updating and {@code Note#equals(Object)} for deleting. Supports a minimal set of list operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * @see Note#isSameNote(Note)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class UniqueNoteList implements Iterable\u003cNote\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final ObservableList\u003cNote\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if the list contains a lecture note sharing title with the given argument."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean contains(Note toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameNote);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Adds a lecture note to the list. The title must be different from all existing ones."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void add(Note toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new DuplicateTitleException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Replaces the existing lecture note {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * The new title must be different from all existing ones."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote(Note target, Note edited) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!target.isSameNote(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new DuplicateTitleException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Removes the equivalent, existing lecture note from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void remove(Note toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Note get(Note note) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        for (Note toGet : internalList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            if (toGet.isSameNote(note)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                return toGet;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        throw new NoteNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNotes(UniqueNoteList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Replaces the contents of this list with {@code notes} containing no duplicates."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireAllNonNull(notes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!notesAreUnique(notes)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new DuplicateTitleException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        internalList.setAll(notes);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public ObservableList\u003cNote\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Iterator\u003cNote\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                || (other instanceof UniqueNoteList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueNoteList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns true if {@code note} contains only unique notes."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private boolean notesAreUnique(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            for (int j \u003d i + 1; j \u003c notes.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                if (notes.get(i).isSameNote(notes.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 127,
      "shuiyao-sg": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/DuplicateTitleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Signals that the operation will result in lecture notes with duplicate titles."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class DuplicateTitleException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public DuplicateTitleException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        super(\"Operation would result in lecture notes with duplicate titles\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/NoteNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Signals that the operation is unable to find the specified lecture note."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class NoteNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/Answer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Represents a question\u0027s answer. Answers are guaranteed to be unique among questions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * They are also immutable and guaranteed to be valid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The answers can take any non-blank value.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public final String answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Constructs a {@code Answer} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param answer Valid answer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns true if a given string represents valid answer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                || (other instanceof Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u0026\u0026 answer.equals(((Answer) other).answer)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return answer.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 47,
      "ShirleyWangxt": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/BodyContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Tests that a {@code Question}\u0027s {@code QuestionBody} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class BodyContainsKeywordsPredicate implements Predicate\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public BodyContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean test(Question question) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(question.getQuestionBody().body, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof BodyContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 keywords.equals(((BodyContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 8,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/Difficulty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Represents a question\u0027s difficulty. Difficulties are only guaranteed immutable and non-blank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * in particular there can be duplicates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class Difficulty {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Difficulty should begin with a non-white space character \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + \"and only covers the existed difficulty in the database\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public final String difficulty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Constructs a {@code Difficulty}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param difficulty Valid difficulty"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Difficulty(String difficulty) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        checkArgument(isValidDifficulty(difficulty), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns true if a given string is a valid difficulty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static boolean isValidDifficulty(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                || (other instanceof Difficulty)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u0026\u0026 difficulty.equals(((Difficulty) other).difficulty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return difficulty.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 48,
      "ShirleyWangxt": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/DifficultyContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Tests that a {@code Question}\u0027s {@code Difficulty} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class DifficultyContainsKeywordsPredicate implements Predicate\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public DifficultyContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean test(Question question) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(question.getDifficulty().difficulty, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof DifficultyContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 keywords.equals(((DifficultyContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Represents a question. Its contents, answers, difficulty and subjects are guaranteed non-null."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final QuestionBody questionBody;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Subject subject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final Difficulty difficulty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Constructs a new question. All fields must be present and non-null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @param questionBody    The questions\u0027s content, which must be unique."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param answer     The question\u0027s answer, which do not have to be unique."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param subject    The question\u0027s subject, which do not have to be unique."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @param difficulty The question\u0027s difficulty, which do not have to be unique."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Question(QuestionBody questionBody, Answer answer, Subject subject, Difficulty difficulty) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireAllNonNull(questionBody, answer, subject, difficulty);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.questionBody \u003d questionBody;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBody getQuestionBody() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return questionBody;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Subject getSubject() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns true if both questions have the same content."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean isSameQuestion(Question other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other !\u003d null \u0026\u0026 other.getQuestionBody().equals(getQuestionBody());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if both questions have the same identity and data fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * This defines a stronger notion of equality between two questions."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!(other instanceof Question)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question otherQuestion \u003d (Question) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return otherQuestion.getQuestionBody().equals(getQuestionBody())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 otherQuestion.getAnswer().equals(getAnswer())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 otherQuestion.getSubject().equals(getSubject())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 otherQuestion.getDifficulty().equals(getDifficulty());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return Objects.hash(questionBody, answer, subject, difficulty);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return \"Question: \" + getQuestionBody() + \"\\n\" + \"Answer: \" + getAnswer() + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                + \"Subject: \" + getSubject() + \"\\n\" + \"Difficulty: \" + getDifficulty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 50,
      "ShirleyWangxt": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/QuestionBody.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Represents a question\u0027s content body. Bodies are guaranteed to be unique among questions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * They are also immutable and guaranteed to be valid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class QuestionBody {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The question bodies can take any non-blank value.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public final String body;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Constructs a {@code Content} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @param body Valid body."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBody(String body) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(body);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        checkArgument(isValidQuestionBody(body), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if a given string represents valid body."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static boolean isValidQuestionBody(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return body;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof QuestionBody // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 body.equals(((QuestionBody) other).body)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return body.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/Subject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Represents a question\u0027s subject. Subjects are only guaranteed immutable and non-blank;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * in particular there can be duplicates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class Subject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Subjects should begin with a non-white space character \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            + \"and only covers the existed subjects in the database\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public final String subject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Constructs a {@code Subject} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @param subject A valid subject."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Subject(String subject) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        checkArgument(isValidSubject(subject), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns true if a given string is a valid subject."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static boolean isValidSubject(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                || (other instanceof Subject // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u0026\u0026 subject.equals(((Subject) other).subject)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return subject.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 48,
      "ShirleyWangxt": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/SubjectContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Tests that a {@code Question}\u0027s {@code Subject} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class SubjectContainsKeywordsPredicate implements Predicate\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public SubjectContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean test(Question question) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(question.getSubject().subject, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof SubjectContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 keywords.equals(((SubjectContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/UniqueQuestionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.exceptions.DuplicateQuestionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.exceptions.QuestionNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * A list of questions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * A question is considered unique by comparing using {@code Question#isSameQuestion(Question)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * As such, adding and updating of questions uses Question#isSameQuestion(Question) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * the question being added or updated is unique in terms of identity in the UniqueQuestionList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * However, the removal of a question uses Question#equals(Object) so as to ensure that the question"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * todo: relevant modification methods will be implemented later."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * @see Question#isSameQuestion(Question)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class UniqueQuestionList implements Iterable\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if the list contains an equivalent question as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean contains(Question toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameQuestion);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Adds a question to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void add(Question toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Replaces the question {@code target} in the list with {@code editedQuestion}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * The question body of {@code editedQuestion} must not be the same as another existing question in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireAllNonNull(target, editedQuestion);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!target.isSameQuestion(editedQuestion) \u0026\u0026 contains(editedQuestion)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        internalList.set(index, editedQuestion);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Removes the equivalent question from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * The question must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void remove(Question toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new QuestionNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestions(UniqueQuestionList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Replaces the contents of this list with {@code questions}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * {@code questions} must not contain duplicate questions."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestions(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        requireAllNonNull(questions);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!questionsAreUnique(questions)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new DuplicateQuestionException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        internalList.setAll(questions);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Question get(int index) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Iterator\u003cQuestion\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                || (other instanceof UniqueQuestionList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueQuestionList) other).internalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns true if {@code questions} contains only unique questions."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private boolean questionsAreUnique(List\u003cQuestion\u003e questions) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        for (int i \u003d 0; i \u003c questions.size() - 1; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            for (int j \u003d i + 1; j \u003c questions.size(); j++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                if (questions.get(i).isSameQuestion(questions.get(j))) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "Auxinnn": 27,
      "ShirleyWangxt": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/exceptions/DuplicateQuestionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Signals that the operation will result in questions with duplicate bodies. (Questions are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * if they have the same body.)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class DuplicateQuestionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public DuplicateQuestionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        super(\"Operation would result in duplicate questions\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "ShirleyWangxt": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/exceptions/QuestionNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Signals that the operation is unable to find the specified question."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class QuestionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/FilterType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * This documents the types of filter to filter the quiz results by."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public enum FilterType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    SUBJECT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    DIFFICULTY,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    CORRECT,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    INCORRECT,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    DATE"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizQuestionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * A list of quiz questions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizQuestionList implements Iterable\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e modifiableList \u003d FXCollections.observableList(internalList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the question list in quiz as {@code quizQuestionList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        internalList.setAll(quizQuestionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Question get(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return modifiableList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Gets one question from the list and return a new list contains this question."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getOneQuizQuestionAsList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        ObservableList\u003cQuestion\u003e oneQuestionList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (modifiableList.size() \u003e 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            Question question \u003d modifiableList.get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            oneQuestionList.add(question);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return oneQuestionList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Gets one question from the list and return a question."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Question getOneQuizQuestion() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return modifiableList.get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Removes one question from the first element of list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void removeOneQuizQuestion() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        modifiableList.remove(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns an answer for the question in quiz with specific {@code index}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Answer showAnswer() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return getOneQuizQuestion().getAnswer();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Checks if the answer input by user is correct and return a boolean value to show the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean checkQuizAnswer(Answer answer) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        requireAllNonNull(answer);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return getOneQuizQuestion().getAnswer().equals(answer);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Clears the quiz question list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void clearQuizQuestionList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public ObservableList\u003cQuestion\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Iterator\u003cQuestion\u003e iterator() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                || (other instanceof QuizQuestionList // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u0026\u0026 internalList.equals(((QuizQuestionList) other).internalList));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.exceptions.WrongDateFormatException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Represents a quiz result. Its answer, questionBody, subject,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * difficulty, quizTime and result are guaranteed non-null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class QuizResult {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final QuestionBody questionBody;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Subject subject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Difficulty difficulty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final String quizTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final boolean result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResult(Answer answer, QuestionBody questionBody, Subject subject, Difficulty difficulty,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                      String quizTime, boolean result) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.questionBody \u003d questionBody;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.quizTime \u003d quizTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuestionBody getQuestionBody() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return questionBody;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Subject getSubject() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public String getQuizTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean getResult() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public String getResultToString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return result ? \"Correct\" : \"Incorrect\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns true if the quizResult is stored within the given time period and false otherwise."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param start The starting date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param end The ending date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @return A boolean."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean isWithinDate(Date start, Date end) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            date \u003d formatter.parse(quizTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        boolean isWithinDate \u003d !(date.before(start) || date.after(end));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return isWithinDate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (!(other instanceof QuizResult)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResult otherQuizResult \u003d (QuizResult) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return otherQuizResult.getQuizTime().equals(getQuizTime());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return Objects.hash(answer, questionBody, subject, difficulty, quizTime, result);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return questionBody + \"\\n   \" + answer + \"\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 18,
      "irene-lly": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizResultFilter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.model.quiz.FilterType.CORRECT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.model.quiz.FilterType.DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.model.quiz.FilterType.DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.model.quiz.FilterType.INCORRECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.model.quiz.FilterType.NONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.model.quiz.FilterType.SUBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * A filter to store the operations to filter {@code QuizResultList} by."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class QuizResultFilter {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private List\u003cSubject\u003e subjects;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Boolean isCorrectQns;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Stack\u003cFilterType\u003e operations \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter(List\u003cSubject\u003e subjects) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.subjects \u003d subjects;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (subjects.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            operations.push(NONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            operations.push(SUBJECT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter(Difficulty difficulty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        operations.push(DIFFICULTY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        operations.push(DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter(List\u003cSubject\u003e subjects, boolean isCorrectQns) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.subjects \u003d subjects;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.isCorrectQns \u003d isCorrectQns;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (isCorrectQns) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            operations.push(CORRECT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            operations.push(INCORRECT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (subjects.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            operations.push(NONE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            operations.push(SUBJECT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter(List\u003cSubject\u003e subjects, Difficulty difficulty) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.subjects \u003d subjects;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (!subjects.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            operations.push(SUBJECT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        operations.push(DIFFICULTY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public List\u003cSubject\u003e getSubjects() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return subjects;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean getIsCorrectQns() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return isCorrectQns;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Stack\u003cFilterType\u003e getOperations() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return operations;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Sets the operations in the {@code QuizResultFilter}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param s The subject to filter by."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param d The difficulty to filter by."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void setOperation(Subject s, Difficulty d) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.subjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.subjects.add(s);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.difficulty \u003d d;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (operations.empty() \u0026\u0026 startDate !\u003d null \u0026\u0026 endDate !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            operations.push(DATE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        operations.push(SUBJECT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        operations.push(DIFFICULTY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Sets the operations in the {@code QuizResultFilter}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param d The difficulty to filter by."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void setOperation(Difficulty d) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.difficulty \u003d d;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (operations.empty() \u0026\u0026 isCorrectQns !\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            if (isCorrectQns) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                operations.push(CORRECT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                operations.push(INCORRECT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (!subjects.isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            operations.push(SUBJECT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        operations.push(DIFFICULTY);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                || (other instanceof QuizResultFilter // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 Objects.equals(subjects, ((QuizResultFilter) other).subjects)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 Objects.equals(difficulty, ((QuizResultFilter) other).difficulty)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 Objects.equals(startDate, ((QuizResultFilter) other).startDate)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 Objects.equals(endDate, ((QuizResultFilter) other).endDate)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 Objects.equals(isCorrectQns, ((QuizResultFilter) other).isCorrectQns)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 Objects.equals(operations, ((QuizResultFilter) other).operations));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/QuizResultList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.exceptions.EmptyQuizResultListException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.exceptions.FilterTypeNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Represents a quiz result list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class QuizResultList implements Iterable\u003cQuizResult\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final ObservableList\u003cQuizResult\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final ObservableList\u003cQuizResult\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Sets the internal quiz result list in the {@code QuizResultList}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param replacement The quiz result list to set."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void setQuizResults(List\u003cQuizResult\u003e replacement) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        internalList.setAll(replacement);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Adds a quiz result to the result list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param quizResult The quiz result to add."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void add(QuizResult quizResult) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(quizResult);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        internalList.add(quizResult);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns true if the list contains a quiz result which equals the given argument."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param toCheck The the {@code quizResult} to check against."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean contains(QuizResult toCheck) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns a list of subjects that exists in the quiz result list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * The subjects will not be duplicated."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @return A unique list of subjects."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cSubject\u003e getUniqueSubjectList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cSubject\u003e subjectsList \u003d internalList.stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .map(quizResult -\u003e quizResult.getSubject())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Set\u003cSubject\u003e uniqueSubjectList \u003d new HashSet\u003cSubject\u003e(subjectsList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return FXCollections.observableArrayList(new ArrayList\u003c\u003e(uniqueSubjectList));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns a list of difficulties that exists in the quiz result list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * The difficulties will not be duplicated."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @return A unique list of difficulties."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cDifficulty\u003e getUniqueDifficultyList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cDifficulty\u003e difficultyList \u003d internalList.stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .map(quizResult -\u003e quizResult.getDifficulty())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Set\u003cDifficulty\u003e uniqueDifficultyList \u003d new HashSet\u003cDifficulty\u003e(difficultyList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return FXCollections.observableArrayList(new ArrayList\u003c\u003e(uniqueDifficultyList));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Returns a list with quiz results filtered by {@code quizResultFilter}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param quizResultFilter The filter to be applied to the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @return quizResults The filtered quiz results."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e filterQuizResult(QuizResultFilter quizResultFilter)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throws EmptyQuizResultListException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Stack\u003cFilterType\u003e filterType \u003d quizResultFilter.getOperations();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cQuizResult\u003e filteredQuizResults \u003d internalList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (internalList.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new EmptyQuizResultListException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        while (!filterType.empty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            switch(filterType.pop()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            case NONE:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            case SUBJECT:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                filteredQuizResults \u003d filteredQuizResults"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .filter(quizResult -\u003e quizResultFilter.getSubjects()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                                .stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                                .anyMatch(subject -\u003e subject.equals(quizResult.getSubject())))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            case DIFFICULTY:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                filteredQuizResults \u003d filteredQuizResults"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .filter(quizResult -\u003e quizResult.getDifficulty().equals(quizResultFilter.getDifficulty()))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            case CORRECT:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                filteredQuizResults \u003d filteredQuizResults"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .filter(quizResult -\u003e quizResult.getResult() \u0026\u0026 quizResultFilter.getIsCorrectQns())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            case INCORRECT:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                filteredQuizResults \u003d filteredQuizResults"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .filter(quizResult -\u003e !quizResult.getResult() \u0026\u0026 !quizResultFilter.getIsCorrectQns())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            case DATE:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                filteredQuizResults \u003d filteredQuizResults"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .filter(quizResult -\u003e quizResult.isWithinDate(quizResultFilter.getStartDate(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                                quizResultFilter.getEndDate()))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                throw new FilterTypeNotFoundException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        ObservableList\u003cQuizResult\u003e quizResults \u003d FXCollections.observableArrayList(filteredQuizResults);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Gets all quiz results for a specified question."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param qns The question to get quiz results of."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @return quizResults The quiz results for the question."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e getQnsReport(Question qns) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cQuizResult\u003e qnsReport \u003d internalList;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        qnsReport \u003d internalList"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .filter(quizResult -\u003e quizResult.getQuestionBody().equals(qns.getQuestionBody())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    \u0026\u0026 quizResult.getDifficulty().equals(qns.getDifficulty())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    \u0026\u0026 quizResult.getSubject().equals(qns.getSubject()))"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        ObservableList\u003cQuizResult\u003e quizResults \u003d FXCollections.observableArrayList(qnsReport);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return quizResults;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Iterator\u003cQuizResult\u003e iterator() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                || (other instanceof QuizResultList // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 internalList.equals(((QuizResultList) other).internalList));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 2,
      "irene-lly": 173
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/exceptions/EmptyQuizQuestionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Signals that modifiable list for quiz questions is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class EmptyQuizQuestionException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public EmptyQuizQuestionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        super(\"All quiz questions have been answered!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/exceptions/EmptyQuizResultListException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Throws if there are no stored quiz results."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class EmptyQuizResultListException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/exceptions/FilterTypeNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Signals that the filter type is not correct."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class FilterTypeNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public FilterTypeNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        super(\"This filter type is not in the list of acceptable filter types.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/quiz/exceptions/WrongDateFormatException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.quiz.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Signals that the filter type is not correct."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class WrongDateFormatException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public WrongDateFormatException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        super(\"The format of the date is wrong.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/StackBarChartModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * Represents a stack bar chart series."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class StackBarChartModel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private List\u003cXYChart.Data\u003cString, Number\u003e\u003e data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Creates a series with the specified difficulty and data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param difficulty The difficulty to be added into the series."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param data The data to be added into the series."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public StackBarChartModel(Difficulty difficulty, List\u003cXYChart.Data\u003cString, Number\u003e\u003e data) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public List\u003cXYChart.Data\u003cString, Number\u003e\u003e getData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Heading.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents the heading (title) for a task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * They are also immutable and guaranteed to be valid as declared in {@link #isValidHeading(String)}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class Heading {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Headings should begin with a non-whitespace character \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"and not contain newlines or tabs, but are otherwise unrestricted\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"\\\\S[ \\\\S]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final String heading;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Constructs a {@code Heading}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param heading A valid heading."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Heading(String heading) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(heading);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        checkArgument(isValidHeading(heading), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.heading \u003d heading;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public String getHeading() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return heading;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns true if a given string is a valid heading."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static boolean isValidHeading(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return heading;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || (other instanceof Heading // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 this.heading.equals(((Heading) other).getHeading())); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return heading.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents a NUStudy revision task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINT \u003d \"Please follow Singapore local date format \u0027dd/MM/yyyy\u0027, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"with 1 \u003c\u003d dd \u003c\u003d 31, 1 \u003c\u003d MM \u003c\u003d 12, 0 \u003c yyyy \u003c 9999\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINT \u003d \"Please follow Singapore local time format \u0027HH/mm\u0027, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            + \"with 00 \u003c\u003d HH \u003c\u003d 23, 00 \u003c\u003d mm \u003c\u003d 59\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final DateTimeFormatter FORMAT_FILE_DATE_STRING \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final DateTimeFormatter FORMAT_FILE_TIME_STRING \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final DateTimeFormatter FORMAT_USER_INPUT_DATE \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final DateTimeFormatter FORMAT_USER_INPUT_TIME \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    protected Heading heading;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    Task(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireAllNonNull(date, time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Task(Heading heading, LocalDate date, LocalTime time, boolean isDone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireAllNonNull(heading, date, time, isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.heading \u003d heading;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static boolean isValidStatusIcon(String status) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return status.equals(\"[Y]\") || status.equals(\"[N]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Gets status icon."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @return \"Y\" if done. \"N\" if not done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return (isDone ? \"[\" + \"Y\" + \"]\" : \"[\" + \"N\" + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return getStatusIcon() + \" \" + heading.toString() + \" by: \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                + getDate().format(FORMAT_FILE_DATE_STRING) + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                + getTime().format(FORMAT_FILE_TIME_STRING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Heading getHeading() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return heading;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this.heading.equals(otherTask.getHeading())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 getDate().equals(otherTask.getDate())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 getTime().equals(otherTask.getTime())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 getStatusIcon().equals(otherTask.getStatusIcon());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @return The done task object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Task markAsDone() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Marks the task as not done."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @return The not done task object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Task markAsNotDone() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public int compareTo(Task task) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        int compareDate \u003d this.getDate().compareTo(task.getDate());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (compareDate !\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return compareDate;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        int compareTime \u003d this.getTime().compareTo(task.getTime());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (compareTime !\u003d 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return compareTime;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (this.getStatus() \u0026\u0026 !task.getStatus()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        } else if (!this.getStatus() \u0026\u0026 task.getStatus()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskForNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents a task for revision of notes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskForNote extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private static final String TYPE \u003d \"NOTE\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Constructs a new revision task for lecture notes. Date field must be non-null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param note The lecture notes to be revised."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param date The date by when the task should be done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param time The time in a day by which the task should be done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskForNote(Note note, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(date, time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super.heading \u003d new Heading(note.getTitle().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return super.getStatusIcon() + \" \" + TYPE + \" : \" + super.heading.toString() + \" by: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                + super.getDate().format(FORMAT_FILE_DATE_STRING) + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                + super.getTime().format(FORMAT_FILE_TIME_STRING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskForQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents a task for revision of questions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskForQuestion extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private static final String TYPE \u003d \"QUESTION\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Constructs a new revision task for questions. Date field must be non-null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param question The question to be revised."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param date The date by when the task should be done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param time The time in a day by which the task should be done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskForQuestion(Question question, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(date, time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super.heading \u003d new Heading(question.getQuestionBody().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return super.getStatusIcon() + \" \" + TYPE + \" : \" + super.heading.toString() + \" by: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                + super.getDate().format(FORMAT_FILE_DATE_STRING) + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                + super.getTime().format(FORMAT_FILE_TIME_STRING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents a task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns true if the list contains a task which equals with the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Adds a revision task to the task list. The task must be different from all existing ones."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Replaces the existing revision task {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * The new task must be different from all existing ones."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask(Task target, Task edited) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!target.equals(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Removes the equivalent, existing revision task from the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTasks(TaskList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Replaces the contents of this list with {@code tasks} containing no duplicates."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                || (other instanceof TaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 internalList.equals(((TaskList) other).internalList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Marks the selected task as done."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param taskDone The task to be marked as done."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void markTaskAsDone(Task taskDone) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        requireNonNull(taskDone);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        int index \u003d internalList.indexOf(taskDone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        setTask(taskDone, taskDone.markAsDone());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                if (tasks.get(i).equals(tasks.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Signals that the operation will result in duplicate tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/RedundantOperationException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents an exception thrown for redundant operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class RedundantOperationException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public RedundantOperationException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Signals that the operation is unable to find the specified revision task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.task.Heading;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Contains utility methods for populating {@code AppData} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static Note[] getSampleNotes() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Note[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Note(new Title(\"Magnus Carlsen\"), new Content(\"World Chess Champion as of 2012\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Note(new Title(\"Russell\u0027s paradox\"), new Content(\"arises in naive set theory\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Note(new Title(\"An AVL tree\"), new Content(\"Self-balancing binary search tree. Needs rotations \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    + \"when adding or deleting. Suitable for the lazy variant of Dijkstra\u0027s algorithm\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static Question[] getSampleQuestions() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Question[] {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Question(new QuestionBody(\"Which algorithm can be used to find an item in a sorted list?\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    new Answer(\"Binary search\"), new Subject(\"CS2040\"), new Difficulty(\"Easy\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Question(new QuestionBody(\"What programming paradigm is Java?\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    new Answer(\"Object-oriented\"), new Subject(\"CS2040\"), new Difficulty(\"Easy\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Question(new QuestionBody(\"What keyword is used to declare exception-handling code in Java?\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    new Answer(\"catch\"), new Subject(\"CS2030\"), new Difficulty(\"Easy\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Question(new QuestionBody(\"What is the diamond operator used for?\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    new Answer(\"Generics\"), new Subject(\"CS2030\"), new Difficulty(\"Medium\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Question(new QuestionBody(\"Timsort originated in what language?\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    new Answer(\"Python\"), new Subject(\"CS2040\"), new Difficulty(\"Medium\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Question(new QuestionBody(\"What are the prerequisites for CS2103/T?\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    new Answer(\"CS2030, CS2040\"), new Subject(\"CS2103\"), new Difficulty(\"Hard\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Task(new Heading(\"An AVL tree\"), LocalDate.of(2019, 12, 12),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    LocalTime.of(17, 0), false),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new Task(new Heading(\"Magnus Carlsen\"), LocalDate.of(2018, 11, 28),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    LocalTime.of(12, 30), true),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static QuizResult[] getQuizResult() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new QuizResult[] {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            new QuizResult(new Answer(\"Binary search\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    new QuestionBody(\"Which algorithm can be used to find an item in a sorted list?\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    new Subject(\"CS2040\"), new Difficulty(\"Easy\"), \"2019/10/24 21:46:31\", true),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            new QuizResult(new Answer(\"Object-oriented\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    new QuestionBody(\"What programming paradigm is Java?\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    new Subject(\"CS2040\"), new Difficulty(\"Easy\"), \"2019/10/30 21:46:31\", true),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            new QuizResult(new Answer(\"something\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    new QuestionBody(\"What keyword is used to declare exception-handling code in Java?\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    new Subject(\"CS2030\"), new Difficulty(\"Easy\"), \"2019/10/03 21:46:31\", false),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static ReadOnlyAppData getSampleAppData() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppData sampleAb \u003d new AppData();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        for (Note sampleNote: getSampleNotes()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            sampleAb.addNote(sampleNote);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        for (Question sampleQuestion: getSampleQuestions()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            sampleAb.addQuestion(sampleQuestion);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        for (Task sampleTask: getSampleTasks()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (QuizResult sampleQuizResult : getQuizResult()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            sampleAb.addQuizResult(sampleQuizResult);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 55,
      "irene-lly": 16,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AppDataStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Represents a storage for {@link AppData}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public interface AppDataStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    Path getAppDataFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns AppData data as a {@link ReadOnlyAppData}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    Optional\u003cReadOnlyAppData\u003e readAppData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @see #getAppDataFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    Optional\u003cReadOnlyAppData\u003e readAppData(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Saves the given {@link ReadOnlyAppData} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param appData cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void saveAppData(ReadOnlyAppData appData) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @see #saveAppData(ReadOnlyAppData)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void saveAppData(ReadOnlyAppData appData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Jackson-friendly version of {@link Note}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "class JsonAdaptedNote {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Lecture note\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final String imageUrl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Constructs a {@code JsonAdaptedNote} with the given lecture note details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public JsonAdaptedNote(@JsonProperty(\"title\") String title, @JsonProperty(\"content\") String content,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                           @JsonProperty(\"imageUrl\") String imageUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.imageUrl \u003d imageUrl;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Converts a given {@code Note} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public JsonAdaptedNote(Note source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        content \u003d source.getContent().content;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        imageUrl \u003d source.getImageUrl();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Converts this Jackson-friendly adapted lecture note object into the model\u0027s {@code Note} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted note."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Note toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (content \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!Content.isValidContent(content)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new IllegalValueException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        final Content modelContent \u003d new Content(content);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (imageUrl \u003d\u003d null || imageUrl.equals(\"none\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new Note(modelTitle, modelContent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new Note(modelTitle, modelContent, new Image(imageUrl));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 39,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Jackson-friendly version of {@link Question}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class JsonAdaptedQuestion {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Question\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final String questionBody;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final String difficulty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuestion} with the given question details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public JsonAdaptedQuestion(@JsonProperty(\"questionBody\") String questionBody,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                               @JsonProperty(\"answer\") String answer, @JsonProperty(\"subject\") String subject,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                               @JsonProperty(\"difficulty\") String difficulty) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.questionBody \u003d questionBody;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Converts a given {@code Question} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public JsonAdaptedQuestion(Question source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionBody \u003d source.getQuestionBody().body;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        answer \u003d source.getAnswer().answer;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        subject \u003d source.getSubject().subject;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        difficulty \u003d source.getDifficulty().difficulty;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Converts this Jackson-friendly adapted question object into the model\u0027s {@code Question} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted question."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Question toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (questionBody \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    QuestionBody.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!QuestionBody.isValidQuestionBody(questionBody)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(QuestionBody.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        final QuestionBody modelQuestionBody \u003d new QuestionBody(questionBody);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (subject \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!Subject.isValidSubject(subject)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(Subject.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        final Subject modelSubject \u003d new Subject(subject);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (difficulty \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    Difficulty.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!Difficulty.isValidDifficulty(difficulty)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            throw new IllegalValueException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        final Difficulty modelDifficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new Question(modelQuestionBody, modelAnswer, modelSubject, modelDifficulty);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedQuizResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Jackson-friendly version of {@link QuizResult}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "class JsonAdaptedQuizResult {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Quiz result\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final String questionBody;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final String difficulty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final String quizTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final String result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuizResult} with the given quiz results."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public JsonAdaptedQuizResult(@JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                                 @JsonProperty(\"questionBody\") String questionBody,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                                 @JsonProperty(\"subject\") String subject, @JsonProperty(\"difficulty\") String difficulty,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                                 @JsonProperty(\"quizTime\") String quizTime, @JsonProperty(\"result\") String result) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.questionBody \u003d questionBody;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.quizTime \u003d quizTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Converts a given {@code QuizResult} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public JsonAdaptedQuizResult(QuizResult source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        answer \u003d source.getAnswer().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionBody \u003d source.getQuestionBody().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        subject \u003d source.getSubject().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        difficulty \u003d source.getDifficulty().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizTime \u003d source.getQuizTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        result \u003d String.valueOf(source.getResult());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Converts this Jackson-friendly adapted quiz result object into the model\u0027s {@code QuizResult} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted quiz result."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResult toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (questionBody \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                    QuestionBody.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final QuestionBody modelQuestionBody \u003d new QuestionBody(questionBody);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (subject \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                    Subject.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final Subject modelSubject \u003d new Subject(subject);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (difficulty \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                    Difficulty.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final Difficulty modelDifficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (quizTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"quizTime\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final String modelQuizTime \u003d quizTime;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"result\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        final boolean modelResult \u003d Boolean.parseBoolean(result);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new QuizResult(modelAnswer, modelQuestionBody, modelSubject, modelDifficulty, modelQuizTime,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                modelResult);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.model.task.Task.FORMAT_FILE_DATE_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.model.task.Task.FORMAT_FILE_TIME_STRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Heading;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Revision task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final String heading;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given revision task details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"heading\") String heading, @JsonProperty(\"isDone\") String status,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                           @JsonProperty(\"date\") LocalDate date, @JsonProperty(\"time\") LocalTime time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.heading \u003d heading;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.date \u003d date.format(FORMAT_FILE_DATE_STRING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.time \u003d time.format(FORMAT_FILE_TIME_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        heading \u003d source.getHeading().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        status \u003d source.getStatusIcon();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted note."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (heading \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Heading.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        final Heading modelHeading \u003d new Heading(heading);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Status icon\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!Task.isValidStatusIcon(status)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(\"Status icon can either [Y] or [N] only\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        final boolean isDone \u003d status.equals(\"[Y]\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"date\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        final LocalDate modelDate \u003d LocalDate.parse(date, FORMAT_FILE_DATE_STRING);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"time\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        final LocalTime modelTime \u003d LocalTime.parse(time, FORMAT_FILE_TIME_STRING);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new Task(modelHeading, modelDate, modelTime, isDone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAppDataStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A class to access AppData data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class JsonAppDataStorage implements AppDataStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAppDataStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public JsonAppDataStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Path getAppDataFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Optional\u003cReadOnlyAppData\u003e readAppData() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return readAppData(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Similar to {@link #readAppData()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Optional\u003cReadOnlyAppData\u003e readAppData(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Optional\u003cJsonSerializableAppData\u003e jsonAppData \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                filePath, JsonSerializableAppData.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!jsonAppData.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return Optional.of(jsonAppData.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void saveAppData(ReadOnlyAppData appData) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        saveAppData(appData, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Similar to {@link #saveAppData(ReadOnlyAppData)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void saveAppData(ReadOnlyAppData appData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        requireNonNull(appData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAppData(appData), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAppData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * An Immutable AppData that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "@JsonRootName(value \u003d \"data\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "class JsonSerializableAppData {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TITLE \u003d \"Lecture note list contains duplicate titles.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate tasks.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"Question list contains duplicate questions.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESULT \u003d \"Quiz result contains duplicate results.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final List\u003cJsonAdaptedQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final List\u003cJsonAdaptedQuizResult\u003e quizResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Constructs a {@code JsonSerializableAppData} with the given lecture notes, tasks and questions."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public JsonSerializableAppData(@JsonProperty(\"notes\") List\u003cJsonAdaptedNote\u003e notes,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                                   @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                                   @JsonProperty(\"questions\") List\u003cJsonAdaptedQuestion\u003e questions,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                                   @JsonProperty(\"quizResults\") List\u003cJsonAdaptedQuizResult\u003e quizResults) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.questions.addAll(questions);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.quizResults.addAll(quizResults);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Converts a given {@code ReadOnlyAppData} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAppData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public JsonSerializableAppData(ReadOnlyAppData source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        notes.addAll(source.getNoteList().stream().map(JsonAdaptedNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questions.addAll(source.getQuestionList().stream().map(JsonAdaptedQuestion::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizResults.addAll(source.getQuizResultList().stream().map(JsonAdaptedQuizResult::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Converts this set of application data into the model\u0027s {@code AppData} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AppData toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppData appData \u003d new AppData();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        for (JsonAdaptedNote jsonAdaptedNote : notes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            Note note \u003d jsonAdaptedNote.toModelType();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            if (appData.hasNote(note)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TITLE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            appData.addNote(note);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            if (appData.hasTask(task)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            appData.addTask(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        for (JsonAdaptedQuestion jsonAdaptedQuestion : questions) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            Question question \u003d jsonAdaptedQuestion.toModelType();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            if (appData.hasQuestion(question)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            appData.addQuestion(question);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        for (JsonAdaptedQuizResult jsonAdaptedQuizResult : quizResults) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            QuizResult quizResult \u003d jsonAdaptedQuizResult.toModelType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            if (appData.hasQuizResult(quizResult)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RESULT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            appData.addQuizResult(quizResult);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appData;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 30,
      "shuiyao-sg": 12,
      "Auxinnn": 15,
      "ShirleyWangxt": 11,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public interface Storage extends AppDataStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    Path getAppDataFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    Optional\u003cReadOnlyAppData\u003e readAppData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    void saveAppData(ReadOnlyAppData appData) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Manages storage of AppData data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private AppDataStorage appDataStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public StorageManager(AppDataStorage appDataStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.appDataStorage \u003d appDataStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppData methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Path getAppDataFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appDataStorage.getAppDataFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Optional\u003cReadOnlyAppData\u003e readAppData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return readAppData(appDataStorage.getAppDataFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Optional\u003cReadOnlyAppData\u003e readAppData(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appDataStorage.readAppData(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void saveAppData(ReadOnlyAppData appData) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        saveAppData(appData, appDataStorage.getAppDataFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void saveAppData(ReadOnlyAppData appData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appDataStorage.saveAppData(appData, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 16,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-f11-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.Type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.ui.panels.NoteListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.ui.panels.QuestionListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.ui.panels.QuizQuestionListPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.ui.panels.TaskListPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.ui.statistics.StackBarChart;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.ui.statistics.StatsPieChart;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.ui.statistics.StatsQns;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private NoteListPanel noteListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private QuestionListPanel questionListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private QuizQuestionListPanel quizQuestionListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private StatsPieChart statsPieChart;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private StackBarChart stackBarChart;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private StatsQns statsQns;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private StackPane noteListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private StackPane statsPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private StackPane questionListPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private HBox mainPanel;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private VBox stats;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        stats.setVisible(false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        noteListPanel \u003d new NoteListPanel(logic.getFilteredNoteList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        noteListPanelPlaceholder.getChildren().add(noteListPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionListPanel \u003d new QuestionListPanel(logic.getFilteredQuestionList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionListPanelPlaceholder.getChildren().add(questionListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAppDataFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Shows a list of quiz questions, replace the panel of questions."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private void showQuiz() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizQuestionListPanel \u003d new QuizQuestionListPanel(logic.getOneQuizQuestionAsList());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionListPanelPlaceholder.getChildren().add(quizQuestionListPanel.getRoot());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Shows a list of questions when the quiz mode is not activated."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private void showQuestion() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionListPanel \u003d new QuestionListPanel(logic.getFilteredQuestionList());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionListPanelPlaceholder.getChildren().add(questionListPanel.getRoot());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Shows the various charts depending on the type of command."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @param type The type of command."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * @throws ParseException if the command is invalid."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private void showStats(Type type) throws ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        mainPanel.setVisible(false);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        stats.setVisible(true);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case STATS:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPieChart \u003d new StatsPieChart(logic.getStatsPieChartData(), logic.getTotalQuestionsDone());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPanelPlaceholder.getChildren().add(statsPieChart.getRoot());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPieChart.setMouseover();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case QUESTIONS:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsQns \u003d new StatsQns(logic.getQuizResultList(), logic.getQnsPieChartData());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPanelPlaceholder.getChildren().add(statsQns.getRoot());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsQns.setMouseover();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case OVERVIEW:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            stackBarChart \u003d new StackBarChart(logic.getStackBarChartData(), logic.getUniqueSubjectList());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPanelPlaceholder.getChildren().add(stackBarChart.getRoot());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        case REPORT:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsQns \u003d new StatsQns(logic.getQuizResultList(), logic.getStatsPieChartData());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsPanelPlaceholder.getChildren().add(statsQns.getRoot());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            statsQns.setMouseover();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            throw new ParseException(\"Invalid type: \" + type);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Hides the stats panel."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private void hideStatsPanel() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        mainPanel.setVisible(true);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        stats.setVisible(false);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public NoteListPanel getNoteListPanel() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return noteListPanel;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            if (commandResult.isQuiz()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                showQuiz();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                showQuestion();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            if (commandResult.isShowStats()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                showStats(commandResult.getType());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                hideStatsPanel();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 7,
      "shuiyao-sg": 11,
      "Auxinnn": 29,
      "irene-lly": 75,
      "ShirleyWangxt": 4,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/nustudy.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/NoteCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * An UI component that displays information of a {@code Note}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class NoteCard extends PanelComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String FXML \u003d \"NoteListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public final Note note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private ImageView image;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public NoteCard(Note note, int displayedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        title.setText(note.getTitle().title);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        content.setText(note.getContent().content);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        image.setImage(note.getImage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        if (!(other instanceof NoteCard)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        NoteCard card \u003d (NoteCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u0026\u0026 note.equals(card.note);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 17,
      "shuiyao-sg": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/NoteListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Panel containing the list of lecture notes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class NoteListPanel extends PanelComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String FXML \u003d \"NoteListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NoteListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private ListView\u003cNote\u003e noteListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public NoteListPanel(ObservableList\u003cNote\u003e noteList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        noteListView.setItems(noteList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        noteListView.setCellFactory(listView -\u003e new NoteListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Note} using a {@code NoteCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    class NoteListViewCell extends ListCell\u003cNote\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        protected void updateItem(Note note, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            super.updateItem(note, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            if (empty || note \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                setGraphic(new NoteCard(note, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 14,
      "shuiyao-sg": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/PanelComponent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Represents panels of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public abstract class PanelComponent\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Constructs a PanelComponent with the specified FXML file URL."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param fxmlFileUrl"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public PanelComponent(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(fxmlFileUrl);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Constructs a PanelComponent using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param fxmlFileName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public PanelComponent(String fxmlFileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(fxmlFileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Constructs a PanelComponent with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param fxmlFileUrl"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param root"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public PanelComponent(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Constructs a PanelComponent with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param fxmlFileName"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @param root"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * @see #PanelComponent(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public PanelComponent(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(fxmlFileName, root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/QuestionListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * An UI component that displays information of a {@code Question}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class QuestionListCard extends PanelComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private static final String FXML \u003d \"QuestionListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public final Question question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Label questionBody;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Label subject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionListCard(Question question, int displayedIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionBody.setText(question.getQuestionBody().body);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        answer.setText(\"A: \" + question.getAnswer().answer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        subject.setText(\"S: \" + question.getSubject().subject);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        difficulty.setText(\"D: \" + question.getDifficulty().difficulty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        if (!(other instanceof QuestionListCard)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        QuestionListCard card \u003d (QuestionListCard) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u0026\u0026 question.equals(card.question);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 2,
      "ShirleyWangxt": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/QuestionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Panel containing the list of questions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class QuestionListPanel extends PanelComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private static final String FXML \u003d \"QuestionListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(QuestionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private ListView\u003cQuestion\u003e questionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionListPanel(ObservableList\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionListView.setItems(questionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionListView.setCellFactory(listView -\u003e new QuestionListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Question} using a {@code QuestionCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    class QuestionListViewCell extends ListCell\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        protected void updateItem(Question question, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            super.updateItem(question, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            if (empty || question \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                setGraphic(new QuestionListCard(question, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 2,
      "ShirleyWangxt": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/QuizQuestionListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * An UI component that displays information of a {@code Question} in quiz."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class QuizQuestionListCard extends PanelComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static final String FXML \u003d \"QuizQuestionListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public final Question question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private Label subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private Label questionBody;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizQuestionListCard(Question question) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        subject.setText(question.getSubject().toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionBody.setText(question.getQuestionBody().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        if (!(other instanceof QuizQuestionListCard)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        QuizQuestionListCard card \u003d (QuizQuestionListCard) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return question.equals(card.question);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 2,
      "Auxinnn": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/QuizQuestionListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * Panel containing the list of quiz questions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class QuizQuestionListPanel extends PanelComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private static final String FXML \u003d \"QuizQuestionListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(QuizQuestionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private ListView\u003cQuestion\u003e quizQuestionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizQuestionListPanel(ObservableList\u003cQuestion\u003e quizQuestionList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizQuestionListView.setItems(quizQuestionList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizQuestionListView.setCellFactory(listView -\u003e new QuizQuestionListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Question} using a {@code QuizQuestionListCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    class QuizQuestionListViewCell extends ListCell\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        protected void updateItem(Question question, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            super.updateItem(question, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            if (empty || question \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                setGraphic(new QuizQuestionListCard(question).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 2,
      "Auxinnn": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/TaskListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.model.task.Task.FORMAT_FILE_DATE_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.model.task.Task.FORMAT_FILE_TIME_STRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskListCard extends PanelComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Label heading;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskListCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        heading.setText(task.getHeading().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        status.setText(task.getStatusIcon());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        date.setText(task.getDate().format(FORMAT_FILE_DATE_STRING));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        time.setText(task.getTime().format(FORMAT_FILE_TIME_STRING));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        if (!(other instanceof TaskListCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        TaskListCard card \u003d (TaskListCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/TaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * Panel containing the list of revision tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskListPanel extends PanelComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NoteListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskListCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                setGraphic(new TaskListCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/statistics/StackBarChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.StackedBarChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.statistics.StackBarChartModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * A UI component that displays a stack bar chart."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class StackBarChart extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private static final String FXML \u003d \"StackBarChart.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private StackedBarChart\u003cString, Number\u003e bc;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private CategoryAxis categoryAxis;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Label overview;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public StackBarChart(ObservableList\u003cStackBarChartModel\u003e data, ObservableList\u003cSubject\u003e uniqueSubjectList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        int totalQuestions \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        List\u003cString\u003e subjects \u003d uniqueSubjectList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .map(Subject::toString)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        categoryAxis.setCategories(FXCollections.observableArrayList(subjects));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        bc.setLegendSide(Side.LEFT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        ObservableList\u003cXYChart.Series\u003cString, Number\u003e\u003e stackedBarChart \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (StackBarChartModel m : data) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            StackedBarChart.Series\u003cString, Number\u003e series \u003d new StackedBarChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            series.setName(m.getDifficulty().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            for (XYChart.Data\u003cString, Number\u003e pair : m.getData()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                series.getData().add(pair);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                totalQuestions +\u003d pair.getYValue().intValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            stackedBarChart.add(series);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        bc.setData(stackedBarChart);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        overview.setText(\"Total number of questions done: \" + totalQuestions + \"\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                + \"Total number of subjects: \" + subjects.size() + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public StackedBarChart getChart() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return bc;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "irene-lly": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/statistics/StatsPieChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * A UI component that displays a pie chart."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class StatsPieChart extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private static final String FXML \u003d \"StatsPieChart.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private PieChart pc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Label overview;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public StatsPieChart(ObservableList\u003cPieChart.Data\u003e data, int totalQns) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        pc.setLegendSide(Side.LEFT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        pc.setData(data);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        overview.setText(\"The total number of questions answered so far: \" + totalQns + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                + \"Number of questions answered correctly: \" + (int) data.get(0).getPieValue() + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                + \"Number of questions answered incorrectly: \" + (int) data.get(1).getPieValue() + \"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Sets a mouseover event displaying the value of the pie chart slice."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void setMouseover() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        pc.getData().forEach(data -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            String value \u003d \"\" + (int) data.getPieValue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            Tooltip toolTip \u003d new Tooltip(value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            toolTip.setStyle(\"-fx-font-size: 20\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            toolTip.setShowDelay(Duration.seconds(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            Tooltip.install(data.getNode(), toolTip);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/statistics/StatsQns.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * A UI component that displays questions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class StatsQns extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private static final String FXML \u003d \"StatsQns.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StatsQns.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private ListView\u003cQuizResult\u003e quizResultListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private PieChart quizResultDifficultyChart;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public StatsQns(ObservableList\u003cQuizResult\u003e quizResultList, ObservableList\u003cPieChart.Data\u003e data) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResultListView.setItems(quizResultList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResultListView.setCellFactory(listView -\u003e new StatsQns.QuizResultListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResultDifficultyChart.setData(data);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResultDifficultyChart.setTitle(\"Break down of questions\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Sets a mouseover event displaying the value of the pie chart slice."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void setMouseover() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResultDifficultyChart.getData().forEach(data -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            String value \u003d \"\" + (int) data.getPieValue();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            Tooltip toolTip \u003d new Tooltip(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            toolTip.setStyle(\"-fx-font-size: 20\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            toolTip.setShowDelay(Duration.seconds(0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            Tooltip.install(data.getNode(), toolTip);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code QuizResult}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * using a {@code StatsQnsListCard}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    class QuizResultListViewCell extends ListCell\u003cQuizResult\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        protected void updateItem(QuizResult quizResult, boolean empty) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            super.updateItem(quizResult, empty);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            if (empty || quizResult \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                setGraphic(new StatsQnsListCard(quizResult, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "irene-lly": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/statistics/StatsQnsListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.ui.panels.PanelComponent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * An UI component that displays information of a {@code QuizResult}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class StatsQnsListCard extends PanelComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private static final String FXML \u003d \"StatsQnsListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public final QuizResult quizResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Label questionBody;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Label result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Label subject;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public StatsQnsListCard(QuizResult quizResult, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.quizResult \u003d quizResult;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        questionBody.setText(quizResult.getQuestionBody().body);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        answer.setText(\"Your answer: \" + quizResult.getAnswer().answer);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        result.setText(\"Result: \" + quizResult.getResultToString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        subject.setText(\"Subject: \" + quizResult.getSubject().subject);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        difficulty.setText(\"Difficulty: \" + quizResult.getDifficulty().difficulty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        date.setText(\"Attempted on: \" + quizResult.getQuizTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        if (!(other instanceof seedu.address.ui.panels.QuestionListCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        StatsQnsListCard card \u003d (StatsQnsListCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u0026\u0026 quizResult.equals(card.quizResult);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 64
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    -fx-font-size: 1em;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ".stats-pane-color {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    -fx-font-size: 1.2em;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ".axis-label {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 18,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "         title\u003d\"NUStudy\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        \u003cImage url\u003d\"@/images/nustudy.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" minWidth\u003d\"450\" prefWidth\u003d\"450\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    \u003cHBox fx:id\u003d\"mainPanel\" minWidth\u003d\"450\" prefWidth\u003d\"450\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                        \u003cVBox fx:id\u003d\"noteList\" styleClass\u003d\"pane-with-border\" prefWidth\u003d\"440\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                              VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"noteListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                        \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" prefWidth\u003d\"440\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                              VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                        \u003cVBox fx:id\u003d\"questionList\" styleClass\u003d\"pane-with-border\" prefWidth\u003d\"440\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                              VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"questionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    \u003cVBox fx:id\u003d\"stats\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"450\" prefWidth\u003d\"450\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"statsPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 10,
      "shuiyao-sg": 8,
      "Auxinnn": 1,
      "irene-lly": 9,
      "ShirleyWangxt": 6,
      "-": 55
    }
  },
  {
    "path": "src/main/resources/view/NoteListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u003cInsets top\u003d\"15\" right\u003d\"5\" bottom\u003d\"15\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            \u003cImageView fx:id\u003d\"image\" preserveRatio\u003d\"true\" fitWidth\u003d\"375\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/NoteListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "  \u003cListView fx:id\u003d\"noteListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/QuestionListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003cHBox id\u003d\"listCardPane\" fx:id\u003d\"listCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                \u003cLabel fx:id\u003d\"questionBody\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003c!--            \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" /\u003e--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cLabel fx:id\u003d\"subject\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$subject\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \u003cLabel fx:id\u003d\"difficulty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "ShirleyWangxt": 35
    }
  },
  {
    "path": "src/main/resources/view/QuestionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    \u003cListView fx:id\u003d\"questionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 8
    }
  },
  {
    "path": "src/main/resources/view/QuizQuestionListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003cHBox id\u003d\"quizQuestionListCardPane\" fx:id\u003d\"quizQuestionListCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                \u003cLabel fx:id\u003d\"subject\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            \u003cLabel fx:id\u003d\"questionBody\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$questionBody\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 33
    }
  },
  {
    "path": "src/main/resources/view/QuizQuestionListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    \u003cListView fx:id\u003d\"quizQuestionListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 8
    }
  },
  {
    "path": "src/main/resources/view/StackBarChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.chart.StackedBarChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" styleClass\u003d\"stats-pane-color\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    \u003ccontent\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        \u003cAnchorPane styleClass\u003d\"stats-pane-color\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cStackedBarChart fx:id\u003d\"bc\" styleClass\u003d\"chart-title\" title\u003d\"Questions attempted by Subject\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"40.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "              \u003cxAxis\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003cCategoryAxis fx:id\u003d\"categoryAxis\" label\u003d\"Subjects\" styleClass\u003d\"axis-label\" side\u003d\"BOTTOM\" tickLabelFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "              \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "              \u003cyAxis\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003cNumberAxis label\u003d\"Number of questions\" styleClass\u003d\"axis-label\" side\u003d\"LEFT\" tickLabelFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "              \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003c/StackedBarChart\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003cLabel fx:id\u003d\"overview\" styleClass\u003d\"label-bright\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                  \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "               \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    \u003c/content\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 29
    }
  },
  {
    "path": "src/main/resources/view/StatsPieChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" styleClass\u003d\"stats-pane-color\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    \u003ccontent\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        \u003cAnchorPane styleClass\u003d\"stats-pane-color\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003cPieChart fx:id\u003d\"pc\" styleClass\u003d\"chart-pie-label\" AnchorPane.rightAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003cLabel fx:id\u003d\"overview\" styleClass\u003d\"label-bright\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                  \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "               \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    \u003c/content\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 20
    }
  },
  {
    "path": "src/main/resources/view/StatsQns.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003cHBox minWidth\u003d\"450\" prefWidth\u003d\"450\" styleClass\u003d\"stats-pane-color\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "      \u003cListView fx:id\u003d\"quizResultListView\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "      \u003cPieChart fx:id\u003d\"quizResultDifficultyChart\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 12
    }
  },
  {
    "path": "src/main/resources/view/StatsQnsListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003cHBox id\u003d\"listCardPane\" fx:id\u003d\"listCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                \u003cLabel fx:id\u003d\"questionBody\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003c!--            \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" /\u003e--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cLabel fx:id\u003d\"result\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$result\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cLabel fx:id\u003d\"subject\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$subject\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cLabel fx:id\u003d\"difficulty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 39
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003cHBox id\u003d\"listCardPane\" fx:id\u003d\"listCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \u003cLabel fx:id\u003d\"heading\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c!--            \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" /\u003e--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 38
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        final Index fifthNoteIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(fifthNoteIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(fifthNoteIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(fifthNoteIndex.equals(fifthNoteIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(fifthNoteIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(fifthNoteIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(fifthNoteIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/nustudy.png\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.storage.JsonAppDataStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAppDataStorage appDataStorage \u003d new JsonAppDataStorage(temporaryFolder.resolve(\"appData.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        StorageManager storage \u003d new StorageManager(appDataStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String deleteCommand \u003d \"deletenote 9\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String listCommand \u003d ListNoteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(listCommand, ListNoteCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Setup LogicManager with JsonAppDataIoExceptionThrowingStub"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAppDataStorage appDataStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new JsonAppDataIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAppData.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        StorageManager storage \u003d new StorageManager(appDataStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String addCommand \u003d AddNoteCommand.COMMAND_WORD + TITLE_DESC_AMY + CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note expectedNote \u003d new NoteBuilder(AMY).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.addNote(expectedNote);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void getFilteredNoteList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredNoteList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static class JsonAppDataIoExceptionThrowingStub extends JsonAppDataStorage {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        private JsonAppDataIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void saveAppData(ReadOnlyAppData appData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 29,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddNoteCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddNoteCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AddNoteCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_newNote_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note validNote \u003d new NoteBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.addNote(validNote);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(new AddNoteCommand(validNote), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                String.format(AddNoteCommand.MESSAGE_SUCCESS, validNote), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_duplicateNote_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteInList \u003d model.getAppData().getNoteList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(new AddNoteCommand(noteInList), model, AddNoteCommand.MESSAGE_DUPLICATE_TITLE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 16,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AddNoteCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void constructor_nullNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddNoteCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_noteAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ModelStubAcceptingNoteAdded modelStub \u003d new ModelStubAcceptingNoteAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note validNote \u003d new NoteBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        CommandResult commandResult \u003d new AddNoteCommand(validNote).execute(modelStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(String.format(AddNoteCommand.MESSAGE_SUCCESS, validNote), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(Collections.singletonList(validNote), modelStub.notesAdded);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_duplicateNote_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note validNote \u003d new NoteBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d new AddNoteCommand(validNote);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithNote(validNote);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                AddNoteCommand.MESSAGE_DUPLICATE_TITLE, () -\u003e addNoteCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note alice \u003d new NoteBuilder().withTitle(\"Alice\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note bob \u003d new NoteBuilder().withTitle(\"Bob\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AddNoteCommand addAliceCommand \u003d new AddNoteCommand(alice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AddNoteCommand addBobCommand \u003d new AddNoteCommand(bob);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AddNoteCommand addAliceCommandCopy \u003d new AddNoteCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommandCopy);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertNotEquals(1, addAliceCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertNotNull(addAliceCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertNotEquals(addAliceCommand, addBobCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * A Model stub that contains a single note."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private class ModelStubWithNote extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        private final Note note;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ModelStubWithNote(Note note) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return this.note.isSameNote(note);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * A Model stub that always accept the note being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private class ModelStubAcceptingNoteAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        final ArrayList\u003cNote\u003e notesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return notesAdded.stream().anyMatch(note::isSameNote);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            requireNonNull(note);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            notesAdded.add(note);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public ReadOnlyAppData getAppData() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return new AppData();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 54,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.ClearNoteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class ClearNoteCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_emptyAppData_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(new ClearNoteCommand(), model, ClearNoteCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_nonEmptyAppData_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.clearNotes();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(new ClearNoteCommand(), model, ClearNoteCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 10,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", 0)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", 1)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", 2)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", 1).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", 2).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 5,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.EditQuestionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.BodyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.EditNoteDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.testutil.EditQuestionDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String VALID_TITLE_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String VALID_TITLE_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String VALID_CONTENT_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String VALID_CONTENT_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String TITLE_DESC_AMY \u003d \" \" + PREFIX_TITLE + VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String TITLE_DESC_BOB \u003d \" \" + PREFIX_TITLE + VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String CONTENT_DESC_AMY \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String CONTENT_DESC_BOB \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"f\\nsecond\"; // \\n not allowed for titles"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String INVALID_CONTENT_DESC \u003d \" \" + PREFIX_CONTENT; // empty not allowed for content"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final EditNoteCommand.EditNoteDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final EditNoteCommand.EditNoteDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    // question"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String VALID_QUESTION_BODY_ALGEBRA \u003d \"1 + 1 \u003d \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String VALID_QUESTION_BODY_CONCEPT \u003d \"(  ) is a measure of the degree of dependence between \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            + \"components, classes, methods, etc.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String VALID_ANSWER_ALGEBRA \u003d \"2\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String VALID_ANSWER_CONCEPT \u003d \"Coupling\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String VALID_SUBJECT_ALGEBRA \u003d \"Math\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String VALID_SUBJECT_CONCEPT \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String VALID_DIFFICULTY_ALGEBRA \u003d \"easy\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String VALID_DIFFICULTY_CONCEPT \u003d \"medium\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String QUESTION_BODY_DESC_ALGEBRA \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_BODY_ALGEBRA;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String QUESTION_BODY_DESC_CONCEPT \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_BODY_CONCEPT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String ANSWER_DESC_ALGEBRA \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_ALGEBRA;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String ANSWER_DESC_CONCEPT \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_CONCEPT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String INVALID_QUESTION_BODY_DESC \u003d \" \" + PREFIX_QUESTION;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final EditQuestionCommand.EditQuestionDescriptor DESC_ALGEBRA;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final EditQuestionCommand.EditQuestionDescriptor DESC_CONCEPT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    // quiz result"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String CORRECT_ANSWER_ALGEBRA \u003d \"2\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String INCORRECT_ANSWER_ALGEBRA \u003d \"3\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String CORRECT_ANSWER_CONCEPT \u003d \"Coupling\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String INCORRECT_ANSWER_CONCEPT \u003d \"Dependency\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String FINISH_TIME_CONCEPT \u003d \"2019/10/30 1530\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String FINISH_TIME_ALGEBRA \u003d \"2019/10/31 1300\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String CORRECT_RESULT \u003d \"true\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String INCORRECT_RESULT \u003d \"false\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DESC_AMY \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_AMY).withContent(VALID_CONTENT_AMY).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DESC_BOB \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_BOB).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        DESC_ALGEBRA \u003d new EditQuestionDescriptorBuilder()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withQuestionBody(VALID_QUESTION_BODY_ALGEBRA)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withAnswer(VALID_ANSWER_ALGEBRA)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withSubject(VALID_SUBJECT_ALGEBRA)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_ALGEBRA)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        DESC_CONCEPT \u003d new EditQuestionDescriptorBuilder()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withQuestionBody(VALID_QUESTION_BODY_CONCEPT)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withAnswer(VALID_ANSWER_CONCEPT)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withSubject(VALID_SUBJECT_CONCEPT)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_CONCEPT)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * - the application data, filtered note list and selected note in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppData expectedAppData \u003d new AppData(actualModel.getAppData());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredNoteList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        List\u003cQuestion\u003e expectedFilteredQuestionList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredQuestionList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedAppData, actualModel.getAppData());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredNoteList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(expectedFilteredQuestionList, actualModel.getFilteredQuestionList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the note at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * {@code model}\u0027s application data."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static void showNoteAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note note \u003d model.getFilteredNoteList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        final String[] splitName \u003d note.getTitle().title.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.updateFilteredNoteList(new TitleContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(1, model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the question at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * {@code model}\u0027s application data."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static void showQuestionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredQuestionList().size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question question \u003d model.getFilteredQuestionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        final String[] splitName \u003d question.getQuestionBody().body.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.updateFilteredQuestionList(new BodyContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(1, model.getFilteredQuestionList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 35,
      "Auxinnn": 11,
      "ShirleyWangxt": 56,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showNoteAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * {@code DeleteNoteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class DeleteNoteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteToDelete \u003d model.getFilteredNoteList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(deleteNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredNoteList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteToDelete \u003d model.getFilteredNoteList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS, noteToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.deleteNote(noteToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        showNoNote(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(deleteNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of app data list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAppData().getNoteList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteFirstCommand \u003d new DeleteNoteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteSecondCommand \u003d new DeleteNoteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand deleteFirstCommandCopy \u003d new DeleteNoteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private void showNoNote(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model.updateFilteredNoteList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(model.getFilteredNoteList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 39,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showNoteAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.ClearNoteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.EditNoteDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * and unit tests for EditNoteCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedNote \u003d new NoteBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder(editedNote).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(EditNoteCommand.MESSAGE_EDIT_NOTE_SUCCESS, editedNote);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AppData(model.getAppData()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.setNote(model.getFilteredNoteList().get(0), editedNote);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(editNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index indexLastNote \u003d Index.fromOneBased(model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note lastNote \u003d model.getFilteredNoteList().get(indexLastNote.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        NoteBuilder noteInList \u003d new NoteBuilder(lastNote);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedNote \u003d noteInList.withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(indexLastNote, descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(EditNoteCommand.MESSAGE_EDIT_NOTE_SUCCESS, editedNote);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AppData(model.getAppData()), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.setNote(lastNote, editedNote);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(editNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new EditNoteCommand.EditNoteDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedNote \u003d model.getFilteredNoteList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(EditNoteCommand.MESSAGE_EDIT_NOTE_SUCCESS, editedNote);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AppData(model.getAppData()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(editNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteInFilteredList \u003d model.getFilteredNoteList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedNote \u003d new NoteBuilder(noteInFilteredList).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(EditNoteCommand.MESSAGE_EDIT_NOTE_SUCCESS, editedNote);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AppData(model.getAppData()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.setNote(model.getFilteredNoteList().get(0), editedNote);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(editNoteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_duplicateNoteUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note firstNote \u003d model.getFilteredNoteList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder(firstNote).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, EditNoteCommand.MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_duplicateNoteFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // edit note in filtered list into a duplicate in notes"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note noteInList \u003d model.getAppData().getNoteList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new EditNoteDescriptorBuilder(noteInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, EditNoteCommand.MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_invalidNoteIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredNoteList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * but smaller than number of notes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_invalidNoteIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of lecture note list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAppData().getNoteList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand editNoteCommand \u003d new EditNoteCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandFailure(editNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        final EditNoteCommand standardCommand \u003d new EditNoteCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor copyDescriptor \u003d new EditNoteCommand.EditNoteDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand commandWithSameValues \u003d new EditNoteCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearNoteCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(standardCommand.equals(new EditNoteCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(standardCommand.equals(new EditNoteCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 81,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditNoteDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.EditNoteDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor descriptorWithSameValues \u003d new EditNoteDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor editedAmy \u003d new EditNoteDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different content -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        editedAmy \u003d new EditNoteDescriptorBuilder(DESC_AMY).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 12,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOTES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.FindNoteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindNoteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class FindNoteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand findFirstCommand \u003d new FindNoteCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand findSecondCommand \u003d new FindNoteCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand findFirstCommandCopy \u003d new FindNoteCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_zeroKeywords_noNoteFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NOTES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand command \u003d new FindNoteCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredNoteList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void execute_multipleKeywords_multipleNotesFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NOTES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand command \u003d new FindNoteCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredNoteList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Parses {@code userInput} into a {@code TitleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private TitleContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new TitleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 34,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showNoteAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListNoteCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class ListNoteCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(new ListNoteCommand(), model, ListNoteCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        showNoteAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertCommandSuccess(new ListNoteCommand(), model, ListNoteCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 11,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.statistics.StackBarChartModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Path getAppDataFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setAppDataFilePath(Path appDataFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setAppData(ReadOnlyAppData newData) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ReadOnlyAppData getAppData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void deleteNote(Note target) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void clearNotes() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void updateFilteredNoteList(Predicate\u003cNote\u003e predicate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Note getNote(Note note) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public boolean checkQuizAnswer(Answer answer) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void deleteQuestion(Question target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void clearQuestions() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion(Question target, Question editedQuestion) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuestionList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void updateFilteredQuestionList(Predicate\u003cQuestion\u003e predicate) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void clearQuizQuestionList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuizQuestions(int numOfQuestions, Subject subject, Difficulty difficulty) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void markTaskAsDone(Task taskDone) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuizQuestionList(ObservableList\u003cQuestion\u003e quizQuestionList) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getOneQuizQuestionAsList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Question getOneQuizQuestion() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void removeOneQuizQuestion() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void clearTaskList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getFilteredQuizQuestionList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void filterQuizResult(QuizResultFilter quizResultFilter) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void updateQuizResultFilter(QuizResultFilter quizResultFilter) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Answer showQuizAnswer() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void addQuizResult(QuizResult quizResult) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e getFilteredQuizResultList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public int getTotalQuestionsDone() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getStatsPieChartData() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cQuizResult\u003e getQuizResultList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void generateQnsReport(Question question) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cSubject\u003e getUniqueSubjectList() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public ObservableList\u003cStackBarChartModel\u003e getStackBarChartData() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getQnsPieChartData() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 10,
      "ShirleyWangxt": 275
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/questioncommands/AddQuestionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.ModelStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.testutil.QuestionBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "class AddQuestionCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void constructor_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddQuestionCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_questionAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        ModelStubAcceptingQuestionAdded modelStub \u003d new ModelStubAcceptingQuestionAdded();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question validQuestion \u003d new QuestionBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        CommandResult commandResult \u003d new AddQuestionCommand(validQuestion).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(String.format(AddQuestionCommand.MESSAGE_SUCCESS, validQuestion),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(Collections.singletonList(validQuestion), modelStub.questionsAdded);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_duplicateQuestion_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question validQuestion \u003d new QuestionBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        AddQuestionCommand addQuestionCommand \u003d new AddQuestionCommand(validQuestion);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        ModelStub modelStub \u003d new AddQuestionCommandTest.ModelStubWithQuestion(validQuestion);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                AddQuestionCommand.MESSAGE_DUPLICATE_QUESTION, () -\u003e addQuestionCommand.execute(modelStub));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question algebra \u003d new QuestionBuilder().withQuestionBody(\"Algebra\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question concept \u003d new QuestionBuilder().withQuestionBody(\"Concept\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        AddQuestionCommand addAlgebraCommand \u003d new AddQuestionCommand(algebra);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        AddQuestionCommand addConceptCommand \u003d new AddQuestionCommand(concept);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(addAlgebraCommand, addAlgebraCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        AddQuestionCommand addAlgebraCommandCopy \u003d new AddQuestionCommand(algebra);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(addAlgebraCommand, addAlgebraCommandCopy);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertNotEquals(1, addAlgebraCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertNotNull(addAlgebraCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertNotEquals(addAlgebraCommand, addConceptCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * A Model stub that contains a single question."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private class ModelStubWithQuestion extends ModelStub {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        private final Question question;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        ModelStubWithQuestion(Question question) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            requireNonNull(question);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            requireNonNull(question);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return this.question.isSameQuestion(question);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * A Model stub that always accept the question being added."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private class ModelStubAcceptingQuestionAdded extends ModelStub {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        final ArrayList\u003cQuestion\u003e questionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public boolean hasQuestion(Question question) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            requireNonNull(question);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return questionsAdded.stream().anyMatch(question::isSameQuestion);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            requireNonNull(question);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            questionsAdded.add(question);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public ReadOnlyAppData getAppData() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return new AppData();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/questioncommands/DeleteQuestionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showQuestionAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * {@code DeleteQuestionCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "class DeleteQuestionCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question questionToDelete \u003d model.getFilteredQuestionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        DeleteQuestionCommand deleteQuestionCommand \u003d new DeleteQuestionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteQuestionCommand.MESSAGE_DELETE_QUESTION_SUCCESS, questionToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedModel.deleteQuestion(questionToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandSuccess(deleteQuestionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredQuestionList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        DeleteQuestionCommand deleteQuestionCommand \u003d new DeleteQuestionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandFailure(deleteQuestionCommand, model, Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        showQuestionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question questionToDelete \u003d model.getFilteredQuestionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        DeleteQuestionCommand deleteQuestionCommand \u003d new DeleteQuestionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteQuestionCommand.MESSAGE_DELETE_QUESTION_SUCCESS, questionToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedModel.deleteQuestion(questionToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        showNoQuestion(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandSuccess(deleteQuestionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        showQuestionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of app data list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAppData().getQuestionList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        DeleteQuestionCommand deleteQuestionCommand \u003d new DeleteQuestionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandFailure(deleteQuestionCommand, model, Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        DeleteQuestionCommand deleteFirstCommand \u003d new DeleteQuestionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        DeleteQuestionCommand deleteSecondCommand \u003d new DeleteQuestionCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        DeleteQuestionCommand deleteFirstCommandCopy \u003d new DeleteQuestionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private void showNoQuestion(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model.updateFilteredQuestionList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(model.getFilteredQuestionList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/questioncommands/EditQuestionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ALGEBRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CONCEPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_BODY_CONCEPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showQuestionAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.EditQuestionCommand.EditQuestionDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.testutil.EditQuestionDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.testutil.QuestionBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for EditQuestionCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "class EditQuestionCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question editedQuestion \u003d new QuestionBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionDescriptor descriptor \u003d new EditQuestionDescriptorBuilder(editedQuestion).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand editQuestionCommand \u003d new EditQuestionCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String expectedMessage \u003d String.format(EditQuestionCommand.MESSAGE_EDIT_QUESTION_SUCCESS, editedQuestion);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AppData(model.getAppData()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedModel.setQuestion(model.getFilteredQuestionList().get(0), editedQuestion);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandSuccess(editQuestionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Index indexLastQuestion \u003d Index.fromOneBased(model.getFilteredQuestionList().size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question lastQuestion \u003d model.getFilteredQuestionList().get(indexLastQuestion.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        QuestionBuilder questionInList \u003d new QuestionBuilder(lastQuestion);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question editedQuestion \u003d questionInList.withQuestionBody(VALID_QUESTION_BODY_CONCEPT).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand.EditQuestionDescriptor descriptor \u003d new EditQuestionDescriptorBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withQuestionBody(VALID_QUESTION_BODY_CONCEPT).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand editQuestionCommand \u003d new EditQuestionCommand(indexLastQuestion, descriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String expectedMessage \u003d String.format(EditQuestionCommand.MESSAGE_EDIT_QUESTION_SUCCESS, editedQuestion);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AppData(model.getAppData()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedModel.setQuestion(lastQuestion, editedQuestion);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandSuccess(editQuestionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    // NO FIELD?"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand editQuestionCommand \u003d new EditQuestionCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                new EditQuestionCommand.EditQuestionDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question editedQuestion \u003d model.getFilteredQuestionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String expectedMessage \u003d String.format(EditQuestionCommand.MESSAGE_EDIT_QUESTION_SUCCESS, editedQuestion);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AppData(model.getAppData()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandSuccess(editQuestionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        showQuestionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question questionInFilteredList \u003d model.getFilteredQuestionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question editedQuestion \u003d new QuestionBuilder(questionInFilteredList)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withQuestionBody(VALID_QUESTION_BODY_CONCEPT).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand editQuestionCommand \u003d new EditQuestionCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                new EditQuestionDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                        .withQuestionBody(VALID_QUESTION_BODY_CONCEPT).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String expectedMessage \u003d String.format(EditQuestionCommand.MESSAGE_EDIT_QUESTION_SUCCESS, editedQuestion);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AppData(model.getAppData()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedModel.setQuestion(model.getFilteredQuestionList().get(0), editedQuestion);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandSuccess(editQuestionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_duplicateQuestionUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question firstQuestion \u003d model.getFilteredQuestionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionDescriptor descriptor \u003d new EditQuestionDescriptorBuilder(firstQuestion).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand editQuestionCommand \u003d new EditQuestionCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandFailure(editQuestionCommand, model, EditQuestionCommand.MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_duplicateQuestionFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        showQuestionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // edit question in filtered list into a duplicate in questions"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question questionInList \u003d model.getAppData().getQuestionList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand editQuestionCommand \u003d new EditQuestionCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                new EditQuestionDescriptorBuilder(questionInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandFailure(editQuestionCommand, model, EditQuestionCommand.MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_invalidQuestionIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredQuestionList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionDescriptor descriptor \u003d new EditQuestionDescriptorBuilder()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withQuestionBody(VALID_QUESTION_BODY_CONCEPT).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand editQuestionCommand \u003d new EditQuestionCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandFailure(editQuestionCommand, model, Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * but smaller than number of questions"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_invalidQuestionIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        showQuestionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of lecture question list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAppData().getQuestionList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand editQuestionCommand \u003d new EditQuestionCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                new EditQuestionDescriptorBuilder().withQuestionBody(VALID_QUESTION_BODY_CONCEPT).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandFailure(editQuestionCommand, model, Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        final EditQuestionCommand standardCommand \u003d new EditQuestionCommand(INDEX_FIRST, DESC_ALGEBRA);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionDescriptor copyDescriptor \u003d new EditQuestionCommand.EditQuestionDescriptor(DESC_ALGEBRA);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand commandWithSameValues \u003d new EditQuestionCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(standardCommand.equals(new ListQuestionCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(standardCommand.equals(new EditQuestionCommand(INDEX_SECOND, DESC_ALGEBRA)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(standardCommand.equals(new EditQuestionCommand(INDEX_FIRST, DESC_CONCEPT)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/questioncommands/EditQuestionDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ALGEBRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CONCEPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_CONCEPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_CONCEPT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_BODY_CONCEPT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_CONCEPT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.EditQuestionCommand.EditQuestionDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.testutil.EditQuestionDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class EditQuestionDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionDescriptor descriptorWithSameValues \u003d new EditQuestionDescriptor(DESC_ALGEBRA);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(DESC_ALGEBRA.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(DESC_ALGEBRA.equals(DESC_ALGEBRA));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(DESC_ALGEBRA.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(DESC_ALGEBRA.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(DESC_ALGEBRA.equals(DESC_CONCEPT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionDescriptor editedAmy \u003d new EditQuestionDescriptorBuilder(DESC_ALGEBRA)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withQuestionBody(VALID_QUESTION_BODY_CONCEPT).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(DESC_ALGEBRA.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        editedAmy \u003d new EditQuestionDescriptorBuilder(DESC_ALGEBRA).withAnswer(VALID_ANSWER_CONCEPT).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(DESC_ALGEBRA.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        editedAmy \u003d new EditQuestionDescriptorBuilder(DESC_ALGEBRA).withSubject(VALID_SUBJECT_CONCEPT).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(DESC_ALGEBRA.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        editedAmy \u003d new EditQuestionDescriptorBuilder(DESC_ALGEBRA).withDifficulty(VALID_DIFFICULTY_CONCEPT).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(DESC_ALGEBRA.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/questioncommands/FindQuestionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_QUESTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.MVC_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.TCP_QUESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.UDP_QUESTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.BodyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindQuestionCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class FindQuestionCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        BodyContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                new BodyContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        BodyContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                new BodyContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        FindQuestionCommand findFirstCommand \u003d new FindQuestionCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        FindQuestionCommand findSecondCommand \u003d new FindQuestionCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        FindQuestionCommand findFirstCommandCopy \u003d new FindQuestionCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_zeroKeywords_noQuestionFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_QUESTIONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        BodyContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        FindQuestionCommand command \u003d new FindQuestionCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedModel.updateFilteredQuestionList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredQuestionList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_multipleKeywords_multipleQuestionsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_QUESTIONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        BodyContainsKeywordsPredicate predicate \u003d preparePredicate(\"MVC TCP UDP\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        FindQuestionCommand command \u003d new FindQuestionCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedModel.updateFilteredQuestionList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(Arrays.asList(MVC_QUESTION, TCP_QUESTION, UDP_QUESTION), model.getFilteredQuestionList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Parses {@code userInput} into a {@code BodyContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private BodyContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new BodyContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/questioncommands/ListQuestionCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.logic.commands.questioncommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showQuestionAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListQuestionCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class ListQuestionCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandSuccess(new ListQuestionCommand(), model, ListQuestionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        showQuestionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertCommandSuccess(new ListQuestionCommand(), model, ListQuestionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/statistics/GetOverviewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.GetOverviewCommand.MESSAGE_INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.GetOverviewCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.testutil.QuizResultFilterBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "class GetOverviewCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void constructor_nullQuizResultFilter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GetOverviewCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void execute_validQuizResultFilter_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    .withStartDate(\"09/10/2019\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    .withEndDate(\"10/11/2019\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    .buildWithDates();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            fail(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetOverviewCommand overviewCommand \u003d new GetOverviewCommand(quizResultFilter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        expectedModel.updateQuizResultFilter(quizResultFilter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertCommandSuccess(overviewCommand, model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void execute_emptyQuizResultList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    .withStartDate(\"12/12/1920\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    .withEndDate(\"13/12/1920\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    .buildWithDates();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            fail(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetOverviewCommand overviewCommand \u003d new GetOverviewCommand(quizResultFilter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertCommandFailure(overviewCommand, model, MESSAGE_NO_STATISTICS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/statistics/GetQnsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.GetQnsCommand.MESSAGE_NO_QNS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.GetQnsCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.testutil.QuizResultFilterBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "class GetQnsCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void constructor_nullQuizResultFilter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GetOverviewCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void execute_validQuizResultFilter_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withIsCorrectQns(\"true\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjectsAndResult();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetQnsCommand qnsCommand \u003d new GetQnsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        expectedModel.filterQuizResult(quizResultFilter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        expectedModel.updateQuizResultFilter(quizResultFilter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertCommandSuccess(qnsCommand, model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void execute_emptyQuizResultList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(new ArrayList\u003c\u003e(Arrays.asList(\"random\")))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjects();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetQnsCommand qnsCommand \u003d new GetQnsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertCommandFailure(qnsCommand, model, MESSAGE_NO_QNS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/statistics/GetReportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetReportCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void constructor_nullQuizResultFilter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GetOverviewCommand(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void execute_validQnsIndex_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Index index \u003d Index.fromOneBased(model.getQuizResultList().size() - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetReportCommand getReportCommand \u003d new GetReportCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertCommandSuccess(getReportCommand, model, MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void execute_invalidQnsIndex_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredQuestionList().size() + 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetReportCommand getReportCommand \u003d new GetReportCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertCommandFailure(getReportCommand, model, Messages.MESSAGE_INVALID_QUESTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/statistics/GetStatisticsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.commands.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.GetStatisticsCommand.MESSAGE_NO_STATISTICS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.testutil.QuizResultFilterBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "class GetStatisticsCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void constructor_nullQuizResultFilter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GetOverviewCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void execute_validQuizResultFilter_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withDifficulty(\"easy\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjectsAndDifficulty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetStatisticsCommand statisticsCommand \u003d new GetStatisticsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAppData(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        expectedModel.filterQuizResult(quizResultFilter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertCommandSuccess(statisticsCommand, model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void execute_emptyQuizResultList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(new ArrayList\u003c\u003e(Arrays.asList(\"random\")))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjects();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetStatisticsCommand statisticsCommand \u003d new GetStatisticsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertCommandFailure(statisticsCommand, model, MESSAGE_NO_STATISTICS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddNoteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.note.AddNoteCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AddNoteCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private AddNoteCommandParser parser \u003d new AddNoteCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note expectedNote \u003d new NoteBuilder(BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_BOB + CONTENT_DESC_BOB,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // multiple titles, last accepted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_AMY + TITLE_DESC_BOB + CONTENT_DESC_BOB,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // multiple contents, last accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_BOB + CONTENT_DESC_AMY + CONTENT_DESC_BOB,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB + CONTENT_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // missing content prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + VALID_CONTENT_BOB, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_BOB + VALID_CONTENT_BOB, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + CONTENT_DESC_BOB, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // invalid content"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_BOB + INVALID_CONTENT_DESC, Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + INVALID_CONTENT_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_BOB + CONTENT_DESC_BOB,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 40,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AppDataParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.ClearNoteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.FindNoteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.AddQuestionCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.EditQuestionCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.FindQuestionCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.ListQuestionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.BodyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.EditNoteDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.testutil.EditQuestionDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.NoteUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.testutil.QuestionBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.testutil.QuestionUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AppDataParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final AppDataParser parser \u003d new AppDataParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note note \u003d new NoteBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AddNoteCommand command \u003d (AddNoteCommand) parser.parseCommand(NoteUtil.getAddCommand(note));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(new AddNoteCommand(note), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(parser.parseCommand(ClearNoteCommand.COMMAND_WORD) instanceof ClearNoteCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(parser.parseCommand(ClearNoteCommand.COMMAND_WORD + \" 3\") instanceof ClearNoteCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        DeleteNoteCommand command \u003d (DeleteNoteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                DeleteNoteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(new DeleteNoteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note note \u003d new NoteBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder(note).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand command \u003d (EditNoteCommand) parser.parseCommand(EditNoteCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + NoteUtil.getEditNoteDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(new EditNoteCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand command \u003d (FindNoteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                FindNoteCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(new FindNoteCommand(new TitleContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(parser.parseCommand(ListNoteCommand.COMMAND_WORD) instanceof ListNoteCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(parser.parseCommand(ListNoteCommand.COMMAND_WORD + \" 3\") instanceof ListNoteCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void parseCommand_addq() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question note \u003d new QuestionBuilder().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        AddQuestionCommand command \u003d (AddQuestionCommand) parser.parseCommand(QuestionUtil.getAddCommand(note));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(new AddQuestionCommand(note), command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void parseCommand_deleteq() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        DeleteQuestionCommand command \u003d (DeleteQuestionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                DeleteQuestionCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(new DeleteQuestionCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void parseCommand_editq() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question note \u003d new QuestionBuilder().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand.EditQuestionDescriptor descriptor \u003d new EditQuestionDescriptorBuilder(note).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        EditQuestionCommand command \u003d (EditQuestionCommand) parser.parseCommand(EditQuestionCommand"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                + QuestionUtil.getEditQuestionDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(new EditQuestionCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void parseCommand_findq() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        FindQuestionCommand command \u003d (FindQuestionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                FindQuestionCommand.COMMAND_WORD + \" \" + keywords.stream()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                        .collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(new FindQuestionCommand(new BodyContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void parseCommand_listq() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(parser.parseCommand(ListQuestionCommand.COMMAND_WORD) instanceof ListQuestionCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(parser.parseCommand(ListQuestionCommand.COMMAND_WORD + \" 3\") instanceof ListQuestionCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 32,
      "ShirleyWangxt": 49,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteNoteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.note.DeleteNoteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * outside of the DeleteNoteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * same path through the DeleteNoteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class DeleteNoteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private DeleteNoteCommandParser parser \u003d new DeleteNoteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteNoteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 9,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditNoteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.note.EditNoteCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.EditNoteDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditNoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private EditNoteCommandParser parser \u003d new EditNoteCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"1\", EditNoteCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"1 j/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CONTENT_DESC, Content.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC + VALID_CONTENT_AMY, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CONTENT_DESC_AMY + TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withContent(VALID_CONTENT_AMY).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withContent(VALID_CONTENT_AMY).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_AMY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CONTENT_DESC_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor \u003d new EditNoteDescriptorBuilder().withContent(VALID_CONTENT_AMY).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CONTENT_DESC_AMY + CONTENT_DESC_AMY + CONTENT_DESC_BOB;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_CONTENT_DESC + CONTENT_DESC_BOB;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand.EditNoteDescriptor descriptor \u003d new EditNoteDescriptorBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        EditNoteCommand expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_TITLE_DESC + CONTENT_DESC_BOB + TITLE_DESC_BOB;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor \u003d new EditNoteDescriptorBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                .withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedCommand \u003d new EditNoteCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 61,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindNoteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.FindNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.parser.note.FindNoteCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class FindNoteCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private FindNoteCommandParser parser \u003d new FindNoteCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                FindNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        FindNoteCommand expectedFindNoteCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new FindNoteCommand(new TitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindNoteCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindNoteCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 11,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"a\\nb\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String INVALID_CONTENT \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String VALID_CONTENT \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(nameWithWhitespace));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseContent_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseContent((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseContent_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseContent(INVALID_CONTENT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseContent_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Content expectedContent \u003d new Content(VALID_CONTENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedContent, ParserUtil.parseContent(VALID_CONTENT));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void parseContent_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_CONTENT + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Content expectedContent \u003d new Content(VALID_CONTENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedContent, ParserUtil.parseContent(addressWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 32,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/statistics/GetOverviewCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.GetOverviewCommand.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.commands.statistics.GetOverviewCommand.MESSAGE_INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetOverviewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.testutil.QuizResultFilterBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetOverviewCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private GetOverviewCommandParser parser \u003d new GetOverviewCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_invalidCommandFormat_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseFailure(parser, \" dt/worfm\", MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseFailure(parser, \" dt/worfm dt/wpck, dt/w[rd\", MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_invalidDate_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseFailure(parser, \" dt/worfm dt/\", MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseFailure(parser, \" dt/worfm dt/09/10/2019\", MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseFailure(parser, \" dt/09-10-2019 dt/09-02-2019\", MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_quizResultFilterWithDate_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    .withStartDate(\"09/10/2019\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    .withEndDate(\"10/10/2019\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                    .buildWithDates();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            GetOverviewCommand expectedCommand \u003d new GetOverviewCommand(quizResultFilter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            assertParseSuccess(parser, \" dt/09/10/2019 dt/10/10/2019\", expectedCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            fail(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_quizResultFilterWithoutDate_succcess() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetOverviewCommand expectedCommand \u003d new GetOverviewCommand(quizResultFilter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseSuccess(parser, \"\", expectedCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/statistics/GetQnsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetQnsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.testutil.QuizResultFilterBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetQnsCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private GetQnsCommandParser parser \u003d new GetQnsCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_invalidCommandFormat_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                GetQnsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseFailure(parser, \" -c -i\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                GetQnsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_quizResultFilterWithoutSubject_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // get correct qns"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withIsCorrectQns(\"true\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjectsAndResult();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetQnsCommand expectedCommand \u003d new GetQnsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseSuccess(parser, \" -c\", expectedCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // get incorrect qns"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withIsCorrectQns(\"false\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjectsAndResult();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        expectedCommand \u003d new GetQnsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseSuccess(parser, \" -i\", expectedCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_quizResultFilterWithSubject_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // one subject"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withIsCorrectQns(\"true\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(new ArrayList\u003c\u003e(Arrays.asList(\"CS2103T\")))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjectsAndResult();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetQnsCommand expectedCommand \u003d new GetQnsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseSuccess(parser, \" -c s/CS2103T\", expectedCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // multiple subjects"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withIsCorrectQns(\"true\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(new ArrayList\u003c\u003e(Arrays.asList(\"CS2103T\", \"CS2101\")))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjectsAndResult();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        expectedCommand \u003d new GetQnsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseSuccess(parser, \" -c s/CS2103T s/CS2101\", expectedCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/statistics/GetReportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetReportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetReportCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private GetReportCommandParser parser \u003d new GetReportCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_invalidCommandFormat_failure() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                GetReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseFailure(parser, \" a\", String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                GetReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_validIndex_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetReportCommand expectedCommand \u003d new GetReportCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseSuccess(parser, \" 1\", expectedCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /* Will edit later"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e new GetReportCommandParser().parse(\"-2\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/statistics/GetStatisticsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.logic.parser.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.logic.commands.statistics.GetStatisticsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.testutil.QuizResultFilterBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class GetStatisticsCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private GetStatisticsCommandParser parser \u003d new GetStatisticsCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_invalidCommandFormat_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // multiple difficulty"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseFailure(parser, \" d/d1 d/d2\", MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_quizResultFilterWithoutFilter_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder().buildEmptySubjectList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetStatisticsCommand expectedCommand \u003d new GetStatisticsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseSuccess(parser, \"\", expectedCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_quizResultFilterWithSubject_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // one subject"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(Arrays.asList(\"CS2103T\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjects();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetStatisticsCommand expectedCommand \u003d new GetStatisticsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseSuccess(parser, \" s/CS2103T\", expectedCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        // multiple subjects"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(Arrays.asList(\"CS2103T\", \"CS2101\", \"CS2103\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjects();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        expectedCommand \u003d new GetStatisticsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseSuccess(parser, \" s/CS2103T s/CS2101 s/CS2103\", expectedCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_quizResultFilterWithDifficulty_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withDifficulty(\"easy\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjectsAndDifficulty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetStatisticsCommand expectedCommand \u003d new GetStatisticsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseSuccess(parser, \" d/easy\", expectedCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public void parse_quizResultFilterWithDifficultyAndSubject_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        QuizResultFilter quizResultFilter \u003d new QuizResultFilterBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withDifficulty(\"easy\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .withSubjects(new ArrayList\u003c\u003e(Arrays.asList(\"CS2103T\", \"CS2101\")))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                .buildWithSubjectsAndDifficulty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        GetStatisticsCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "                new GetStatisticsCommand(quizResultFilter);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        assertParseSuccess(parser, \" d/easy s/CS2103T s/CS2101\", expectedCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AppDataTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.MVC_QUESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.MVC_RESULT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.exceptions.DuplicateTitleException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.TaskForNote;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AppDataTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final AppData appData \u003d new AppData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(Collections.emptyList(), appData.getNoteList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e appData.resetData(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void resetData_withValidReadOnlyAppData_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppData newData \u003d getTypicalAppData();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(newData, appData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void resetData_withDuplicateNotes_throwsDuplicateNoteException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Two notes with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new NoteBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e newNotes \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"06/07/2019\", Task.FORMAT_USER_INPUT_DATE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"1500\", Task.FORMAT_USER_INPUT_TIME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Task task \u003d new TaskForNote(editedAlice, date, time);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        List\u003cQuestion\u003e newQuestions \u003d Arrays.asList(MVC_QUESTION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        List\u003cQuizResult\u003e newQuizResults \u003d Arrays.asList(MVC_RESULT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppDataStub newData \u003d new AppDataStub(newNotes, newTasks, newQuestions, newQuizResults);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(DuplicateTitleException.class, () -\u003e appData.resetData(newData));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void hasNote_nullNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e appData.hasNote(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void hasNote_noteNotInAppData_returnsFalse() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(appData.hasNote(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void hasNote_noteInAppData_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.addNote(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(appData.hasNote(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void hasNote_noteWithSameIdentityFieldsInAppData_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.addNote(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new NoteBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(appData.hasNote(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void getNoteList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e appData.getNoteList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * A stub ReadOnlyAppData whose notes list can violate interface constraints."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static class AppDataStub implements ReadOnlyAppData {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        private final ObservableList\u003cNote\u003e notes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        private final ObservableList\u003cQuestion\u003e questions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        private final ObservableList\u003cQuestion\u003e quizQuestions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        private final ObservableList\u003cQuizResult\u003e quizResults \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppDataStub(Collection\u003cNote\u003e notes, Collection\u003cTask\u003e tasks, Collection\u003cQuestion\u003e questions,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                    Collection\u003cQuizResult\u003e quizResults) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            this.notes.setAll(notes);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            this.questions.setAll(questions);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            this.quizResults.setAll(quizResults);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        public ObservableList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            return notes;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        public ObservableList\u003cQuestion\u003e getQuestionList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            return questions;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public ObservableList\u003cQuestion\u003e getQuizQuestionList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return quizQuestions;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        public ObservableList\u003cQuizResult\u003e getQuizResultList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            return quizResults;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "         * Returns an unmodifiable view of the task list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 40,
      "shuiyao-sg": 18,
      "Auxinnn": 17,
      "ShirleyWangxt": 11,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_QUESTIONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.ALGEBRA_QUESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONCEPT_QUESTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.BodyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.AppDataBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(new AppData(), new AppData(modelManager.getAppData()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        userPrefs.setAppDataFilePath(Paths.get(\"nustudy/appdata\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        userPrefs.setAppDataFilePath(Paths.get(\"new/nustudy/appdata\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setAppDataFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAppDataFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setAppDataFilePath_validPath_setsAppDataFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Path path \u003d Paths.get(\"nustudy/appdata\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        modelManager.setAppDataFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(path, modelManager.getAppDataFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void hasNote_nullNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasNote(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void hasNote_noteNotInAppData_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(modelManager.hasNote(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void hasNote_noteInAppData_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        modelManager.addNote(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(modelManager.hasNote(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void getFilteredNoteList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredNoteList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    // question"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void hasQuestion_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasQuestion(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void hasQuestion_noteNotInAppData_returnsFalse() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(modelManager.hasQuestion(ALGEBRA_QUESTION));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void hasQuestion_noteInAppData_returnsTrue() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        modelManager.addQuestion(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(modelManager.hasQuestion(ALGEBRA_QUESTION));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void getFilteredQuestionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredQuestionList().remove(0));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        AppData appData \u003d new AppDataBuilder().withNote(ALICE).withNote(BENSON)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withQuestion(ALGEBRA_QUESTION).withQuestion(CONCEPT_QUESTION).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppData differentAppData \u003d new AppData();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        modelManager \u003d new ModelManager(appData, userPrefs);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(appData, userPrefs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different appData -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAppData, userPrefs)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String[] keywords \u003d ALICE.getTitle().title.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        modelManager.updateFilteredNoteList(new TitleContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(appData, userPrefs)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different filteredQuestionList -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String[] questionkeywords \u003d ALGEBRA_QUESTION.getQuestionBody().body.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        modelManager.updateFilteredQuestionList(new BodyContainsKeywordsPredicate(Arrays.asList(questionkeywords)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(appData, userPrefs)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        modelManager.updateFilteredNoteList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        modelManager.updateFilteredQuestionList(PREDICATE_SHOW_ALL_QUESTIONS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        differentUserPrefs.setAppDataFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(appData, differentUserPrefs)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 34,
      "ShirleyWangxt": 31,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setAppDataFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAppDataFilePath(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 2,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/ContentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class ContentTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Content(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Content(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Content.isValidContent(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(Content.isValidContent(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(Content.isValidContent(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Content.isValidContent(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Content.isValidContent(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Content.isValidContent(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 10,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/NoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void isSameNote() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(ALICE.isSameNote(ALICE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(ALICE.isSameNote(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new NoteBuilder(ALICE).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(ALICE.isSameNote(editedAlice));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // only different content -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        editedAlice \u003d new NoteBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(ALICE.isSameNote(editedAlice));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note aliceCopy \u003d new NoteBuilder(ALICE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new NoteBuilder(ALICE).withTitle(VALID_TITLE_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        editedAlice \u003d new NoteBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 20,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/TitleContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class TitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d new TitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(predicate.test(new NoteBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(predicate.test(new NoteBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(predicate.test(new NoteBuilder().withTitle(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(predicate.test(new NoteBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(predicate.test(new NoteBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(predicate.test(new NoteBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(predicate.test(new NoteBuilder().withTitle(\"Alice\").withContent(\"Main Street\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/TitleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(Title.isValidTitle(\"a\\nb\")); // newlines"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Title.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(Title.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/note/UniqueNoteListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.exceptions.DuplicateTitleException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.exceptions.NoteNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class UniqueNoteListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private final UniqueNoteList uniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void contains_nullNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void contains_noteNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(uniqueNoteList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void contains_noteInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(uniqueNoteList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void contains_noteWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new NoteBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertTrue(uniqueNoteList.contains(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void add_nullNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void add_duplicateNote_throwsDuplicateNoteException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(DuplicateTitleException.class, () -\u003e uniqueNoteList.add(ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote_nullTargetNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.setNote(null, ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote_nullEditedNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.setNote(ALICE, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote_targetNoteNotInList_throwsNoteNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NoteNotFoundException.class, () -\u003e uniqueNoteList.setNote(ALICE, ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote_editedNoteIsSameNote_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.setNote(ALICE, ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedUniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote_editedNoteHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Note editedAlice \u003d new NoteBuilder(ALICE).withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.setNote(ALICE, editedAlice);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedUniqueNoteList.add(editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote_editedNoteHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.setNote(ALICE, BOB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedUniqueNoteList.add(BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNote_editedNoteHasNonUniqueIdentity_throwsDuplicateNoteException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(DuplicateTitleException.class, () -\u003e uniqueNoteList.setNote(ALICE, BOB));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void remove_nullNote_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void remove_noteDoesNotExist_throwsNoteNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NoteNotFoundException.class, () -\u003e uniqueNoteList.remove(ALICE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void remove_existingNote_removesNote() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.remove(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNotes_nullUniqueNoteList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.setNotes((UniqueNoteList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNotes_uniqueNoteList_replacesOwnListWithProvidedUniqueNoteList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedUniqueNoteList.add(BOB);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.setNotes(expectedUniqueNoteList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNotes_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueNoteList.setNotes((List\u003cNote\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNotes_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.add(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e noteList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        uniqueNoteList.setNotes(noteList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        UniqueNoteList expectedUniqueNoteList \u003d new UniqueNoteList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        expectedUniqueNoteList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(expectedUniqueNoteList, uniqueNoteList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void setNotes_listWithDuplicateNotes_throwsDuplicateNoteException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        List\u003cNote\u003e listWithDuplicateNotes \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(DuplicateTitleException.class, () -\u003e uniqueNoteList.setNotes(listWithDuplicateNotes));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            -\u003e uniqueNoteList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/question/AnswerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "class AnswerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"UML diagram\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"2\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"open for extension but closed for modification\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/question/BodyContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.testutil.QuestionBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class BodyContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        BodyContainsKeywordsPredicate firstPredicate \u003d new BodyContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        BodyContainsKeywordsPredicate secondPredicate \u003d new BodyContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        BodyContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                new BodyContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void test_bodyContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        BodyContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                new BodyContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(predicate.test(new QuestionBuilder().withQuestionBody(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        predicate \u003d new BodyContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(predicate.test(new QuestionBuilder().withQuestionBody(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        predicate \u003d new BodyContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(predicate.test(new QuestionBuilder().withQuestionBody(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        predicate \u003d new BodyContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(predicate.test(new QuestionBuilder().withQuestionBody(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void test_bodyDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        BodyContainsKeywordsPredicate predicate \u003d new BodyContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(predicate.test(new QuestionBuilder().withQuestionBody(\"Alice\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        predicate \u003d new BodyContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(predicate.test(new QuestionBuilder().withQuestionBody(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // Keywords match answer, subject and difficulty, but does not match question body"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        predicate \u003d new BodyContainsKeywordsPredicate(Arrays.asList(\"12345\", \"person\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(predicate.test(new QuestionBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withQuestionBody(\"Alice\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withAnswer(\"12345\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withSubject(\"person\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withDifficulty(\"Main Street\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/question/DifficultyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "class DifficultyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Difficulty(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void constructor_invalidDifficulty_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String invalidDifficulty \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Difficulty(invalidDifficulty));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void isValidDifficulty() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null difficulty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Difficulty.isValidDifficulty(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // invalid difficulty"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(Difficulty.isValidDifficulty(\"easy\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(Difficulty.isValidDifficulty(\"easy to medium\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(Difficulty.isValidDifficulty(\"specially hard, needs extra revision\")); // long difficulty"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/question/QuestionBodyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "class QuestionBodyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new QuestionBody(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void constructor_invalidQuestionBody_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String invalidQuestionBody \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new QuestionBody(invalidQuestionBody));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void isValidQuestionBody() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null difficulty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e QuestionBody.isValidQuestionBody(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // invalid difficulty"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(QuestionBody.isValidQuestionBody(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(QuestionBody.isValidQuestionBody(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(QuestionBody.isValidQuestionBody(\"Why?\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(QuestionBody.isValidQuestionBody(\"Is it real?\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(QuestionBody.isValidQuestionBody(\"A huge file is transferred over an existing TCP connection \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                + \"(i.e., 3-way handshake is already done). The connection is still open after transmission. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                + \"The first and last TCP segments have the sequence numbers 12,345 and 2,105 respectively. MSS is \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                + \"1,024 bytes and TCP sends as much data as possible in a segment.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                + \"How many TCP segments are used to transfer the file, assuming the communication channel \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                + \"is perfectly reliable?\")); // long question body"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/question/QuestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_CONCEPT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_CONCEPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_BODY_CONCEPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_CONCEPT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.ALGEBRA_QUESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONCEPT_QUESTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.testutil.QuestionBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "class QuestionTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void isSameQuestion() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(ALGEBRA_QUESTION.isSameQuestion(ALGEBRA_QUESTION));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(ALGEBRA_QUESTION.isSameQuestion(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different question body -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question editedAlgebra \u003d new QuestionBuilder(ALGEBRA_QUESTION)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withQuestionBody(VALID_QUESTION_BODY_CONCEPT)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withAnswer(VALID_ANSWER_CONCEPT)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(ALGEBRA_QUESTION.isSameQuestion(editedAlgebra));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same question body, different subject -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        editedAlgebra \u003d new QuestionBuilder(ALGEBRA_QUESTION)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withAnswer(VALID_ANSWER_CONCEPT)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withSubject(VALID_SUBJECT_CONCEPT)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(ALGEBRA_QUESTION.isSameQuestion(editedAlgebra));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same question body, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        editedAlgebra \u003d new QuestionBuilder(ALGEBRA_QUESTION)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withAnswer(VALID_ANSWER_CONCEPT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_CONCEPT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(ALGEBRA_QUESTION.isSameQuestion(editedAlgebra));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question algebraCopy \u003d new QuestionBuilder(ALGEBRA_QUESTION).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(ALGEBRA_QUESTION.equals(algebraCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(ALGEBRA_QUESTION.equals(ALGEBRA_QUESTION));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(ALGEBRA_QUESTION.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(ALGEBRA_QUESTION.equals(5));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(ALGEBRA_QUESTION.equals(CONCEPT_QUESTION));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different question body -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question editedAlgebra \u003d new QuestionBuilder(ALGEBRA_QUESTION)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withQuestionBody(VALID_QUESTION_BODY_CONCEPT)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(ALGEBRA_QUESTION.equals(editedAlgebra));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // different subject -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        editedAlgebra \u003d new QuestionBuilder(ALGEBRA_QUESTION)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withSubject(VALID_SUBJECT_CONCEPT)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(ALGEBRA_QUESTION.equals(editedAlgebra));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/question/SubjectTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "class SubjectTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Subject(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void constructor_invalidSubject_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        String invalidSubject \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Subject(invalidSubject));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    void isValidSubject() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // null difficulty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Subject.isValidSubject(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // invalid difficulty"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(Subject.isValidSubject(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(Subject.isValidSubject(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(Subject.isValidSubject(\"CS2103T\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(Subject.isValidSubject(\"Math\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(Subject.isValidSubject(\"Software Engineering\")); // long difficulty"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/question/UniqueQuestionListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_CONCEPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.ALGEBRA_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONCEPT_QUESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.exceptions.DuplicateQuestionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.exceptions.QuestionNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.testutil.QuestionBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "class UniqueQuestionListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private final UniqueQuestionList uniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void contains_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void contains_questionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertFalse(uniqueQuestionList.contains(ALGEBRA_QUESTION));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void contains_questionInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.add(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(uniqueQuestionList.contains(ALGEBRA_QUESTION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void contains_questionWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.add(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question editedAlgebra \u003d new QuestionBuilder(ALGEBRA_QUESTION)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withAnswer(VALID_ANSWER_CONCEPT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertTrue(uniqueQuestionList.contains(editedAlgebra));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void add_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void add_duplicateQuestion_throwsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.add(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e uniqueQuestionList.add(ALGEBRA_QUESTION));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion_nullTargetQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setQuestion(null, ALGEBRA_QUESTION));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion_nullEditedQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .setQuestion(ALGEBRA_QUESTION, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion_targetQuestionNotInList_throwsQuestionNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(QuestionNotFoundException.class, () -\u003e uniqueQuestionList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .setQuestion(ALGEBRA_QUESTION, ALGEBRA_QUESTION));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion_editedQuestionIsSameQuestion_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.add(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.setQuestion(ALGEBRA_QUESTION, ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedUniqueQuestionList.add(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion_editedQuestionHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.add(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        Question editedAlgebra \u003d new QuestionBuilder(ALGEBRA_QUESTION)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .withAnswer(VALID_ANSWER_CONCEPT)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.setQuestion(ALGEBRA_QUESTION, editedAlgebra);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedUniqueQuestionList.add(editedAlgebra);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion_editedQuestionHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.add(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.setQuestion(ALGEBRA_QUESTION, CONCEPT_QUESTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedUniqueQuestionList.add(CONCEPT_QUESTION);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestion_editedQuestionHasNonUniqueIdentity_throwsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.add(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.add(CONCEPT_QUESTION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e uniqueQuestionList"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .setQuestion(ALGEBRA_QUESTION, CONCEPT_QUESTION));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void remove_nullQuestion_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void remove_questionDoesNotExist_throwsQuestionNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(QuestionNotFoundException.class, () -\u003e uniqueQuestionList.remove(ALGEBRA_QUESTION));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void remove_existingQuestion_removesQuestion() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.add(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.remove(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestions_nullUniqueQuestionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setQuestions((UniqueQuestionList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestions_uniqueQuestionList_replacesOwnListWithProvidedUniqueQuestionList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.add(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedUniqueQuestionList.add(CONCEPT_QUESTION);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.setQuestions(expectedUniqueQuestionList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueQuestionList.setQuestions((List\u003cQuestion\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.add(ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        List\u003cQuestion\u003e questionList \u003d Collections.singletonList(CONCEPT_QUESTION);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        uniqueQuestionList.setQuestions(questionList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        UniqueQuestionList expectedUniqueQuestionList \u003d new UniqueQuestionList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        expectedUniqueQuestionList.add(CONCEPT_QUESTION);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertEquals(expectedUniqueQuestionList, uniqueQuestionList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void setQuestions_listWithDuplicateQuestions_throwsDuplicateQuestionException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        List\u003cQuestion\u003e listWithDuplicateQuestions \u003d Arrays.asList(ALGEBRA_QUESTION, ALGEBRA_QUESTION);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(DuplicateQuestionException.class, () -\u003e uniqueQuestionList"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .setQuestions(listWithDuplicateQuestions));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueQuestionList"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/model/quiz/QuizResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FINISH_TIME_ALGEBRA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CORRECT_CONCEPT_RESULT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.INCORRECT_CONCEPT_RESULT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.testutil.QuizResultBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "class QuizResultTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        assertTrue(CORRECT_CONCEPT_RESULT.equals(CORRECT_CONCEPT_RESULT));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        QuizResult resultCopy \u003d new QuizResultBuilder(CORRECT_CONCEPT_RESULT).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        assertTrue(CORRECT_CONCEPT_RESULT.equals(resultCopy));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        assertFalse(CORRECT_CONCEPT_RESULT.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        // different time -\u003e return false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        QuizResult editedConcept \u003d new QuizResultBuilder(INCORRECT_CONCEPT_RESULT)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                .withQuizTime(FINISH_TIME_ALGEBRA)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        assertFalse(INCORRECT_CONCEPT_RESULT.equals(editedConcept));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/HeadingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class HeadingTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void constructor_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Heading(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void constructor_invalidHeading_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        String invalidHeading \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Heading(invalidHeading));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Heading.isValidHeading(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertFalse(Heading.isValidHeading(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertFalse(Heading.isValidHeading(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertTrue(Heading.isValidHeading(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertTrue(Heading.isValidHeading(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertTrue(Heading.isValidHeading(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Heading firstHeading \u003d new Heading(\"Heading\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //same object -\u003e return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertEquals(firstHeading, firstHeading);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //same heading string but different object reference -\u003e return true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertEquals(firstHeading, new Heading(\"Heading\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //different object and different string -\u003e return true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertNotEquals(firstHeading, new Heading(\"heading\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONAN_TASK_DEFAULT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONAN_TASK_DONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONAN_TASK_FOR_NOTE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONAN_TASK_MODIFIED_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONAN_TASK_MODIFIED_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.contains(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertFalse(taskList.contains(CONAN_TASK_DEFAULT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.add(CONAN_TASK_DEFAULT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertTrue(taskList.contains(CONAN_TASK_DEFAULT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.add(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.add(CONAN_TASK_DEFAULT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e taskList.add(CONAN_TASK_DEFAULT));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTask(null, CONAN_TASK_DEFAULT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTask(CONAN_TASK_DONE, null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e taskList.setTask(CONAN_TASK_DEFAULT, CONAN_TASK_DEFAULT));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.add(CONAN_TASK_DEFAULT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.add(CONAN_TASK_DONE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e taskList.setTask(CONAN_TASK_DEFAULT, CONAN_TASK_DONE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask_editedTaskHasDifferentDate_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.add(CONAN_TASK_FOR_NOTE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.setTask(CONAN_TASK_FOR_NOTE, CONAN_TASK_MODIFIED_DATE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        expectedTaskList.add(CONAN_TASK_MODIFIED_DATE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertEquals(taskList, expectedTaskList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask_editedTaskHasDifferentTime_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.add(CONAN_TASK_FOR_NOTE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.setTask(CONAN_TASK_FOR_NOTE, CONAN_TASK_MODIFIED_TIME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        expectedTaskList.add(CONAN_TASK_MODIFIED_TIME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertEquals(taskList, expectedTaskList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void setTask_editedTaskHasDifferentStatus_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.add(CONAN_TASK_FOR_NOTE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.setTask(CONAN_TASK_FOR_NOTE, CONAN_TASK_FOR_NOTE.markAsDone());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        expectedTaskList.add(CONAN_TASK_FOR_NOTE); //isDone field of CONAN_TASK_FOR_NOTE has been changed to true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertEquals(taskList, expectedTaskList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        CONAN_TASK_FOR_NOTE.markAsNotDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.remove(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e taskList.remove(CONAN_TASK_DEFAULT));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.add(CONAN_TASK_DEFAULT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        taskList.remove(CONAN_TASK_DEFAULT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertEquals(taskList, expectedTaskList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.model.task.Task.isValidStatusIcon;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONAN_QUESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONAN_TASK_DEFAULT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONAN_TASK_DONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONAN_TASK_MODIFIED_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.CONAN_TASK_MODIFIED_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void getStatusIcon_default_returnsN() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertEquals(new TaskForNote(CONAN, TaskBuilder.DEFAULT_DATE, TaskBuilder.DEFAULT_TIME).getStatusIcon(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                \"[N]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertEquals(new TaskForQuestion(CONAN_QUESTION, TaskBuilder.DEFAULT_DATE, TaskBuilder.DEFAULT_TIME)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                .getStatusIcon(), \"[N]\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertEquals(new Task(new Heading(TaskBuilder.DEFAULT_HEADING), TaskBuilder.DEFAULT_DATE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                TaskBuilder.DEFAULT_TIME, false).getStatusIcon(), \"[N]\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //null date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskForNote(CONAN, null, TaskBuilder.DEFAULT_TIME));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskForQuestion(CONAN_QUESTION, null,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                TaskBuilder.DEFAULT_TIME));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Task(new Heading(TaskBuilder.DEFAULT_HEADING), null,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                TaskBuilder.DEFAULT_TIME, false));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //null time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskForNote(CONAN, TaskBuilder.DEFAULT_DATE, null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskForQuestion(CONAN_QUESTION, TaskBuilder.DEFAULT_DATE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Task(new Heading(TaskBuilder.DEFAULT_HEADING),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                TaskBuilder.DEFAULT_DATE, null, false));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //null note"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskForNote(null, TaskBuilder.DEFAULT_DATE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                TaskBuilder.DEFAULT_TIME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //null question"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskForQuestion(null, TaskBuilder.DEFAULT_DATE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                TaskBuilder.DEFAULT_TIME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //null heading"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Task(null, TaskBuilder.DEFAULT_DATE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                TaskBuilder.DEFAULT_TIME, false));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void isValidStatusIcon_invalidIcon_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertFalse(isValidStatusIcon(\"hello\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertFalse(isValidStatusIcon(\"1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertFalse(isValidStatusIcon(\"\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertTrue(isValidStatusIcon(\"[Y]\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertTrue(isValidStatusIcon(\"[N]\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        Task conanCopy \u003d new TaskBuilder(CONAN_TASK_DEFAULT).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertTrue(CONAN_TASK_DEFAULT.equals(conanCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertTrue(CONAN_TASK_DEFAULT.equals(CONAN_TASK_DEFAULT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertFalse(CONAN_TASK_DEFAULT.equals(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertFalse(CONAN_TASK_DEFAULT.equals(CONAN_TASK_MODIFIED_DATE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //different time -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertFalse(CONAN_TASK_DEFAULT.equals(CONAN_TASK_MODIFIED_TIME));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        //different status -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertFalse(CONAN_TASK_DEFAULT.equals(CONAN_TASK_DONE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedNoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.storage.JsonAdaptedNote.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class JsonAdaptedNoteTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String INVALID_TITLE \u003d \"a\\nb\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String INVALID_CONTENT \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String VALID_TITLE \u003d BENSON.getTitle().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final String VALID_CONTENT \u003d BENSON.getContent().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void toModelType_validNoteDetails_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAdaptedNote note \u003d new JsonAdaptedNote(BENSON);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(BENSON, note.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAdaptedNote note \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new JsonAdaptedNote(INVALID_TITLE, VALID_CONTENT, null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, note::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAdaptedNote note \u003d new JsonAdaptedNote(null, VALID_CONTENT, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, note::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void toModelType_invalidContent_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAdaptedNote note \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                new JsonAdaptedNote(VALID_TITLE, INVALID_CONTENT, null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d Content.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, note::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void toModelType_nullContent_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAdaptedNote note \u003d new JsonAdaptedNote(VALID_TITLE, null, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, note::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 30,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAppDataStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class JsonAppDataStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAppDataStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void readAppData_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAppData(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAppData\u003e readAppData(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new JsonAppDataStorage(Paths.get(filePath)).readAppData(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertFalse(readAppData(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAppData(\"notJsonFormatAppData.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void readAppData_invalidAppData_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAppData(\"invalidAppData.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void readAppData_invalidAndValidAppData_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAppData(\"invalidAndValidAppData.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void readAndSaveAppData_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAppData.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppData original \u003d getTypicalAppData();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAppDataStorage jsonAppDataStorage \u003d new JsonAppDataStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        jsonAppDataStorage.saveAppData(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ReadOnlyAppData readBack \u003d jsonAppDataStorage.readAppData(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(original, new AppData(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        original.addNote(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        original.removeNote(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        jsonAppDataStorage.saveAppData(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        readBack \u003d jsonAppDataStorage.readAppData(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(original, new AppData(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        original.addNote(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        jsonAppDataStorage.saveAppData(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        readBack \u003d jsonAppDataStorage.readAppData().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(original, new AppData(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void saveAppData_nullAppData_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAppData(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Saves {@code appData} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private void saveAppData(ReadOnlyAppData appData, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            new JsonAppDataStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                    .saveAppData(appData, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void saveAppData_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAppData(new AppData(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAppDataTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.testutil.TypicalAppData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class JsonSerializableAppDataTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            \"JsonSerializableAppDataTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final Path TYPICAL_APPDATA_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAppData.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final Path INVALID_APPDATA_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAppData.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private static final Path DUPLICATE_APPDATA_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateAppData.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private static final Path DUPLICATE_TASKDATA_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskData.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void toModelType_typicalAppDataFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonSerializableAppData dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_APPDATA_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                JsonSerializableAppData.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppData appDataFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppData typicalAppData \u003d TypicalAppData.getTypicalAppData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(appDataFromFile, typicalAppData);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void toModelType_invalidAppDataFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonSerializableAppData dataFromFile \u003d JsonUtil.readJsonFile(INVALID_APPDATA_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                JsonSerializableAppData.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void toModelType_duplicateAppData_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonSerializableAppData dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_APPDATA_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                JsonSerializableAppData.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAppData.MESSAGE_DUPLICATE_TITLE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public void toModelType_duplicateTaskData_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        JsonSerializableAppData dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASKDATA_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                JsonSerializableAppData.class).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAppData.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 46,
      "shuiyao-sg": 9,
      "ShirleyWangxt": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        userPrefs.setAppDataFilePath(Paths.get(\"data/data.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.testutil.TypicalAppData.getTypicalAppData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.ReadOnlyAppData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        JsonAppDataStorage appDataStorage \u003d new JsonAppDataStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        storageManager \u003d new StorageManager(appDataStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void appDataReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "         * {@link JsonAppDataStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAppDataStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppData original \u003d getTypicalAppData();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        storageManager.saveAppData(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        ReadOnlyAppData retrieved \u003d storageManager.readAppData().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertEquals(original, new AppData(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public void getAppDataFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        assertNotNull(storageManager.getAppDataFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 14,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AppDataBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A utility class to help with building AppData objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " *     {@code AppData ab \u003d new AppDataBuilder().withNote(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class AppDataBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private AppData appData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AppDataBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData \u003d new AppData();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AppDataBuilder(AppData appData) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.appData \u003d appData;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Adds a new {@code Note} to the {@code AppData} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AppDataBuilder withNote(Note note) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        appData.addNote(note);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Adds a new {@code Question} to the {@code AppData} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public AppDataBuilder withQuestion(Question question) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        appData.addQuestion(question);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public AppData build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return appData;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 34,
      "ShirleyWangxt": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditNoteDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand.EditNoteDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A utility class to help with building EditNoteDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class EditNoteDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private EditNoteDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor \u003d new EditNoteDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptorBuilder(EditNoteCommand.EditNoteDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.descriptor \u003d new EditNoteCommand.EditNoteDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns an {@code EditNoteDescriptor} with fields containing {@code note}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptorBuilder(Note note) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor \u003d new EditNoteDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.setTitle(note.getTitle());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.setContent(note.getContent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Sets the {@code Title} of the {@code EditNoteDescriptor} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptorBuilder withTitle(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.setTitle(new Title(name));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Sets the {@code Content} of the {@code EditNoteDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptorBuilder withContent(String address) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.setContent(new Content(address));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public EditNoteDescriptor build() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditQuestionDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.EditQuestionCommand.EditQuestionDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * A utility class to help with building EditQuestionDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class EditQuestionDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private EditQuestionDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public EditQuestionDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor \u003d new EditQuestionDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public EditQuestionDescriptorBuilder(EditQuestionDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.descriptor \u003d new EditQuestionDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns an {@code EditQuestionDescriptor} with fields containing {@code question}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public EditQuestionDescriptorBuilder(Question question) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor \u003d new EditQuestionDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.setQuestionBody(question.getQuestionBody());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.setAnswer(question.getAnswer());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.setSubject(question.getSubject());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.setDifficulty(question.getDifficulty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code QuestionBody} of the {@code EditQuestionDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public EditQuestionDescriptorBuilder withQuestionBody(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.setQuestionBody(new QuestionBody(name));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code Answer} of the {@code EditQuestionDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public EditQuestionDescriptorBuilder withAnswer(String address) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.setAnswer(new Answer(address));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code Subject} of the {@code EditQuestionDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public EditQuestionDescriptorBuilder withSubject(String address) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.setSubject(new Subject(address));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code EditQuestionDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public EditQuestionDescriptorBuilder withDifficulty(String address) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.setDifficulty(new Difficulty(address));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public EditQuestionDescriptor build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NoteBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Title;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A utility class to help with building Note objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class NoteBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"A lecture note\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final String DEFAULT_CONTENT \u003d \"Lorem ipsum dolor sit amet\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private Content content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public NoteBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        content \u003d new Content(DEFAULT_CONTENT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Initializes the NoteBuilder with the data of {@code noteToCopy}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public NoteBuilder(Note noteToCopy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        title \u003d noteToCopy.getTitle();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        content \u003d noteToCopy.getContent();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Sets the {@code Title} of the {@code Note} that we are building."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public NoteBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Sets the {@code Content} of the {@code Note} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public NoteBuilder withContent(String content) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        this.content \u003d new Content(content);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public Note build() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return new Note(title, content);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 24,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NoteUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.logic.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A utility class for Note."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class NoteUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns an add command string for adding the {@code note}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static String getAddCommand(Note note) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return AddNoteCommand.COMMAND_WORD + \" \" + getNoteDetails(note);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the part of command string for the given {@code note}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static String getNoteDetails(Note note) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        sb.append(PREFIX_TITLE + note.getTitle().title + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        sb.append(PREFIX_CONTENT + note.getContent().content + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the part of command string for the given {@code EditNoteDescriptor}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static String getEditNoteDescriptorDetails(EditNoteCommand.EditNoteDescriptor descriptor) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.getTitle().ifPresent(name -\u003e sb.append(PREFIX_TITLE).append(name.title).append(\" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        descriptor.getContent().ifPresent(address -\u003e sb.append(PREFIX_CONTENT).append(address.content).append(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 18,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/QuestionBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * A utility class to help with building Question objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class QuestionBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String DEFAULT_QUESTION_BODY \u003d \"A question\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"An answer\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String DEFAULT_SUBJECT \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final String DEFAULT_DIFFICULTY \u003d \"easy\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private QuestionBody questionBody;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Subject subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionBody \u003d new QuestionBody(DEFAULT_QUESTION_BODY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        subject \u003d new Subject(DEFAULT_SUBJECT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        difficulty \u003d new Difficulty(DEFAULT_DIFFICULTY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Initializes the QuestionBuilder with the data of {@code questionToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder(Question questionToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        questionBody \u003d questionToCopy.getQuestionBody();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        answer \u003d questionToCopy.getAnswer();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        subject \u003d questionToCopy.getSubject();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        difficulty \u003d questionToCopy.getDifficulty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code QuestionBody} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder withQuestionBody(String questionBody) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.questionBody \u003d new QuestionBody(questionBody);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code Answer} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code Subject} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder withSubject(String subject) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.subject \u003d new Subject(subject);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code Question} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public QuestionBuilder withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public Question build() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new Question(questionBody, answer, subject, difficulty);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/QuestionUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.AddQuestionCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.logic.commands.questioncommands.EditQuestionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " * A utility class for Question."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "public class QuestionUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns an add command string for adding the {@code question}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static String getAddCommand(Question question) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return AddQuestionCommand.COMMAND_WORD + \" \" + getQuestionDetails(question);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns the part of command string for the given {@code question}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static String getQuestionDetails(Question question) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        sb.append(PREFIX_QUESTION + question.getQuestionBody().body + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        sb.append(PREFIX_ANSWER + question.getAnswer().answer + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        sb.append(PREFIX_SUBJECT + question.getSubject().subject + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        sb.append(PREFIX_DIFFICULTY + question.getDifficulty().difficulty + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     * Returns the part of command string for the given {@code EditQuestionDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static String getEditQuestionDescriptorDetails(EditQuestionCommand.EditQuestionDescriptor descriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.getQuestionBody().ifPresent(qb -\u003e sb.append(PREFIX_QUESTION).append(qb.body).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.getAnswer().ifPresent(ans -\u003e sb.append(PREFIX_ANSWER).append(ans.answer).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.getSubject().ifPresent(sub -\u003e sb.append(PREFIX_SUBJECT).append(sub.subject).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        descriptor.getDifficulty().ifPresent(dif -\u003e sb.append(PREFIX_DIFFICULTY).append(dif.difficulty).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShirleyWangxt": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/QuizResultBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.QuestionBody;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " * A utility class to help with building Quiz Result objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "public class QuizResultBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"An answer\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String DEFAULT_QUESTION_BODY \u003d \"A question\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String DEFAULT_SUBJECT \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String DEFAULT_DIFFICULTY \u003d \"Easy\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"2019/10/10 12:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final String DEFAULT_RESULT \u003d \"true\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private QuestionBody questionBody;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private Subject subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private String quizTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    private boolean result;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionBody \u003d new QuestionBody(DEFAULT_QUESTION_BODY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        subject \u003d new Subject(DEFAULT_SUBJECT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        difficulty \u003d new Difficulty(DEFAULT_DIFFICULTY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizTime \u003d DEFAULT_TIME;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        result \u003d Boolean.parseBoolean(DEFAULT_RESULT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Initializes the QuizResultBuilder with the data of {@code quizResultToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder(QuizResult quizResultToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        answer \u003d quizResultToCopy.getAnswer();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        questionBody \u003d quizResultToCopy.getQuestionBody();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        subject \u003d quizResultToCopy.getSubject();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        difficulty \u003d quizResultToCopy.getDifficulty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        quizTime \u003d quizResultToCopy.getQuizTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        result \u003d quizResultToCopy.getResult();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the {@code Answer} of the {@code QuizResult} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the {@code QuestionBody} of the {@code QuizResult} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder withQuestionBody(String questionBody) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.questionBody \u003d new QuestionBody(questionBody);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the {@code Subject} of the {@code QuizResult} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder withSubject(String subject) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.subject \u003d new Subject(subject);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code QuizResult} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the {@code QuizTime} of the {@code QuizResult} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder withQuizTime(String quizTime) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.quizTime \u003d quizTime;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     * Sets the {@code Result} of the {@code QuizResult} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResultBuilder withResult(String result) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        this.result \u003d Boolean.parseBoolean(result);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public QuizResult build() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new QuizResult(answer, questionBody, subject, difficulty, quizTime, result);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Auxinnn": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/QuizResultFilterBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Difficulty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.question.Subject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.FilterType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "import seedu.address.model.quiz.QuizResultFilter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " * A utility class for helping with building QuizResultFilter objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "irene-lly"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "public class QuizResultFilterBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private QuizResultFilter quizResultFilter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private List\u003cSubject\u003e subjects;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Boolean isCorrectQns;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private Stack\u003cFilterType\u003e operations;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    private SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilterBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        quizResultFilter \u003d new QuizResultFilter();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Sets the {@code Subjects} of the {@code QuizResultFilter} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilterBuilder withSubjects(List\u003cString\u003e subjects) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.subjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (String subject : subjects) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            this.subjects.add(new Subject(subject));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code QuizResultFilter} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilterBuilder withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Sets the {@code StartDate} of the {@code QuizResultFilter} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilterBuilder withStartDate(String startDate) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.startDate \u003d dateFormatter.parse(startDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Sets the {@code EndDate} of the {@code QuizResultFilter} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilterBuilder withEndDate(String endDate) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.endDate \u003d dateFormatter.parse(endDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Sets the {@code isCorrectQns} of the {@code QuizResultFilter} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilterBuilder withIsCorrectQns(String isCorrectQns) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.isCorrectQns \u003d Boolean.valueOf(isCorrectQns);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     * Sets the {@code Operations} of the {@code QuizResultFilter} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilterBuilder withOperations(List\u003cFilterType\u003e operations) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        this.operations \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (FilterType operation : operations) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            this.operations.push(operation);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter buildWithSubjects() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new QuizResultFilter(subjects);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter buildWithDates() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new QuizResultFilter(startDate, endDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter buildWithSubjectsAndResult() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new QuizResultFilter(subjects, isCorrectQns);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter buildWithSubjectsAndDifficulty() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new QuizResultFilter(subjects, difficulty);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter buildEmptySubjectList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new QuizResultFilter(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public QuizResultFilter build() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        return new QuizResultFilter();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "irene-lly": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Heading;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final String DEFAULT_HEADING \u003d \"A task\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final LocalDate DEFAULT_DATE \u003d LocalDate.parse(\"31/12/2019\", Task.FORMAT_USER_INPUT_DATE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final LocalTime DEFAULT_TIME \u003d LocalTime.parse(\"1600\", Task.FORMAT_USER_INPUT_TIME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private Heading heading;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        heading \u003d new Heading(DEFAULT_HEADING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        date \u003d DEFAULT_DATE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        time \u003d DEFAULT_TIME;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code task}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskBuilder(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        heading \u003d task.getHeading();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        date \u003d task.getDate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        time \u003d task.getTime();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        isDone \u003d task.getStatus();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Sets the {@code Heading} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskBuilder withHeading(String heading) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.heading \u003d new Heading(heading);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Sets the {@code Heading} of the {@code Task} that we are building with a {@code Note}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskBuilder withNote(Note note) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.heading \u003d new Heading(note.getTitle().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Sets the {@code Heading} of the {@code Task} that we are building with a {@code Question}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskBuilder withQuestion(Question question) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.heading \u003d new Heading(question.getQuestionBody().toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Sets the {@code Date} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskBuilder withDate(String date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.date \u003d LocalDate.parse(date, Task.FORMAT_USER_INPUT_DATE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Sets the {@code Time} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskBuilder withTime(String time) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.time \u003d LocalTime.parse(time, Task.FORMAT_USER_INPUT_TIME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     * Sets the {@code isDone} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public TaskBuilder withStatus(boolean isDone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new Task(heading, date, time, isDone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuiyao-sg": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the middle index of the note in the {@code model}\u0027s note list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return Index.fromOneBased(model.getFilteredNoteList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the last index of the note in the {@code model}\u0027s note list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return Index.fromOneBased(model.getFilteredNoteList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns the note in the {@code model}\u0027s note list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static Note getNote(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        return model.getFilteredNoteList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAppData.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CORRECT_ANSWER_CONCEPT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CORRECT_RESULT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FINISH_TIME_CONCEPT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INCORRECT_ANSWER_CONCEPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INCORRECT_RESULT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_ALGEBRA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_CONCEPT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_ALGEBRA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_CONCEPT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_BODY_ALGEBRA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_BODY_CONCEPT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_ALGEBRA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_CONCEPT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.AppData;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "import seedu.address.model.quiz.QuizResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": " * A utility class containing a list of {@code Note}, {@code Question} and other objects to be used in tests."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "public class TypicalAppData {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    // notes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note ALICE \u003d new NoteBuilder().withTitle(\"Alice Pauline\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"123, Jurong West Ave 6, #08-111\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note BENSON \u003d new NoteBuilder().withTitle(\"Benson Meier\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"311, Clementi Ave 2, #02-25\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note CARL \u003d new NoteBuilder().withTitle(\"Carl Kurz\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"wall street\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note DANIEL \u003d new NoteBuilder().withTitle(\"Daniel Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"10th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note ELLE \u003d new NoteBuilder().withTitle(\"Elle Meyer\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"michegan ave\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note FIONA \u003d new NoteBuilder().withTitle(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"little tokyo\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note GEORGE \u003d new NoteBuilder().withTitle(\"George Best\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"4th street\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    // questions"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final Question MVC_QUESTION \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withQuestionBody(\"MVC design pattern refers to (  ).\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withAnswer(\"Model View Controller\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withSubject(\"CS2103T\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withDifficulty(\"medium\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final Question TCP_QUESTION \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withQuestionBody(\"A port number in TCP is (  ) bytes long.\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withAnswer(\"2\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withSubject(\"CS2105\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withDifficulty(\"hard\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final Question UDP_QUESTION \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withQuestionBody(\"UDP uses (  ) to dispatch incoming packets to different processes in the same host.\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withAnswer(\"de-multiplexing\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withSubject(\"CS2105\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withDifficulty(\"hard\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    // quiz results"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final QuizResult MVC_RESULT \u003d new QuizResultBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withAnswer(\"Model View Controller\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuestionBody(\"MVC design pattern refers to (  ).\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withSubject(\"CS2103T\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withDifficulty(\"medium\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuizTime(\"2019/10/10 12:00\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withResult(\"true\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final QuizResult TCP_RESULT \u003d new QuizResultBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withAnswer(\"4\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuestionBody(\"A port number in TCP is (  ) bytes long.\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withSubject(\"CS2105\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withDifficulty(\"hard\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuizTime(\"2019/10/20 13:00\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withResult(\"false\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final QuizResult UDP_RESULT \u003d new QuizResultBuilder()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withAnswer(\"de-multiplexing\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuestionBody(\"UDP uses (  ) to dispatch incoming packets to different processes in the same host.\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withSubject(\"CS2105\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withDifficulty(\"hard\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuizTime(\"2019/10/30 1530\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withResult(\"true\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    // Manually added notes"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note HOON \u003d new NoteBuilder().withTitle(\"Hoon Meier\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"little india\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note IDA \u003d new NoteBuilder().withTitle(\"Ida Mueller\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(\"chicago ave\").build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    // Manually added - Note\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note AMY \u003d new NoteBuilder().withTitle(VALID_TITLE_AMY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(VALID_CONTENT_AMY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Note BOB \u003d new NoteBuilder().withTitle(VALID_TITLE_BOB)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            .withContent(VALID_CONTENT_BOB).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    // Manually added - Question\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final Question CONCEPT_QUESTION \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withQuestionBody(VALID_QUESTION_BODY_CONCEPT)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withAnswer(VALID_ANSWER_CONCEPT)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withSubject(VALID_SUBJECT_CONCEPT)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withDifficulty(VALID_DIFFICULTY_CONCEPT)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static final Question ALGEBRA_QUESTION \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withQuestionBody(VALID_QUESTION_BODY_ALGEBRA)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withAnswer(VALID_ANSWER_ALGEBRA)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withSubject(VALID_SUBJECT_ALGEBRA)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .withDifficulty(VALID_DIFFICULTY_ALGEBRA)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    // Manually added - Quiz result\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final QuizResult CORRECT_CONCEPT_RESULT \u003d new QuizResultBuilder()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withAnswer(CORRECT_ANSWER_CONCEPT)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuestionBody(VALID_QUESTION_BODY_CONCEPT)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withSubject(VALID_SUBJECT_CONCEPT)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withDifficulty(VALID_DIFFICULTY_CONCEPT)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuizTime(FINISH_TIME_CONCEPT)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withResult(CORRECT_RESULT)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final QuizResult INCORRECT_CONCEPT_RESULT \u003d new QuizResultBuilder()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withAnswer(INCORRECT_ANSWER_CONCEPT)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuestionBody(VALID_QUESTION_BODY_CONCEPT)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withSubject(VALID_SUBJECT_CONCEPT)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withDifficulty(VALID_DIFFICULTY_CONCEPT)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuizTime(FINISH_TIME_CONCEPT)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withResult(INCORRECT_RESULT)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Note CONAN \u003d new NoteBuilder()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            .withTitle(\"Edogawa Conan\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            .withContent(\"There is always only one truth\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Question CONAN_QUESTION \u003d new QuestionBuilder()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            .withQuestionBody(\"Who is your favourite female character in Detective Conan?\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            .withAnswer(\"Haibara Ai\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            .withSubject(\"Anime\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            .withDifficulty(\"easy\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "    public static final QuizResult CONAN_RESULT \u003d new QuizResultBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withAnswer(\"Haibara Ai\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuestionBody(\"Who is your favourite female character in Detective Conan?\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withSubject(\"Anime\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withDifficulty(\"easy\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withQuizTime(\"2019/10/29 2000\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .withResult(\"true\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Task CONAN_TASK_DEFAULT \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Task CONAN_TASK_FOR_NOTE \u003d new TaskBuilder().withNote(CONAN).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Task CONAN_TASK_FOR_QUESTION \u003d new TaskBuilder().withQuestion(CONAN_QUESTION).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Task CONAN_TASK_MODIFIED_DATE \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            .withNote(CONAN).withDate(\"06/08/2019\").build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Task CONAN_TASK_MODIFIED_TIME \u003d new TaskBuilder().withNote(CONAN).withTime(\"1400\").build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static final Task CONAN_TASK_DONE \u003d new TaskBuilder().withNote(CONAN).withStatus(true).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    private TypicalAppData() {} // prevents instantiation"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "     * Returns an {@code AppData} with all the typical data."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static AppData getTypicalAppData() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        AppData ab \u003d new AppData();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "        for (Note note : getTypicalNotes()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "            ab.addNote(note);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        for (Question question : getTypicalQuestions()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "            ab.addQuestion(question);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        for (QuizResult quizResult : getTypicalQuizResults()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "            ab.addQuizResult(quizResult);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static List\u003cNote\u003e getTypicalNotes() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CONAN_TASK_DEFAULT, CONAN_TASK_FOR_NOTE, CONAN_TASK_FOR_QUESTION,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "                CONAN_TASK_MODIFIED_DATE, CONAN_TASK_MODIFIED_TIME, CONAN_TASK_DONE));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shuiyao-sg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    public static List\u003cQuestion\u003e getTypicalQuestions() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MVC_QUESTION, TCP_QUESTION, UDP_QUESTION, CONAN_QUESTION));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShirleyWangxt"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    public static List\u003cQuizResult\u003e getTypicalQuizResults() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Auxinnn"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MVC_RESULT, TCP_RESULT, UDP_RESULT, CONAN_RESULT));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "irene-lly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "irene-lly"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 38,
      "shuiyao-sg": 30,
      "Auxinnn": 59,
      "irene-lly": 7,
      "ShirleyWangxt": 55,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Parcly-Taxel"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Parcly-Taxel": 3,
      "-": 9
    }
  }
]
